Last login: Fri Aug 11 08:12:54 on ttys001
Hello nEMO
PedroPreciadoIII@Your-MacBook-Pro, 08:13 AM, [~]: cd
PedroPreciadoIII@Your-MacBook-Pro, 08:13 AM, [~]: ls
total 11536
drwx------   5 PedroPreciadoIII  staff      170 May 10 19:04 Applications
drwx------@ 76 PedroPreciadoIII  staff     2584 Aug 10 10:04 Desktop
drwx------@ 11 PedroPreciadoIII  staff      374 Aug  4  2016 Documents
drwx------+ 19 PedroPreciadoIII  staff      646 Aug  8 19:44 Downloads
drwx------@ 23 PedroPreciadoIII  staff      782 Aug  6 16:02 Dropbox
drwx------@ 75 PedroPreciadoIII  staff     2550 Jul 18 23:47 Library
drwx------+  6 PedroPreciadoIII  staff      204 Jun 18 13:44 Movies
drwx------+  6 PedroPreciadoIII  staff      204 Sep 22  2015 Music
drwxr-xr-x   3 PedroPreciadoIII  staff      102 Dec  8  2016 NetBeansProjects
drwx------+ 10 PedroPreciadoIII  staff      340 Jun 18 13:51 Pictures
drwxr-xr-x+  6 PedroPreciadoIII  staff      204 Jun 18 13:51 Public
-rw-r--r--   1 PedroPreciadoIII  staff  5906432 Apr 19 19:31 r
PedroPreciadoIII@Your-MacBook-Pro, 08:13 AM, [~]: cd Desktop/
PedroPreciadoIII@Your-MacBook-Pro, 08:13 AM, [Desktop]: ls
total 528528
-rw-r--r--@  1 PedroPreciadoIII  staff     32256 Mar  3 17:52 400173816_secure_resume_ResumeFeb2017.doc
-rw-r--r--@  1 PedroPreciadoIII  staff    323959 Mar 16 11:09 626.html
drwx------@  5 PedroPreciadoIII  staff       170 Apr  9 15:50 Course Rating
-rw-r--r--@  1 PedroPreciadoIII  staff     63753 Feb 28 20:31 FullSizeRender.jpg
-rw-r--r--@  1 PedroPreciadoIII  staff  28936358 May 10 23:05 GPG_Suite-2017.1b3-v2.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 28 02:10 OneDrive-2017-04-28.zip.download
-rw-r--r--@  1 PedroPreciadoIII  staff  90757811 May 17 19:01 Postgres-2.0.3.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff   3446237 May 21 22:03 Screen Shot 2017-05-21 at 10.03.33 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   2223482 May 21 22:17 Screen Shot 2017-05-21 at 10.17.54 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   1920399 May 21 23:17 Screen Shot 2017-05-21 at 11.17.14 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff  47574872 May  1 16:20 Skype_7.51.593.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff  47366192 May 10 12:50 Skype_7.52.597.dmg
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Nov  5  2016 Spotify Notifications.app
-rw-r--r--@  1 PedroPreciadoIII  staff   1167843 Jul 16 21:10 Terminal Saved Output.txt
-rw-r--r--@  1 PedroPreciadoIII  staff      1256 Apr 18 19:01 W1D2_step1.rb
-rw-r--r--@  1 PedroPreciadoIII  staff      1035 Apr 18 19:32 W1D2_step2.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Dec  8  2016 Wallpapers
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Aug 10 23:26 aa
drwxr-xr-x@ 16 PedroPreciadoIII  staff       544 Aug  7 08:31 aa-practice-test-generator-master-2
drwxr-xr-x  41 PedroPreciadoIII  staff      1394 Aug 10 08:55 aa_exercises
drwxr-xr-x   2 PedroPreciadoIII  staff        68 Aug  1 08:51 aa_july_cohort
-rw-r--r--@  1 PedroPreciadoIII  staff   3209812 Jul 18 23:57 androidfiletransfer.dmg
drwxr-xr-x  51 PedroPreciadoIII  staff      1734 Jul 26 21:40 appacademy
drwxr-xr-x@  8 PedroPreciadoIII  staff       272 Feb 23 18:44 appacademy-online-battleship-323762b3aed6
-rw-r--r--@  1 PedroPreciadoIII  staff      6007 Jul 25 23:51 appacademy-online-battleship-4b3fb16bf1e6.zip
-rw-r--r--@  1 PedroPreciadoIII  staff    125797 Jul 26 16:19 appacademy-online-hangman-084a60135661.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      4446 Jul 24 16:42 appacademy-online-mastermind-079b4a677f64.zip
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Jun 27 17:19 appacademy-online-rspec-3-f2c1cdd76306
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Feb 22 21:28 appacademy-online-students-courses-103ccbf70eb0
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Mar 22 11:57 ccsf
-rw-r--r--@  1 PedroPreciadoIII  staff     11234 Jul 31 14:09 chek.zip
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jul 29 02:32 chrome-mac
drwxr-xr-x  25 PedroPreciadoIII  staff       850 May 11 12:51 cnit132
-rw-r--r--@  1 PedroPreciadoIII  staff  20737194 Jul 18 23:45 commander.dmg
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jun 22 22:54 credential_content
-rw-r--r--@  1 PedroPreciadoIII  staff      5182 Apr 19 12:56 crouton.png
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Apr 17 11:44 cs131a
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Apr 12 12:53 cs132a
drwxr-xr-x  16 PedroPreciadoIII  staff       544 Feb 15 12:50 cs160a
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Feb  4  2017 cs177
drwxr-xr-x  14 PedroPreciadoIII  staff       476 May 10 19:04 dmgs
-rw-------   1 PedroPreciadoIII  staff      2632 Apr  9 23:56 dook
-rw-r--r--@  1 PedroPreciadoIII  staff    106253 Jul 29 18:53 edmund_li_resume.pdf
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Apr 28 01:39 education_equity
-rw-r--r--@  1 PedroPreciadoIII  staff       964 Apr 20 21:06 first.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Aug  7 21:24 firstname_lastname
drwxr-xr-x   4 PedroPreciadoIII  staff       136 May  6  2016 geometry
drwxr-xr-x  21 PedroPreciadoIII  staff       714 Jul 29 20:42 gr
-rw-r--r--   1 PedroPreciadoIII  staff       128 Apr 11 13:31 hideicons
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Aug  5  2016 housing
drwxr-xr-x   2 PedroPreciadoIII  staff        68 May 10 23:02 kali
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 May 10 23:18 kali-linux-2017.1-amd64.iso.download
-rw-r--r--@  1 PedroPreciadoIII  staff    138450 Aug  5 23:15 macOSPublicBetaAccessUtility.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 10 15:13 mockups
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jun 22 23:35 mx_2017
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Jul 19 00:11 mx_jun_2017
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Apr 17 11:44 new_folder
drwxr-xr-x   6 PedroPreciadoIII  staff       204 Jul 19 01:45 nexus5
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Feb 23 13:37 pdfs
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:41 pedro_preciado
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:42 pedro_preciado 2
-rw-r--r--@  1 PedroPreciadoIII  staff      6493 Jul 26 20:00 practice_assessment.rb
drwxr-xr-x   7 PedroPreciadoIII  staff       238 Jul 26  2016 programming
-rw-r--r--@  1 PedroPreciadoIII  staff  22355024 Apr 12 12:49 python-2.7.12-macosx10.6.pkg
drwxr-xr-x  18 PedroPreciadoIII  staff       612 Feb 21 16:57 resumes
drwxr-xr-x@  7 PedroPreciadoIII  staff       238 Jul 19 23:42 rspec2solutions
-rw-r--r--@  1 PedroPreciadoIII  staff      6866 Jul 19 23:40 rspecsolution.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      5450 Apr  5 12:18 sessions.html
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jul 19 01:46 sfsu
-rw-------@  1 PedroPreciadoIII  staff       162 Mar  2  2016 ~$TEA Assignment Prompt  Examples.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$dro Preciado III.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$mmer Teacher Application (March 2016).doc
PedroPreciadoIII@Your-MacBook-Pro, 08:13 AM, [Desktop]: cd cd aa
-bash: cd: cd: No such file or directory
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [Desktop]: ls
total 528528
-rw-r--r--@  1 PedroPreciadoIII  staff     32256 Mar  3 17:52 400173816_secure_resume_ResumeFeb2017.doc
-rw-r--r--@  1 PedroPreciadoIII  staff    323959 Mar 16 11:09 626.html
drwx------@  5 PedroPreciadoIII  staff       170 Apr  9 15:50 Course Rating
-rw-r--r--@  1 PedroPreciadoIII  staff     63753 Feb 28 20:31 FullSizeRender.jpg
-rw-r--r--@  1 PedroPreciadoIII  staff  28936358 May 10 23:05 GPG_Suite-2017.1b3-v2.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 28 02:10 OneDrive-2017-04-28.zip.download
-rw-r--r--@  1 PedroPreciadoIII  staff  90757811 May 17 19:01 Postgres-2.0.3.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff   3446237 May 21 22:03 Screen Shot 2017-05-21 at 10.03.33 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   2223482 May 21 22:17 Screen Shot 2017-05-21 at 10.17.54 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   1920399 May 21 23:17 Screen Shot 2017-05-21 at 11.17.14 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff  47574872 May  1 16:20 Skype_7.51.593.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff  47366192 May 10 12:50 Skype_7.52.597.dmg
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Nov  5  2016 Spotify Notifications.app
-rw-r--r--@  1 PedroPreciadoIII  staff   1167843 Jul 16 21:10 Terminal Saved Output.txt
-rw-r--r--@  1 PedroPreciadoIII  staff      1256 Apr 18 19:01 W1D2_step1.rb
-rw-r--r--@  1 PedroPreciadoIII  staff      1035 Apr 18 19:32 W1D2_step2.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Dec  8  2016 Wallpapers
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Aug 10 23:26 aa
drwxr-xr-x@ 16 PedroPreciadoIII  staff       544 Aug  7 08:31 aa-practice-test-generator-master-2
drwxr-xr-x  41 PedroPreciadoIII  staff      1394 Aug 10 08:55 aa_exercises
drwxr-xr-x   2 PedroPreciadoIII  staff        68 Aug  1 08:51 aa_july_cohort
-rw-r--r--@  1 PedroPreciadoIII  staff   3209812 Jul 18 23:57 androidfiletransfer.dmg
drwxr-xr-x  51 PedroPreciadoIII  staff      1734 Jul 26 21:40 appacademy
drwxr-xr-x@  8 PedroPreciadoIII  staff       272 Feb 23 18:44 appacademy-online-battleship-323762b3aed6
-rw-r--r--@  1 PedroPreciadoIII  staff      6007 Jul 25 23:51 appacademy-online-battleship-4b3fb16bf1e6.zip
-rw-r--r--@  1 PedroPreciadoIII  staff    125797 Jul 26 16:19 appacademy-online-hangman-084a60135661.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      4446 Jul 24 16:42 appacademy-online-mastermind-079b4a677f64.zip
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Jun 27 17:19 appacademy-online-rspec-3-f2c1cdd76306
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Feb 22 21:28 appacademy-online-students-courses-103ccbf70eb0
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Mar 22 11:57 ccsf
-rw-r--r--@  1 PedroPreciadoIII  staff     11234 Jul 31 14:09 chek.zip
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jul 29 02:32 chrome-mac
drwxr-xr-x  25 PedroPreciadoIII  staff       850 May 11 12:51 cnit132
-rw-r--r--@  1 PedroPreciadoIII  staff  20737194 Jul 18 23:45 commander.dmg
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jun 22 22:54 credential_content
-rw-r--r--@  1 PedroPreciadoIII  staff      5182 Apr 19 12:56 crouton.png
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Apr 17 11:44 cs131a
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Apr 12 12:53 cs132a
drwxr-xr-x  16 PedroPreciadoIII  staff       544 Feb 15 12:50 cs160a
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Feb  4  2017 cs177
drwxr-xr-x  14 PedroPreciadoIII  staff       476 May 10 19:04 dmgs
-rw-------   1 PedroPreciadoIII  staff      2632 Apr  9 23:56 dook
-rw-r--r--@  1 PedroPreciadoIII  staff    106253 Jul 29 18:53 edmund_li_resume.pdf
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Apr 28 01:39 education_equity
-rw-r--r--@  1 PedroPreciadoIII  staff       964 Apr 20 21:06 first.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Aug  7 21:24 firstname_lastname
drwxr-xr-x   4 PedroPreciadoIII  staff       136 May  6  2016 geometry
drwxr-xr-x  21 PedroPreciadoIII  staff       714 Jul 29 20:42 gr
-rw-r--r--   1 PedroPreciadoIII  staff       128 Apr 11 13:31 hideicons
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Aug  5  2016 housing
drwxr-xr-x   2 PedroPreciadoIII  staff        68 May 10 23:02 kali
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 May 10 23:18 kali-linux-2017.1-amd64.iso.download
-rw-r--r--@  1 PedroPreciadoIII  staff    138450 Aug  5 23:15 macOSPublicBetaAccessUtility.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 10 15:13 mockups
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jun 22 23:35 mx_2017
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Jul 19 00:11 mx_jun_2017
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Apr 17 11:44 new_folder
drwxr-xr-x   6 PedroPreciadoIII  staff       204 Jul 19 01:45 nexus5
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Feb 23 13:37 pdfs
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:41 pedro_preciado
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:42 pedro_preciado 2
-rw-r--r--@  1 PedroPreciadoIII  staff      6493 Jul 26 20:00 practice_assessment.rb
drwxr-xr-x   7 PedroPreciadoIII  staff       238 Jul 26  2016 programming
-rw-r--r--@  1 PedroPreciadoIII  staff  22355024 Apr 12 12:49 python-2.7.12-macosx10.6.pkg
drwxr-xr-x  18 PedroPreciadoIII  staff       612 Feb 21 16:57 resumes
drwxr-xr-x@  7 PedroPreciadoIII  staff       238 Jul 19 23:42 rspec2solutions
-rw-r--r--@  1 PedroPreciadoIII  staff      6866 Jul 19 23:40 rspecsolution.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      5450 Apr  5 12:18 sessions.html
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jul 19 01:46 sfsu
-rw-------@  1 PedroPreciadoIII  staff       162 Mar  2  2016 ~$TEA Assignment Prompt  Examples.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$dro Preciado III.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$mmer Teacher Application (March 2016).doc
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [Desktop]: ls
total 528528
-rw-r--r--@  1 PedroPreciadoIII  staff     32256 Mar  3 17:52 400173816_secure_resume_ResumeFeb2017.doc
-rw-r--r--@  1 PedroPreciadoIII  staff    323959 Mar 16 11:09 626.html
drwx------@  5 PedroPreciadoIII  staff       170 Apr  9 15:50 Course Rating
-rw-r--r--@  1 PedroPreciadoIII  staff     63753 Feb 28 20:31 FullSizeRender.jpg
-rw-r--r--@  1 PedroPreciadoIII  staff  28936358 May 10 23:05 GPG_Suite-2017.1b3-v2.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 28 02:10 OneDrive-2017-04-28.zip.download
-rw-r--r--@  1 PedroPreciadoIII  staff  90757811 May 17 19:01 Postgres-2.0.3.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff   3446237 May 21 22:03 Screen Shot 2017-05-21 at 10.03.33 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   2223482 May 21 22:17 Screen Shot 2017-05-21 at 10.17.54 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   1920399 May 21 23:17 Screen Shot 2017-05-21 at 11.17.14 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff  47574872 May  1 16:20 Skype_7.51.593.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff  47366192 May 10 12:50 Skype_7.52.597.dmg
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Nov  5  2016 Spotify Notifications.app
-rw-r--r--@  1 PedroPreciadoIII  staff   1167843 Jul 16 21:10 Terminal Saved Output.txt
-rw-r--r--@  1 PedroPreciadoIII  staff      1256 Apr 18 19:01 W1D2_step1.rb
-rw-r--r--@  1 PedroPreciadoIII  staff      1035 Apr 18 19:32 W1D2_step2.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Dec  8  2016 Wallpapers
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Aug 10 23:26 aa
drwxr-xr-x@ 16 PedroPreciadoIII  staff       544 Aug  7 08:31 aa-practice-test-generator-master-2
drwxr-xr-x  41 PedroPreciadoIII  staff      1394 Aug 10 08:55 aa_exercises
drwxr-xr-x   2 PedroPreciadoIII  staff        68 Aug  1 08:51 aa_july_cohort
-rw-r--r--@  1 PedroPreciadoIII  staff   3209812 Jul 18 23:57 androidfiletransfer.dmg
drwxr-xr-x  51 PedroPreciadoIII  staff      1734 Jul 26 21:40 appacademy
drwxr-xr-x@  8 PedroPreciadoIII  staff       272 Feb 23 18:44 appacademy-online-battleship-323762b3aed6
-rw-r--r--@  1 PedroPreciadoIII  staff      6007 Jul 25 23:51 appacademy-online-battleship-4b3fb16bf1e6.zip
-rw-r--r--@  1 PedroPreciadoIII  staff    125797 Jul 26 16:19 appacademy-online-hangman-084a60135661.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      4446 Jul 24 16:42 appacademy-online-mastermind-079b4a677f64.zip
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Jun 27 17:19 appacademy-online-rspec-3-f2c1cdd76306
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Feb 22 21:28 appacademy-online-students-courses-103ccbf70eb0
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Mar 22 11:57 ccsf
-rw-r--r--@  1 PedroPreciadoIII  staff     11234 Jul 31 14:09 chek.zip
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jul 29 02:32 chrome-mac
drwxr-xr-x  25 PedroPreciadoIII  staff       850 May 11 12:51 cnit132
-rw-r--r--@  1 PedroPreciadoIII  staff  20737194 Jul 18 23:45 commander.dmg
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jun 22 22:54 credential_content
-rw-r--r--@  1 PedroPreciadoIII  staff      5182 Apr 19 12:56 crouton.png
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Apr 17 11:44 cs131a
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Apr 12 12:53 cs132a
drwxr-xr-x  16 PedroPreciadoIII  staff       544 Feb 15 12:50 cs160a
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Feb  4  2017 cs177
drwxr-xr-x  14 PedroPreciadoIII  staff       476 May 10 19:04 dmgs
-rw-------   1 PedroPreciadoIII  staff      2632 Apr  9 23:56 dook
-rw-r--r--@  1 PedroPreciadoIII  staff    106253 Jul 29 18:53 edmund_li_resume.pdf
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Apr 28 01:39 education_equity
-rw-r--r--@  1 PedroPreciadoIII  staff       964 Apr 20 21:06 first.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Aug  7 21:24 firstname_lastname
drwxr-xr-x   4 PedroPreciadoIII  staff       136 May  6  2016 geometry
drwxr-xr-x  21 PedroPreciadoIII  staff       714 Jul 29 20:42 gr
-rw-r--r--   1 PedroPreciadoIII  staff       128 Apr 11 13:31 hideicons
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Aug  5  2016 housing
drwxr-xr-x   2 PedroPreciadoIII  staff        68 May 10 23:02 kali
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 May 10 23:18 kali-linux-2017.1-amd64.iso.download
-rw-r--r--@  1 PedroPreciadoIII  staff    138450 Aug  5 23:15 macOSPublicBetaAccessUtility.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 10 15:13 mockups
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jun 22 23:35 mx_2017
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Jul 19 00:11 mx_jun_2017
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Apr 17 11:44 new_folder
drwxr-xr-x   6 PedroPreciadoIII  staff       204 Jul 19 01:45 nexus5
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Feb 23 13:37 pdfs
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:41 pedro_preciado
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:42 pedro_preciado 2
-rw-r--r--@  1 PedroPreciadoIII  staff      6493 Jul 26 20:00 practice_assessment.rb
drwxr-xr-x   7 PedroPreciadoIII  staff       238 Jul 26  2016 programming
-rw-r--r--@  1 PedroPreciadoIII  staff  22355024 Apr 12 12:49 python-2.7.12-macosx10.6.pkg
drwxr-xr-x  18 PedroPreciadoIII  staff       612 Feb 21 16:57 resumes
drwxr-xr-x@  7 PedroPreciadoIII  staff       238 Jul 19 23:42 rspec2solutions
-rw-r--r--@  1 PedroPreciadoIII  staff      6866 Jul 19 23:40 rspecsolution.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      5450 Apr  5 12:18 sessions.html
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jul 19 01:46 sfsu
-rw-------@  1 PedroPreciadoIII  staff       162 Mar  2  2016 ~$TEA Assignment Prompt  Examples.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$dro Preciado III.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$mmer Teacher Application (March 2016).doc
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [Desktop]: cd aa
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [aa]: ls
total 0
drwxr-xr-x   5 PedroPreciadoIII  staff  170 Aug 10 10:04 assesment_02_prac
drwxr-xr-x   2 PedroPreciadoIII  staff   68 Aug  7 00:17 assessment
drwxr-xr-x   5 PedroPreciadoIII  staff  170 Aug 10 23:26 firstname_lastname-2
drwxr-xr-x  12 PedroPreciadoIII  staff  408 Aug 10 23:27 homework
drwxr-xr-x  10 PedroPreciadoIII  staff  340 Aug 10 08:19 pair_projects
drwxr-xr-x   8 PedroPreciadoIII  staff  272 Aug  7 21:47 practice
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [aa]: cd asses
assesment_02_prac/ assessment/        
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [aa]: cd assesment_02_prac
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [assesment_02_prac]: ls
total 32
drwxr-xr-x@ 8 PedroPreciadoIII  staff    272 May 18  2016 firstname_lastname-2
-rw-r--r--  1 PedroPreciadoIII  staff  14724 Aug 10 10:04 pedro_preciado.zip
PedroPreciadoIII@Your-MacBook-Pro, 08:14 AM, [assesment_02_prac]: cd firstname_lastname-2/
PedroPreciadoIII@Your-MacBook-Pro, 08:15 AM, [firstname_lastname-2]: ls
total 24
-rw-r--r--@ 1 PedroPreciadoIII  staff    68 May 18  2016 Gemfile
-rw-r--r--@ 1 PedroPreciadoIII  staff   635 May 18  2016 Gemfile.lock
-rw-r--r--@ 1 PedroPreciadoIII  staff  1425 May 18  2016 README.md
drwxr-xr-x@ 7 PedroPreciadoIII  staff   238 May 18  2016 lib
drwxr-xr-x@ 6 PedroPreciadoIII  staff   204 May 18  2016 spec
PedroPreciadoIII@Your-MacBook-Pro, 08:15 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007ffd17148928 @suit=:clubs, @value=:deuce>
#<Card:0x007ffd171484f0 @suit=:clubs, @value=:three>
#<Card:0x007ffd17148298 @suit=:clubs, @value=:four>
#<Card:0x007ffd17873f90 @suit=:clubs, @value=:five>
#<Card:0x007ffd17873b58 @suit=:clubs, @value=:six>
#<Card:0x007ffd17873950 @suit=:clubs, @value=:seven>
#<Card:0x007ffd178734c8 @suit=:clubs, @value=:eight>
#<Card:0x007ffd17873090 @suit=:clubs, @value=:nine>
#<Card:0x007ffd17872bb8 @suit=:clubs, @value=:ten>
#<Card:0x007ffd17872730 @suit=:clubs, @value=:jack>
#<Card:0x007ffd17872140 @suit=:clubs, @value=:queen>
#<Card:0x007ffd17871c18 @suit=:clubs, @value=:king>
#<Card:0x007ffd17871718 @suit=:clubs, @value=:ace>
#<Card:0x007ffd17871150 @suit=:diamonds, @value=:deuce>
#<Card:0x007ffd17870b10 @suit=:diamonds, @value=:three>
#<Card:0x007ffd17870548 @suit=:diamonds, @value=:four>
#<Card:0x007ffd178700c0 @suit=:diamonds, @value=:five>
#<Card:0x007ffd1786bb10 @suit=:diamonds, @value=:six>
#<Card:0x007ffd1786b5c0 @suit=:diamonds, @value=:seven>
#<Card:0x007ffd1786af58 @suit=:diamonds, @value=:eight>
#<Card:0x007ffd1786a800 @suit=:diamonds, @value=:nine>
#<Card:0x007ffd17869bf8 @suit=:diamonds, @value=:ten>
#<Card:0x007ffd17869680 @suit=:diamonds, @value=:jack>
#<Card:0x007ffd178690b8 @suit=:diamonds, @value=:queen>
#<Card:0x007ffd17868528 @suit=:diamonds, @value=:king>
#<Card:0x007ffd17868078 @suit=:diamonds, @value=:ace>
#<Card:0x007ffd171437c0 @suit=:hearts, @value=:deuce>
#<Card:0x007ffd17143388 @suit=:hearts, @value=:three>
#<Card:0x007ffd17142ca8 @suit=:hearts, @value=:four>
#<Card:0x007ffd171424d8 @suit=:hearts, @value=:five>
#<Card:0x007ffd17142078 @suit=:hearts, @value=:six>
#<Card:0x007ffd17141bc8 @suit=:hearts, @value=:seven>
#<Card:0x007ffd17141790 @suit=:hearts, @value=:eight>
#<Card:0x007ffd17141128 @suit=:hearts, @value=:nine>
#<Card:0x007ffd17140c28 @suit=:hearts, @value=:ten>
#<Card:0x007ffd1782fed0 @suit=:hearts, @value=:jack>
#<Card:0x007ffd1782f7c8 @suit=:hearts, @value=:queen>
#<Card:0x007ffd1782eff8 @suit=:hearts, @value=:king>
#<Card:0x007ffd1782e760 @suit=:hearts, @value=:ace>
#<Card:0x007ffd1782dea0 @suit=:spades, @value=:deuce>
#<Card:0x007ffd1782d540 @suit=:spades, @value=:three>
#<Card:0x007ffd1782d018 @suit=:spades, @value=:four>
#<Card:0x007ffd1782ca28 @suit=:spades, @value=:five>
#<Card:0x007ffd1782c550 @suit=:spades, @value=:six>
#<Card:0x007ffd1782c0c8 @suit=:spades, @value=:seven>
#<Card:0x007ffd1782b470 @suit=:spades, @value=:eight>
#<Card:0x007ffd1782adb8 @suit=:spades, @value=:nine>
#<Card:0x007ffd1782a868 @suit=:spades, @value=:ten>
#<Card:0x007ffd1782a368 @suit=:spades, @value=:jack>
#<Card:0x007ffd17829d28 @suit=:spades, @value=:queen>
#<Card:0x007ffd17829878 @suit=:spades, @value=:king>
#<Card:0x007ffd178294b8 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007ffd18837f58 @suit=:clubs, @value=:deuce>
#<Card:0x007ffd18837c60 @suit=:clubs, @value=:three>
#<Card:0x007ffd18837940 @suit=:clubs, @value=:four>
#<Card:0x007ffd18837620 @suit=:clubs, @value=:five>
#<Card:0x007ffd18837300 @suit=:clubs, @value=:six>
#<Card:0x007ffd18837030 @suit=:clubs, @value=:seven>
#<Card:0x007ffd18836c20 @suit=:clubs, @value=:eight>
#<Card:0x007ffd188367c0 @suit=:clubs, @value=:nine>
#<Card:0x007ffd188361f8 @suit=:clubs, @value=:ten>
#<Card:0x007ffd18835eb0 @suit=:clubs, @value=:jack>
#<Card:0x007ffd18835a28 @suit=:clubs, @value=:queen>
#<Card:0x007ffd188356b8 @suit=:clubs, @value=:king>
#<Card:0x007ffd18835320 @suit=:clubs, @value=:ace>
#<Card:0x007ffd18834ec0 @suit=:diamonds, @value=:deuce>
#<Card:0x007ffd18834b28 @suit=:diamonds, @value=:three>
#<Card:0x007ffd18834808 @suit=:diamonds, @value=:four>
#<Card:0x007ffd18834420 @suit=:diamonds, @value=:five>
#<Card:0x007ffd188340b0 @suit=:diamonds, @value=:six>
#<Card:0x007ffd1882fd08 @suit=:diamonds, @value=:seven>
#<Card:0x007ffd1882f920 @suit=:diamonds, @value=:eight>
#<Card:0x007ffd1882f3f8 @suit=:diamonds, @value=:nine>
#<Card:0x007ffd1882eed0 @suit=:diamonds, @value=:ten>
#<Card:0x007ffd1882e7c8 @suit=:diamonds, @value=:jack>
#<Card:0x007ffd1882e2f0 @suit=:diamonds, @value=:queen>
#<Card:0x007ffd1882dd28 @suit=:diamonds, @value=:king>
#<Card:0x007ffd1882d9b8 @suit=:diamonds, @value=:ace>
#<Card:0x007ffd1882d788 @suit=:hearts, @value=:deuce>
#<Card:0x007ffd1882d580 @suit=:hearts, @value=:three>
#<Card:0x007ffd1882d328 @suit=:hearts, @value=:four>
#<Card:0x007ffd1882d008 @suit=:hearts, @value=:five>
#<Card:0x007ffd1882cd38 @suit=:hearts, @value=:six>
#<Card:0x007ffd1882c540 @suit=:hearts, @value=:seven>
#<Card:0x007ffd18827c48 @suit=:hearts, @value=:eight>
#<Card:0x007ffd188272e8 @suit=:hearts, @value=:nine>
#<Card:0x007ffd18826d98 @suit=:hearts, @value=:ten>
#<Card:0x007ffd18826618 @suit=:hearts, @value=:jack>
#<Card:0x007ffd18826280 @suit=:hearts, @value=:queen>
#<Card:0x007ffd18825f10 @suit=:hearts, @value=:king>
#<Card:0x007ffd18825a88 @suit=:hearts, @value=:ace>
#<Card:0x007ffd18825100 @suit=:spades, @value=:deuce>
#<Card:0x007ffd18824e80 @suit=:spades, @value=:three>
#<Card:0x007ffd18824b88 @suit=:spades, @value=:four>
#<Card:0x007ffd18824840 @suit=:spades, @value=:five>
#<Card:0x007ffd1881fbd8 @suit=:spades, @value=:six>
#<Card:0x007ffd1881f7f0 @suit=:spades, @value=:seven>
#<Card:0x007ffd1881f430 @suit=:spades, @value=:eight>
#<Card:0x007ffd1881f160 @suit=:spades, @value=:nine>
#<Card:0x007ffd1881eda0 @suit=:spades, @value=:ten>
#<Card:0x007ffd1881eb48 @suit=:spades, @value=:jack>
#<Card:0x007ffd1881e968 @suit=:spades, @value=:queen>
#<Card:0x007ffd1881e558 @suit=:spades, @value=:king>
#<Card:0x007ffd1881e378 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007ffd188175a0 @suit=:clubs, @value=:deuce>
#<Card:0x007ffd18817208 @suit=:clubs, @value=:three>
#<Card:0x007ffd18816fd8 @suit=:clubs, @value=:four>
#<Card:0x007ffd18816d58 @suit=:clubs, @value=:five>
#<Card:0x007ffd18816a88 @suit=:clubs, @value=:six>
#<Card:0x007ffd18816858 @suit=:clubs, @value=:seven>
#<Card:0x007ffd18816650 @suit=:clubs, @value=:eight>
#<Card:0x007ffd18816128 @suit=:clubs, @value=:nine>
#<Card:0x007ffd18815e80 @suit=:clubs, @value=:ten>
#<Card:0x007ffd18815b88 @suit=:clubs, @value=:jack>
#<Card:0x007ffd18815908 @suit=:clubs, @value=:queen>
#<Card:0x007ffd188152c8 @suit=:clubs, @value=:king>
#<Card:0x007ffd18815048 @suit=:clubs, @value=:ace>
#<Card:0x007ffd18814cd8 @suit=:diamonds, @value=:deuce>
#<Card:0x007ffd18814a08 @suit=:diamonds, @value=:three>
#<Card:0x007ffd18814530 @suit=:diamonds, @value=:four>
#<Card:0x007ffd18814210 @suit=:diamonds, @value=:five>
#<Card:0x007ffd1880fe90 @suit=:diamonds, @value=:six>
#<Card:0x007ffd1880fc38 @suit=:diamonds, @value=:seven>
#<Card:0x007ffd1880fa80 @suit=:diamonds, @value=:eight>
#<Card:0x007ffd1880f828 @suit=:diamonds, @value=:nine>
#<Card:0x007ffd1880f378 @suit=:diamonds, @value=:ten>
#<Card:0x007ffd1880db40 @suit=:diamonds, @value=:jack>
#<Card:0x007ffd1880cfb0 @suit=:diamonds, @value=:queen>
#<Card:0x007ffd18806818 @suit=:diamonds, @value=:king>
#<Card:0x007ffd18804db0 @suit=:diamonds, @value=:ace>
#<Card:0x007ffd17817038 @suit=:hearts, @value=:deuce>
#<Card:0x007ffd17814540 @suit=:hearts, @value=:three>
#<Card:0x007ffd1711b7e8 @suit=:hearts, @value=:four>
#<Card:0x007ffd1711a7d0 @suit=:hearts, @value=:five>
#<Card:0x007ffd17119dd0 @suit=:hearts, @value=:six>
#<Card:0x007ffd17118d18 @suit=:hearts, @value=:seven>
#<Card:0x007ffd171184d0 @suit=:hearts, @value=:eight>
#<Card:0x007ffd17113a98 @suit=:hearts, @value=:nine>
#<Card:0x007ffd17112760 @suit=:hearts, @value=:ten>
#<Card:0x007ffd17111130 @suit=:hearts, @value=:jack>
#<Card:0x007ffd17103b98 @suit=:hearts, @value=:queen>
#<Card:0x007ffd17102dd8 @suit=:hearts, @value=:king>
#<Card:0x007ffd17102680 @suit=:hearts, @value=:ace>
#<Card:0x007ffd17101d48 @suit=:spades, @value=:deuce>
#<Card:0x007ffd17100a60 @suit=:spades, @value=:three>
#<Card:0x007ffd1785fe00 @suit=:spades, @value=:four>
#<Card:0x007ffd1785fa18 @suit=:spades, @value=:five>
#<Card:0x007ffd1785f680 @suit=:spades, @value=:six>
#<Card:0x007ffd1785f1a8 @suit=:spades, @value=:seven>
#<Card:0x007ffd1785ea50 @suit=:spades, @value=:eight>
#<Card:0x007ffd1785d740 @suit=:spades, @value=:nine>
#<Card:0x007ffd1785c980 @suit=:spades, @value=:ten>
#<Card:0x007ffd1785c1d8 @suit=:spades, @value=:jack>
#<Card:0x007ffd17856e90 @suit=:spades, @value=:queen>
#<Card:0x007ffd17856738 @suit=:spades, @value=:king>
#<Card:0x007ffd17856148 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ffe8b8f19ec @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ffe8b8f19ec @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ffe8b8e8798 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ffe8b8e8798 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007ffd1783d5f8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007ffd1702e470 @suit=:spades, @value=:deuce>, #<Card:0x007ffd1702e380 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007ffd170266d0 @suit=:spades, @value=:ten>, #<Card:0x007ffd17026518 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007ffd173272f8 @suit=:spades, @value=:ace>, #<Card:0x007ffd17327258 @suit=:spades, @value=:ten>, #<Card:0x007ffd173271b8 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ffe8b9aac08 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ffe8b9aac08 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ffd1748d1d8 @suit=:spades, @value=:deuce>, #<Card:0x007ffd1748d0c0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ffd1748d1d8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ffd1748d0c0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ffe8bd59458 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ffe8bd59458 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ffd17aa90d0 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ffd17aa90d0 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03564 seconds (files took 0.13245 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:15 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fdcc99ede48 @suit=:clubs, @value=:deuce>
#<Card:0x007fdcc99ed8f8 @suit=:clubs, @value=:three>
#<Card:0x007fdcc99eccc8 @suit=:clubs, @value=:four>
#<Card:0x007fdcc99ec7f0 @suit=:clubs, @value=:five>
#<Card:0x007fdcc99ec368 @suit=:clubs, @value=:six>
#<Card:0x007fdcc99e7ea8 @suit=:clubs, @value=:seven>
#<Card:0x007fdcc99e7a48 @suit=:clubs, @value=:eight>
#<Card:0x007fdcc99e77f0 @suit=:clubs, @value=:nine>
#<Card:0x007fdcc99e7228 @suit=:clubs, @value=:ten>
#<Card:0x007fdcc99e6c88 @suit=:clubs, @value=:jack>
#<Card:0x007fdcc99e6828 @suit=:clubs, @value=:queen>
#<Card:0x007fdcc99e6350 @suit=:clubs, @value=:king>
#<Card:0x007fdcc99e5ec8 @suit=:clubs, @value=:ace>
#<Card:0x007fdcc99e5860 @suit=:diamonds, @value=:deuce>
#<Card:0x007fdcc99e5360 @suit=:diamonds, @value=:three>
#<Card:0x007fdcc99e4d70 @suit=:diamonds, @value=:four>
#<Card:0x007fdcc99e46e0 @suit=:diamonds, @value=:five>
#<Card:0x007fdcc99e4190 @suit=:diamonds, @value=:six>
#<Card:0x007fdcc99dfd70 @suit=:diamonds, @value=:seven>
#<Card:0x007fdcc99df938 @suit=:diamonds, @value=:eight>
#<Card:0x007fdcc99df528 @suit=:diamonds, @value=:nine>
#<Card:0x007fdcc99defd8 @suit=:diamonds, @value=:ten>
#<Card:0x007fdcc99debf0 @suit=:diamonds, @value=:jack>
#<Card:0x007fdcc99de6c8 @suit=:diamonds, @value=:queen>
#<Card:0x007fdcc99de358 @suit=:diamonds, @value=:king>
#<Card:0x007fdcc99dddb8 @suit=:diamonds, @value=:ace>
#<Card:0x007fdcc99dd610 @suit=:hearts, @value=:deuce>
#<Card:0x007fdcc99dd200 @suit=:hearts, @value=:three>
#<Card:0x007fdcc99dca58 @suit=:hearts, @value=:four>
#<Card:0x007fdcc99d7fa8 @suit=:hearts, @value=:five>
#<Card:0x007fdcc99d7b20 @suit=:hearts, @value=:six>
#<Card:0x007fdcc99d77b0 @suit=:hearts, @value=:seven>
#<Card:0x007fdcc99d7260 @suit=:hearts, @value=:eight>
#<Card:0x007fdcc99d6f40 @suit=:hearts, @value=:nine>
#<Card:0x007fdcc99d6c48 @suit=:hearts, @value=:ten>
#<Card:0x007fdcc99d6838 @suit=:hearts, @value=:jack>
#<Card:0x007fdcc99d6338 @suit=:hearts, @value=:queen>
#<Card:0x007fdcc99d5ff0 @suit=:hearts, @value=:king>
#<Card:0x007fdcc99d5c58 @suit=:hearts, @value=:ace>
#<Card:0x007fdcc99d5988 @suit=:spades, @value=:deuce>
#<Card:0x007fdcc99d5618 @suit=:spades, @value=:three>
#<Card:0x007fdcc99d5280 @suit=:spades, @value=:four>
#<Card:0x007fdcc99d4ec0 @suit=:spades, @value=:five>
#<Card:0x007fdcc99d48a8 @suit=:spades, @value=:six>
#<Card:0x007fdcc99d44e8 @suit=:spades, @value=:seven>
#<Card:0x007fdcc99d4150 @suit=:spades, @value=:eight>
#<Card:0x007fdcc99cb820 @suit=:spades, @value=:nine>
#<Card:0x007fdcc99ca880 @suit=:spades, @value=:ten>
#<Card:0x007fdcc99c9228 @suit=:spades, @value=:jack>
#<Card:0x007fdcc99c8210 @suit=:spades, @value=:queen>
#<Card:0x007fdcc99c3620 @suit=:spades, @value=:king>
#<Card:0x007fdcc99c2f18 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fdcc99bb6a0 @suit=:clubs, @value=:deuce>
#<Card:0x007fdcc99bb0b0 @suit=:clubs, @value=:three>
#<Card:0x007fdcc99ba9d0 @suit=:clubs, @value=:four>
#<Card:0x007fdcc99ba250 @suit=:clubs, @value=:five>
#<Card:0x007fdcc99b9940 @suit=:clubs, @value=:six>
#<Card:0x007fdcc99b9468 @suit=:clubs, @value=:seven>
#<Card:0x007fdcc99b8ea0 @suit=:clubs, @value=:eight>
#<Card:0x007fdcc99b8900 @suit=:clubs, @value=:nine>
#<Card:0x007fdcc99b81f8 @suit=:clubs, @value=:ten>
#<Card:0x007fdcc99b3d38 @suit=:clubs, @value=:jack>
#<Card:0x007fdcc99b3a18 @suit=:clubs, @value=:queen>
#<Card:0x007fdcc99b36a8 @suit=:clubs, @value=:king>
#<Card:0x007fdcc99b3360 @suit=:clubs, @value=:ace>
#<Card:0x007fdcc99b2f00 @suit=:diamonds, @value=:deuce>
#<Card:0x007fdcc99b29d8 @suit=:diamonds, @value=:three>
#<Card:0x007fdcc99b2618 @suit=:diamonds, @value=:four>
#<Card:0x007fdcc99b2078 @suit=:diamonds, @value=:five>
#<Card:0x007fdcc99b1ce0 @suit=:diamonds, @value=:six>
#<Card:0x007fdcc99b18f8 @suit=:diamonds, @value=:seven>
#<Card:0x007fdcc99b1510 @suit=:diamonds, @value=:eight>
#<Card:0x007fdcc99b11c8 @suit=:diamonds, @value=:nine>
#<Card:0x007fdcc99b0e58 @suit=:diamonds, @value=:ten>
#<Card:0x007fdcc99b0a48 @suit=:diamonds, @value=:jack>
#<Card:0x007fdcc99b0610 @suit=:diamonds, @value=:queen>
#<Card:0x007fdcc99abef8 @suit=:diamonds, @value=:king>
#<Card:0x007fdcc99aba48 @suit=:diamonds, @value=:ace>
#<Card:0x007fdcc99ab570 @suit=:hearts, @value=:deuce>
#<Card:0x007fdcc99ab048 @suit=:hearts, @value=:three>
#<Card:0x007fdcc99aab98 @suit=:hearts, @value=:four>
#<Card:0x007fdcc99aa3c8 @suit=:hearts, @value=:five>
#<Card:0x007fdcc99a9ea0 @suit=:hearts, @value=:six>
#<Card:0x007fdcc99a9a40 @suit=:hearts, @value=:seven>
#<Card:0x007fdcc99a9798 @suit=:hearts, @value=:eight>
#<Card:0x007fdcc99a95b8 @suit=:hearts, @value=:nine>
#<Card:0x007fdcc99a9388 @suit=:hearts, @value=:ten>
#<Card:0x007fdcc99a9090 @suit=:hearts, @value=:jack>
#<Card:0x007fdcc99a8ed8 @suit=:hearts, @value=:queen>
#<Card:0x007fdcc99a8988 @suit=:hearts, @value=:king>
#<Card:0x007fdcc99a82d0 @suit=:hearts, @value=:ace>
#<Card:0x007fdcc99a3fa0 @suit=:spades, @value=:deuce>
#<Card:0x007fdcc99a3870 @suit=:spades, @value=:three>
#<Card:0x007fdcc99a2fb0 @suit=:spades, @value=:four>
#<Card:0x007fdcc99a28d0 @suit=:spades, @value=:five>
#<Card:0x007fdcc99a2538 @suit=:spades, @value=:six>
#<Card:0x007fdcc99a2010 @suit=:spades, @value=:seven>
#<Card:0x007fdcc99a1ae8 @suit=:spades, @value=:eight>
#<Card:0x007fdcc99a1598 @suit=:spades, @value=:nine>
#<Card:0x007fdcc99a0f80 @suit=:spades, @value=:ten>
#<Card:0x007fdcc99a0c38 @suit=:spades, @value=:jack>
#<Card:0x007fdcc99a0738 @suit=:spades, @value=:queen>
#<Card:0x007fdcc999bc10 @suit=:spades, @value=:king>
#<Card:0x007fdcc999b8f0 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fdcc9998600 @suit=:clubs, @value=:deuce>
#<Card:0x007fdcc9998010 @suit=:clubs, @value=:three>
#<Card:0x007fdcc993bd38 @suit=:clubs, @value=:four>
#<Card:0x007fdcc993bb08 @suit=:clubs, @value=:five>
#<Card:0x007fdcc993b8d8 @suit=:clubs, @value=:six>
#<Card:0x007fdcc993b658 @suit=:clubs, @value=:seven>
#<Card:0x007fdcc993b3d8 @suit=:clubs, @value=:eight>
#<Card:0x007fdcc993b0e0 @suit=:clubs, @value=:nine>
#<Card:0x007fdcc993aeb0 @suit=:clubs, @value=:ten>
#<Card:0x007fdcc993ac80 @suit=:clubs, @value=:jack>
#<Card:0x007fdcc993aa78 @suit=:clubs, @value=:queen>
#<Card:0x007fdcc993a820 @suit=:clubs, @value=:king>
#<Card:0x007fdcc993a488 @suit=:clubs, @value=:ace>
#<Card:0x007fdcc993a208 @suit=:diamonds, @value=:deuce>
#<Card:0x007fdcc9939fb0 @suit=:diamonds, @value=:three>
#<Card:0x007fdcc9939d08 @suit=:diamonds, @value=:four>
#<Card:0x007fdcc9939a38 @suit=:diamonds, @value=:five>
#<Card:0x007fdcc99394c0 @suit=:diamonds, @value=:six>
#<Card:0x007fdcc9939240 @suit=:diamonds, @value=:seven>
#<Card:0x007fdcc9938ef8 @suit=:diamonds, @value=:eight>
#<Card:0x007fdcc9938ca0 @suit=:diamonds, @value=:nine>
#<Card:0x007fdcc99389d0 @suit=:diamonds, @value=:ten>
#<Card:0x007fdcc9938778 @suit=:diamonds, @value=:jack>
#<Card:0x007fdcc99384a8 @suit=:diamonds, @value=:queen>
#<Card:0x007fdcc99382a0 @suit=:diamonds, @value=:king>
#<Card:0x007fdcc9939920 @suit=:diamonds, @value=:ace>
#<Card:0x007fdcc9990ec8 @suit=:hearts, @value=:deuce>
#<Card:0x007fdcc99355f0 @suit=:hearts, @value=:three>
#<Card:0x007fdcc9922ec8 @suit=:hearts, @value=:four>
#<Card:0x007fdcc9921848 @suit=:hearts, @value=:five>
#<Card:0x007fdcc991bbf0 @suit=:hearts, @value=:six>
#<Card:0x007fdcc991b100 @suit=:hearts, @value=:seven>
#<Card:0x007fdcc991aa20 @suit=:hearts, @value=:eight>
#<Card:0x007fdcc991a1d8 @suit=:hearts, @value=:nine>
#<Card:0x007fdcc9919300 @suit=:hearts, @value=:ten>
#<Card:0x007fdcc99186a8 @suit=:hearts, @value=:jack>
#<Card:0x007fdcc99137e8 @suit=:hearts, @value=:queen>
#<Card:0x007fdcc9910f48 @suit=:hearts, @value=:king>
#<Card:0x007fdcc9903be0 @suit=:hearts, @value=:ace>
#<Card:0x007fdcc9902b28 @suit=:spades, @value=:deuce>
#<Card:0x007fdcc9902510 @suit=:spades, @value=:three>
#<Card:0x007fdcc99012f0 @suit=:spades, @value=:four>
#<Card:0x007fdcc998be00 @suit=:spades, @value=:five>
#<Card:0x007fdcc998b8b0 @suit=:spades, @value=:six>
#<Card:0x007fdcc998b3d8 @suit=:spades, @value=:seven>
#<Card:0x007fdcc998ac58 @suit=:spades, @value=:eight>
#<Card:0x007fdcc998a6e0 @suit=:spades, @value=:nine>
#<Card:0x007fdcc9983890 @suit=:spades, @value=:ten>
#<Card:0x007fdcc9983200 @suit=:spades, @value=:jack>
#<Card:0x007fdcc9982580 @suit=:spades, @value=:queen>
#<Card:0x007fdcc9981bf8 @suit=:spades, @value=:king>
#<Card:0x007fdcc9981220 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fee64d3b520 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fee64d3b520 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fee64d322e0 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fee64d322e0 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fdcc9968ce8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fdcc982db80 @suit=:spades, @value=:deuce>, #<Card:0x007fdcc982da40 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fdcc98266a0 @suit=:spades, @value=:ten>, #<Card:0x007fdcc98265d8 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fdcc9ccb3b8 @suit=:spades, @value=:ace>, #<Card:0x007fdcc9ccb318 @suit=:spades, @value=:ten>, #<Card:0x007fdcc9ccb278 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fee64e80c3c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fee64e80c3c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fdcc9e612e0 @suit=:spades, @value=:deuce>, #<Card:0x007fdcc9e611f0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fdcc9e612e0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fdcc9e611f0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fee64f21858 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fee64f21858 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fdcc9e39a38 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fdcc9e39a38 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02854 seconds (files took 0.08414 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:16 AM, [firstname_lastname-2]: 
PedroPreciadoIII@Your-MacBook-Pro, 08:16 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fc11c1e61f0 @suit=:clubs, @value=:deuce>
#<Card:0x007fc11c1e52f0 @suit=:clubs, @value=:three>
#<Card:0x007fc11c1e42b0 @suit=:clubs, @value=:four>
#<Card:0x007fc11c1df968 @suit=:clubs, @value=:five>
#<Card:0x007fc11c1df508 @suit=:clubs, @value=:six>
#<Card:0x007fc11c1df0a8 @suit=:clubs, @value=:seven>
#<Card:0x007fc11c1ded38 @suit=:clubs, @value=:eight>
#<Card:0x007fc11c1de6d0 @suit=:clubs, @value=:nine>
#<Card:0x007fc11c1de2c0 @suit=:clubs, @value=:ten>
#<Card:0x007fc11c1ddf78 @suit=:clubs, @value=:jack>
#<Card:0x007fc11c1ddb40 @suit=:clubs, @value=:queen>
#<Card:0x007fc11c1dd7f8 @suit=:clubs, @value=:king>
#<Card:0x007fc11c1dd348 @suit=:clubs, @value=:ace>
#<Card:0x007fc11c1dcf38 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc11c1dc9c0 @suit=:diamonds, @value=:three>
#<Card:0x007fc11c1dc628 @suit=:diamonds, @value=:four>
#<Card:0x007fc11c1dc268 @suit=:diamonds, @value=:five>
#<Card:0x007fc11c1d3d98 @suit=:diamonds, @value=:six>
#<Card:0x007fc11c1d3578 @suit=:diamonds, @value=:seven>
#<Card:0x007fc11c1d2998 @suit=:diamonds, @value=:eight>
#<Card:0x007fc11c1d2218 @suit=:diamonds, @value=:nine>
#<Card:0x007fc11c1d1a20 @suit=:diamonds, @value=:ten>
#<Card:0x007fc11c1d12c8 @suit=:diamonds, @value=:jack>
#<Card:0x007fc11c1d0da0 @suit=:diamonds, @value=:queen>
#<Card:0x007fc11c1d0788 @suit=:diamonds, @value=:king>
#<Card:0x007fc11c1d03f0 @suit=:diamonds, @value=:ace>
#<Card:0x007fc11c1cbd28 @suit=:hearts, @value=:deuce>
#<Card:0x007fc11c1cb350 @suit=:hearts, @value=:three>
#<Card:0x007fc11c1cae28 @suit=:hearts, @value=:four>
#<Card:0x007fc11c1ca7c0 @suit=:hearts, @value=:five>
#<Card:0x007fc11c1ca338 @suit=:hearts, @value=:six>
#<Card:0x007fc11c1c9cf8 @suit=:hearts, @value=:seven>
#<Card:0x007fc11c1c9668 @suit=:hearts, @value=:eight>
#<Card:0x007fc11c1c90c8 @suit=:hearts, @value=:nine>
#<Card:0x007fc11c1c8830 @suit=:hearts, @value=:ten>
#<Card:0x007fc11c1c8088 @suit=:hearts, @value=:jack>
#<Card:0x007fc11c1c3998 @suit=:hearts, @value=:queen>
#<Card:0x007fc11c1c33f8 @suit=:hearts, @value=:king>
#<Card:0x007fc11c1c2ca0 @suit=:hearts, @value=:ace>
#<Card:0x007fc11c1c25c0 @suit=:spades, @value=:deuce>
#<Card:0x007fc11c1c1f30 @suit=:spades, @value=:three>
#<Card:0x007fc11c1c17d8 @suit=:spades, @value=:four>
#<Card:0x007fc11c1c1120 @suit=:spades, @value=:five>
#<Card:0x007fc11c1c0a68 @suit=:spades, @value=:six>
#<Card:0x007fc11c1c06a8 @suit=:spades, @value=:seven>
#<Card:0x007fc11c1bbf90 @suit=:spades, @value=:eight>
#<Card:0x007fc11c1bbce8 @suit=:spades, @value=:nine>
#<Card:0x007fc11c1bba68 @suit=:spades, @value=:ten>
#<Card:0x007fc11c1bb720 @suit=:spades, @value=:jack>
#<Card:0x007fc11c1bb3b0 @suit=:spades, @value=:queen>
#<Card:0x007fc11c1bb0b8 @suit=:spades, @value=:king>
#<Card:0x007fc11c1babb8 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fc11c1b8340 @suit=:clubs, @value=:deuce>
#<Card:0x007fc11c1b3f70 @suit=:clubs, @value=:three>
#<Card:0x007fc11c1b3cf0 @suit=:clubs, @value=:four>
#<Card:0x007fc11c1b3980 @suit=:clubs, @value=:five>
#<Card:0x007fc11c1b37c8 @suit=:clubs, @value=:six>
#<Card:0x007fc11c1b33e0 @suit=:clubs, @value=:seven>
#<Card:0x007fc11c1b30c0 @suit=:clubs, @value=:eight>
#<Card:0x007fc11c1b2e18 @suit=:clubs, @value=:nine>
#<Card:0x007fc11c1b2800 @suit=:clubs, @value=:ten>
#<Card:0x007fc11c1b24b8 @suit=:clubs, @value=:jack>
#<Card:0x007fc11c1b2148 @suit=:clubs, @value=:queen>
#<Card:0x007fc11c1b1d88 @suit=:clubs, @value=:king>
#<Card:0x007fc11c1b1b08 @suit=:clubs, @value=:ace>
#<Card:0x007fc11c1b1888 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc11c1b16d0 @suit=:diamonds, @value=:three>
#<Card:0x007fc11c1b1518 @suit=:diamonds, @value=:four>
#<Card:0x007fc11c1b1310 @suit=:diamonds, @value=:five>
#<Card:0x007fc11c1b1040 @suit=:diamonds, @value=:six>
#<Card:0x007fc11c1b0e38 @suit=:diamonds, @value=:seven>
#<Card:0x007fc11c1b0af0 @suit=:diamonds, @value=:eight>
#<Card:0x007fc11c1b0578 @suit=:diamonds, @value=:nine>
#<Card:0x007fc11c1b00a0 @suit=:diamonds, @value=:ten>
#<Card:0x007fc11c1ab730 @suit=:diamonds, @value=:jack>
#<Card:0x007fc11c1ab0f0 @suit=:diamonds, @value=:queen>
#<Card:0x007fc11c1aac40 @suit=:diamonds, @value=:king>
#<Card:0x007fc11c1aa5d8 @suit=:diamonds, @value=:ace>
#<Card:0x007fc11c1aa088 @suit=:hearts, @value=:deuce>
#<Card:0x007fc11c1a9bb0 @suit=:hearts, @value=:three>
#<Card:0x007fc11c1a9598 @suit=:hearts, @value=:four>
#<Card:0x007fc11c1a8fd0 @suit=:hearts, @value=:five>
#<Card:0x007fc11c1a8c38 @suit=:hearts, @value=:six>
#<Card:0x007fc11c1a8918 @suit=:hearts, @value=:seven>
#<Card:0x007fc11c1a3d78 @suit=:hearts, @value=:eight>
#<Card:0x007fc11c1a3af8 @suit=:hearts, @value=:nine>
#<Card:0x007fc11c1a3800 @suit=:hearts, @value=:ten>
#<Card:0x007fc11c1a3490 @suit=:hearts, @value=:jack>
#<Card:0x007fc11c1a3120 @suit=:hearts, @value=:queen>
#<Card:0x007fc11c1a2e00 @suit=:hearts, @value=:king>
#<Card:0x007fc11c1a2ba8 @suit=:hearts, @value=:ace>
#<Card:0x007fc11c1a2978 @suit=:spades, @value=:deuce>
#<Card:0x007fc11c1a25e0 @suit=:spades, @value=:three>
#<Card:0x007fc11c1a23d8 @suit=:spades, @value=:four>
#<Card:0x007fc11c1a1e88 @suit=:spades, @value=:five>
#<Card:0x007fc11c1a1b90 @suit=:spades, @value=:six>
#<Card:0x007fc11c1a1780 @suit=:spades, @value=:seven>
#<Card:0x007fc11c1a13e8 @suit=:spades, @value=:eight>
#<Card:0x007fc11c1a0fb0 @suit=:spades, @value=:nine>
#<Card:0x007fc11c1a0c68 @suit=:spades, @value=:ten>
#<Card:0x007fc11c1a09e8 @suit=:spades, @value=:jack>
#<Card:0x007fc11c1a0790 @suit=:spades, @value=:queen>
#<Card:0x007fc11c1a0470 @suit=:spades, @value=:king>
#<Card:0x007fc11c1a01a0 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fc11c139dd8 @suit=:clubs, @value=:deuce>
#<Card:0x007fc11c139a90 @suit=:clubs, @value=:three>
#<Card:0x007fc11c139568 @suit=:clubs, @value=:four>
#<Card:0x007fc11c1391d0 @suit=:clubs, @value=:five>
#<Card:0x007fc11c138f50 @suit=:clubs, @value=:six>
#<Card:0x007fc11c138cd0 @suit=:clubs, @value=:seven>
#<Card:0x007fc11c138a50 @suit=:clubs, @value=:eight>
#<Card:0x007fc11c138730 @suit=:clubs, @value=:nine>
#<Card:0x007fc11c1384d8 @suit=:clubs, @value=:ten>
#<Card:0x007fc11c138230 @suit=:clubs, @value=:jack>
#<Card:0x007fc11c138050 @suit=:clubs, @value=:queen>
#<Card:0x007fc11c19bd80 @suit=:clubs, @value=:king>
#<Card:0x007fc11c19bba0 @suit=:clubs, @value=:ace>
#<Card:0x007fc11c19b8f8 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc11c19b6a0 @suit=:diamonds, @value=:three>
#<Card:0x007fc11c19b060 @suit=:diamonds, @value=:four>
#<Card:0x007fc11c19a228 @suit=:diamonds, @value=:five>
#<Card:0x007fc11c199648 @suit=:diamonds, @value=:six>
#<Card:0x007fc11c136f70 @suit=:diamonds, @value=:seven>
#<Card:0x007fc11c134ea0 @suit=:diamonds, @value=:eight>
#<Card:0x007fc11c1205e0 @suit=:diamonds, @value=:nine>
#<Card:0x007fc11c11ba40 @suit=:diamonds, @value=:ten>
#<Card:0x007fc11c11b388 @suit=:diamonds, @value=:jack>
#<Card:0x007fc11c11aaf0 @suit=:diamonds, @value=:queen>
#<Card:0x007fc11c11a370 @suit=:diamonds, @value=:king>
#<Card:0x007fc11c119498 @suit=:diamonds, @value=:ace>
#<Card:0x007fc11c1188b8 @suit=:hearts, @value=:deuce>
#<Card:0x007fc11c118250 @suit=:hearts, @value=:three>
#<Card:0x007fc11c112968 @suit=:hearts, @value=:four>
#<Card:0x007fc11c1119c8 @suit=:hearts, @value=:five>
#<Card:0x007fc11c1101b8 @suit=:hearts, @value=:six>
#<Card:0x007fc11c102dd8 @suit=:hearts, @value=:seven>
#<Card:0x007fc11c1026f8 @suit=:hearts, @value=:eight>
#<Card:0x007fc11c101dc0 @suit=:hearts, @value=:nine>
#<Card:0x007fc11c100c90 @suit=:hearts, @value=:ten>
#<Card:0x007fc11c193e78 @suit=:hearts, @value=:jack>
#<Card:0x007fc11c193a68 @suit=:hearts, @value=:queen>
#<Card:0x007fc11c193798 @suit=:hearts, @value=:king>
#<Card:0x007fc11c1932e8 @suit=:hearts, @value=:ace>
#<Card:0x007fc11c192be0 @suit=:spades, @value=:deuce>
#<Card:0x007fc11c1927a8 @suit=:spades, @value=:three>
#<Card:0x007fc11c190cc8 @suit=:spades, @value=:four>
#<Card:0x007fc11c190840 @suit=:spades, @value=:five>
#<Card:0x007fc11c1901b0 @suit=:spades, @value=:six>
#<Card:0x007fc11c18b4f8 @suit=:spades, @value=:seven>
#<Card:0x007fc11c18ab98 @suit=:spades, @value=:eight>
#<Card:0x007fc11c18a4b8 @suit=:spades, @value=:nine>
#<Card:0x007fc11c189ef0 @suit=:spades, @value=:ten>
#<Card:0x007fc11c189950 @suit=:spades, @value=:jack>
#<Card:0x007fc11c188d48 @suit=:spades, @value=:queen>
#<Card:0x007fc11c1886e0 @suit=:spades, @value=:king>
#<Card:0x007fc11c1881b8 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fe08f012944 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fe08f012944 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fe08e4167e4 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe08e4167e4 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fc11c160898 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fc11c9b37c0 @suit=:spades, @value=:deuce>, #<Card:0x007fc11c9b3720 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fc11c9b1df8 @suit=:spades, @value=:ten>, #<Card:0x007fc11c9b1d58 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fc11c9b0430 @suit=:spades, @value=:ace>, #<Card:0x007fc11c9b0390 @suit=:spades, @value=:ten>, #<Card:0x007fc11c9b02f0 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe08e1baa7c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe08e1baa7c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc11c5b62a8 @suit=:spades, @value=:deuce>, #<Card:0x007fc11c5b6208 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc11c5b62a8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc11c5b6208 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fe08e2cbe84 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe08e2cbe84 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fc11c58e370 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fc11c58e370 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02853 seconds (files took 0.08664 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:16 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fc8f29f42b0 @suit=:clubs, @value=:deuce>
#<Card:0x007fc8f29eff80 @suit=:clubs, @value=:three>
#<Card:0x007fc8f29efc10 @suit=:clubs, @value=:four>
#<Card:0x007fc8f29ef8c8 @suit=:clubs, @value=:five>
#<Card:0x007fc8f29ef5d0 @suit=:clubs, @value=:six>
#<Card:0x007fc8f29ef210 @suit=:clubs, @value=:seven>
#<Card:0x007fc8f29eed88 @suit=:clubs, @value=:eight>
#<Card:0x007fc8f29ee860 @suit=:clubs, @value=:nine>
#<Card:0x007fc8f29ee310 @suit=:clubs, @value=:ten>
#<Card:0x007fc8f29eddc0 @suit=:clubs, @value=:jack>
#<Card:0x007fc8f29ed848 @suit=:clubs, @value=:queen>
#<Card:0x007fc8f29ed258 @suit=:clubs, @value=:king>
#<Card:0x007fc8f29ecce0 @suit=:clubs, @value=:ace>
#<Card:0x007fc8f29ec538 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc8f29ec1c8 @suit=:diamonds, @value=:three>
#<Card:0x007fc8f29e7c68 @suit=:diamonds, @value=:four>
#<Card:0x007fc8f29e7650 @suit=:diamonds, @value=:five>
#<Card:0x007fc8f29e6f98 @suit=:diamonds, @value=:six>
#<Card:0x007fc8f29e6ac0 @suit=:diamonds, @value=:seven>
#<Card:0x007fc8f29e6228 @suit=:diamonds, @value=:eight>
#<Card:0x007fc8f29e5da0 @suit=:diamonds, @value=:nine>
#<Card:0x007fc8f29e4a90 @suit=:diamonds, @value=:ten>
#<Card:0x007fc8f29e44a0 @suit=:diamonds, @value=:jack>
#<Card:0x007fc8f29dfdd8 @suit=:diamonds, @value=:queen>
#<Card:0x007fc8f29df4a0 @suit=:diamonds, @value=:king>
#<Card:0x007fc8f29df040 @suit=:diamonds, @value=:ace>
#<Card:0x007fc8f29decd0 @suit=:hearts, @value=:deuce>
#<Card:0x007fc8f29de7d0 @suit=:hearts, @value=:three>
#<Card:0x007fc8f29de190 @suit=:hearts, @value=:four>
#<Card:0x007fc8f29ddce0 @suit=:hearts, @value=:five>
#<Card:0x007fc8f29dd998 @suit=:hearts, @value=:six>
#<Card:0x007fc8f29dd5b0 @suit=:hearts, @value=:seven>
#<Card:0x007fc8f29dd240 @suit=:hearts, @value=:eight>
#<Card:0x007fc8f29dcde0 @suit=:hearts, @value=:nine>
#<Card:0x007fc8f29dc700 @suit=:hearts, @value=:ten>
#<Card:0x007fc8f29dc2f0 @suit=:hearts, @value=:jack>
#<Card:0x007fc8f29d3d08 @suit=:hearts, @value=:queen>
#<Card:0x007fc8f29d3308 @suit=:hearts, @value=:king>
#<Card:0x007fc8f29d2a48 @suit=:hearts, @value=:ace>
#<Card:0x007fc8f29d2188 @suit=:spades, @value=:deuce>
#<Card:0x007fc8f29d1878 @suit=:spades, @value=:three>
#<Card:0x007fc8f29d1238 @suit=:spades, @value=:four>
#<Card:0x007fc8f29d0c70 @suit=:spades, @value=:five>
#<Card:0x007fc8f29d0680 @suit=:spades, @value=:six>
#<Card:0x007fc8f29d02c0 @suit=:spades, @value=:seven>
#<Card:0x007fc8f29cbe28 @suit=:spades, @value=:eight>
#<Card:0x007fc8f29cad48 @suit=:spades, @value=:nine>
#<Card:0x007fc8f29ca938 @suit=:spades, @value=:ten>
#<Card:0x007fc8f29ca3e8 @suit=:spades, @value=:jack>
#<Card:0x007fc8f29ca078 @suit=:spades, @value=:queen>
#<Card:0x007fc8f29c9948 @suit=:spades, @value=:king>
#<Card:0x007fc8f29c95b0 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fc8f29c0e60 @suit=:clubs, @value=:deuce>
#<Card:0x007fc8f29c0690 @suit=:clubs, @value=:three>
#<Card:0x007fc8f29bbe38 @suit=:clubs, @value=:four>
#<Card:0x007fc8f29bbb18 @suit=:clubs, @value=:five>
#<Card:0x007fc8f29bb7d0 @suit=:clubs, @value=:six>
#<Card:0x007fc8f29bb438 @suit=:clubs, @value=:seven>
#<Card:0x007fc8f29bb078 @suit=:clubs, @value=:eight>
#<Card:0x007fc8f29bad58 @suit=:clubs, @value=:nine>
#<Card:0x007fc8f29ba970 @suit=:clubs, @value=:ten>
#<Card:0x007fc8f29ba2e0 @suit=:clubs, @value=:jack>
#<Card:0x007fc8f29b9ea8 @suit=:clubs, @value=:queen>
#<Card:0x007fc8f29b9ac0 @suit=:clubs, @value=:king>
#<Card:0x007fc8f29b9728 @suit=:clubs, @value=:ace>
#<Card:0x007fc8f29b92f0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc8f29b8f58 @suit=:diamonds, @value=:three>
#<Card:0x007fc8f29b8c10 @suit=:diamonds, @value=:four>
#<Card:0x007fc8f29b88c8 @suit=:diamonds, @value=:five>
#<Card:0x007fc8f29b85d0 @suit=:diamonds, @value=:six>
#<Card:0x007fc8f29b8260 @suit=:diamonds, @value=:seven>
#<Card:0x007fc8f29bbac8 @suit=:diamonds, @value=:eight>
#<Card:0x007fc8f29b3c10 @suit=:diamonds, @value=:nine>
#<Card:0x007fc8f29b3788 @suit=:diamonds, @value=:ten>
#<Card:0x007fc8f29b3260 @suit=:diamonds, @value=:jack>
#<Card:0x007fc8f29b2db0 @suit=:diamonds, @value=:queen>
#<Card:0x007fc8f29b2680 @suit=:diamonds, @value=:king>
#<Card:0x007fc8f29b20e0 @suit=:diamonds, @value=:ace>
#<Card:0x007fc8f29b1b40 @suit=:hearts, @value=:deuce>
#<Card:0x007fc8f29b1820 @suit=:hearts, @value=:three>
#<Card:0x007fc8f29b1668 @suit=:hearts, @value=:four>
#<Card:0x007fc8f29b1488 @suit=:hearts, @value=:five>
#<Card:0x007fc8f29b12d0 @suit=:hearts, @value=:six>
#<Card:0x007fc8f29b1000 @suit=:hearts, @value=:seven>
#<Card:0x007fc8f29b0e48 @suit=:hearts, @value=:eight>
#<Card:0x007fc8f29b0858 @suit=:hearts, @value=:nine>
#<Card:0x007fc8f29b03f8 @suit=:hearts, @value=:ten>
#<Card:0x007fc8f29ab768 @suit=:hearts, @value=:jack>
#<Card:0x007fc8f29ab0b0 @suit=:hearts, @value=:queen>
#<Card:0x007fc8f29aa4a8 @suit=:hearts, @value=:king>
#<Card:0x007fc8f29a9eb8 @suit=:hearts, @value=:ace>
#<Card:0x007fc8f29a9698 @suit=:spades, @value=:deuce>
#<Card:0x007fc8f29a8e00 @suit=:spades, @value=:three>
#<Card:0x007fc8f29a8a40 @suit=:spades, @value=:four>
#<Card:0x007fc8f29a86f8 @suit=:spades, @value=:five>
#<Card:0x007fc8f29a3d10 @suit=:spades, @value=:six>
#<Card:0x007fc8f29a3a90 @suit=:spades, @value=:seven>
#<Card:0x007fc8f29a36d0 @suit=:spades, @value=:eight>
#<Card:0x007fc8f29a33d8 @suit=:spades, @value=:nine>
#<Card:0x007fc8f29a2f00 @suit=:spades, @value=:ten>
#<Card:0x007fc8f29a2cf8 @suit=:spades, @value=:jack>
#<Card:0x007fc8f29a2ac8 @suit=:spades, @value=:queen>
#<Card:0x007fc8f29a28c0 @suit=:spades, @value=:king>
#<Card:0x007fc8f29a25c8 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fc8f293b558 @suit=:clubs, @value=:deuce>
#<Card:0x007fc8f293b210 @suit=:clubs, @value=:three>
#<Card:0x007fc8f293afb8 @suit=:clubs, @value=:four>
#<Card:0x007fc8f293ad10 @suit=:clubs, @value=:five>
#<Card:0x007fc8f293ab58 @suit=:clubs, @value=:six>
#<Card:0x007fc8f293a8d8 @suit=:clubs, @value=:seven>
#<Card:0x007fc8f293a720 @suit=:clubs, @value=:eight>
#<Card:0x007fc8f293a3d8 @suit=:clubs, @value=:nine>
#<Card:0x007fc8f2939eb0 @suit=:clubs, @value=:ten>
#<Card:0x007fc8f2939b90 @suit=:clubs, @value=:jack>
#<Card:0x007fc8f29398c0 @suit=:clubs, @value=:queen>
#<Card:0x007fc8f29393c0 @suit=:clubs, @value=:king>
#<Card:0x007fc8f2939140 @suit=:clubs, @value=:ace>
#<Card:0x007fc8f2938d80 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc8f2938ab0 @suit=:diamonds, @value=:three>
#<Card:0x007fc8f29387e0 @suit=:diamonds, @value=:four>
#<Card:0x007fc8f2938538 @suit=:diamonds, @value=:five>
#<Card:0x007fc8f29381c8 @suit=:diamonds, @value=:six>
#<Card:0x007fc8f299be80 @suit=:diamonds, @value=:seven>
#<Card:0x007fc8f299ba20 @suit=:diamonds, @value=:eight>
#<Card:0x007fc8f299b520 @suit=:diamonds, @value=:nine>
#<Card:0x007fc8f299aff8 @suit=:diamonds, @value=:ten>
#<Card:0x007fc8f299a468 @suit=:diamonds, @value=:jack>
#<Card:0x007fc8f29997e8 @suit=:diamonds, @value=:queen>
#<Card:0x007fc8f29982a8 @suit=:diamonds, @value=:king>
#<Card:0x007fc8f2936508 @suit=:diamonds, @value=:ace>
#<Card:0x007fc8f2923b88 @suit=:hearts, @value=:deuce>
#<Card:0x007fc8f2921770 @suit=:hearts, @value=:three>
#<Card:0x007fc8f291b960 @suit=:hearts, @value=:four>
#<Card:0x007fc8f291b000 @suit=:hearts, @value=:five>
#<Card:0x007fc8f291a768 @suit=:hearts, @value=:six>
#<Card:0x007fc8f2919c28 @suit=:hearts, @value=:seven>
#<Card:0x007fc8f2919160 @suit=:hearts, @value=:eight>
#<Card:0x007fc8f2918670 @suit=:hearts, @value=:nine>
#<Card:0x007fc8f2913e90 @suit=:hearts, @value=:ten>
#<Card:0x007fc8f29129a0 @suit=:hearts, @value=:jack>
#<Card:0x007fc8f2912158 @suit=:hearts, @value=:queen>
#<Card:0x007fc8f2910880 @suit=:hearts, @value=:king>
#<Card:0x007fc8f29031a8 @suit=:hearts, @value=:ace>
#<Card:0x007fc8f29029b0 @suit=:spades, @value=:deuce>
#<Card:0x007fc8f29020c8 @suit=:spades, @value=:three>
#<Card:0x007fc8f29011c8 @suit=:spades, @value=:four>
#<Card:0x007fc8f2993c80 @suit=:spades, @value=:five>
#<Card:0x007fc8f29937f8 @suit=:spades, @value=:six>
#<Card:0x007fc8f2993348 @suit=:spades, @value=:seven>
#<Card:0x007fc8f2992cb8 @suit=:spades, @value=:eight>
#<Card:0x007fc8f2992858 @suit=:spades, @value=:nine>
#<Card:0x007fc8f2990d28 @suit=:spades, @value=:ten>
#<Card:0x007fc8f2990760 @suit=:spades, @value=:jack>
#<Card:0x007fc8f29902d8 @suit=:spades, @value=:queen>
#<Card:0x007fc8f298bc60 @suit=:spades, @value=:king>
#<Card:0x007fc8f298a838 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fe47953e13c @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fe47953e13c @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fe47953314c @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe47953314c @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fc8f29692c8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fc8f282e8b8 @suit=:spades, @value=:deuce>, #<Card:0x007fc8f282e598 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fc8f2826938 @suit=:spades, @value=:ten>, #<Card:0x007fc8f2826758 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fc8f3267398 @suit=:spades, @value=:ace>, #<Card:0x007fc8f32672f8 @suit=:spades, @value=:ten>, #<Card:0x007fc8f3267258 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe47994ac58 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe47994ac58 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc8f34e5200 @suit=:spades, @value=:deuce>, #<Card:0x007fc8f34e5110 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc8f34e5200 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc8f34e5110 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fe479a63360 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe479a63360 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fc8f34bcfa8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fc8f34bcfa8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03066 seconds (files took 0.0849 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:16 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007f97699f4e50 @suit=:clubs, @value=:deuce>
#<Card:0x007f97699f4658 @suit=:clubs, @value=:three>
#<Card:0x007f97699f4338 @suit=:clubs, @value=:four>
#<Card:0x007f97699f4040 @suit=:clubs, @value=:five>
#<Card:0x007f97699efd60 @suit=:clubs, @value=:six>
#<Card:0x007f97699efa40 @suit=:clubs, @value=:seven>
#<Card:0x007f97699ef6f8 @suit=:clubs, @value=:eight>
#<Card:0x007f97699ef220 @suit=:clubs, @value=:nine>
#<Card:0x007f97699eeca8 @suit=:clubs, @value=:ten>
#<Card:0x007f97699ee938 @suit=:clubs, @value=:jack>
#<Card:0x007f97699ee488 @suit=:clubs, @value=:queen>
#<Card:0x007f97699edfd8 @suit=:clubs, @value=:king>
#<Card:0x007f97699eda88 @suit=:clubs, @value=:ace>
#<Card:0x007f97699ed3a8 @suit=:diamonds, @value=:deuce>
#<Card:0x007f97699ecd90 @suit=:diamonds, @value=:three>
#<Card:0x007f97699ec7f0 @suit=:diamonds, @value=:four>
#<Card:0x007f97699ec340 @suit=:diamonds, @value=:five>
#<Card:0x007f97699e79f8 @suit=:diamonds, @value=:six>
#<Card:0x007f97699e7368 @suit=:diamonds, @value=:seven>
#<Card:0x007f97699e6c38 @suit=:diamonds, @value=:eight>
#<Card:0x007f97699e6350 @suit=:diamonds, @value=:nine>
#<Card:0x007f97699e5a40 @suit=:diamonds, @value=:ten>
#<Card:0x007f97699e4370 @suit=:diamonds, @value=:jack>
#<Card:0x007f97699dfbe0 @suit=:diamonds, @value=:queen>
#<Card:0x007f97699df8e8 @suit=:diamonds, @value=:king>
#<Card:0x007f97699df410 @suit=:diamonds, @value=:ace>
#<Card:0x007f97699df078 @suit=:hearts, @value=:deuce>
#<Card:0x007f97699ded08 @suit=:hearts, @value=:three>
#<Card:0x007f97699de998 @suit=:hearts, @value=:four>
#<Card:0x007f97699de4c0 @suit=:hearts, @value=:five>
#<Card:0x007f97699de178 @suit=:hearts, @value=:six>
#<Card:0x007f97699ddd68 @suit=:hearts, @value=:seven>
#<Card:0x007f97699ddb38 @suit=:hearts, @value=:eight>
#<Card:0x007f97699dd6d8 @suit=:hearts, @value=:nine>
#<Card:0x007f97699dd458 @suit=:hearts, @value=:ten>
#<Card:0x007f97699dd020 @suit=:hearts, @value=:jack>
#<Card:0x007f97699dc8a0 @suit=:hearts, @value=:queen>
#<Card:0x007f97699dc4b8 @suit=:hearts, @value=:king>
#<Card:0x007f97699dc030 @suit=:hearts, @value=:ace>
#<Card:0x007f97699d3a48 @suit=:spades, @value=:deuce>
#<Card:0x007f97699d3110 @suit=:spades, @value=:three>
#<Card:0x007f97699d2710 @suit=:spades, @value=:four>
#<Card:0x007f97699d1fe0 @suit=:spades, @value=:five>
#<Card:0x007f97699d19a0 @suit=:spades, @value=:six>
#<Card:0x007f97699d1068 @suit=:spades, @value=:seven>
#<Card:0x007f97699d0be0 @suit=:spades, @value=:eight>
#<Card:0x007f97699d0640 @suit=:spades, @value=:nine>
#<Card:0x007f97699d0230 @suit=:spades, @value=:ten>
#<Card:0x007f97699cb7f8 @suit=:spades, @value=:jack>
#<Card:0x007f97699caf38 @suit=:spades, @value=:queen>
#<Card:0x007f97699caab0 @suit=:spades, @value=:king>
#<Card:0x007f97699ca3a8 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007f97699c2888 @suit=:clubs, @value=:deuce>
#<Card:0x007f97699c1fa0 @suit=:clubs, @value=:three>
#<Card:0x007f97699c1460 @suit=:clubs, @value=:four>
#<Card:0x007f97699c0c40 @suit=:clubs, @value=:five>
#<Card:0x007f97699c0358 @suit=:clubs, @value=:six>
#<Card:0x007f97699bbd80 @suit=:clubs, @value=:seven>
#<Card:0x007f97699bba60 @suit=:clubs, @value=:eight>
#<Card:0x007f97699bb740 @suit=:clubs, @value=:nine>
#<Card:0x007f97699bb380 @suit=:clubs, @value=:ten>
#<Card:0x007f97699bb0d8 @suit=:clubs, @value=:jack>
#<Card:0x007f97699bac50 @suit=:clubs, @value=:queen>
#<Card:0x007f97699ba7c8 @suit=:clubs, @value=:king>
#<Card:0x007f97699ba318 @suit=:clubs, @value=:ace>
#<Card:0x007f97699b9f08 @suit=:diamonds, @value=:deuce>
#<Card:0x007f97699b9b70 @suit=:diamonds, @value=:three>
#<Card:0x007f97699b9828 @suit=:diamonds, @value=:four>
#<Card:0x007f97699b9468 @suit=:diamonds, @value=:five>
#<Card:0x007f97699b90f8 @suit=:diamonds, @value=:six>
#<Card:0x007f97699b8cc0 @suit=:diamonds, @value=:seven>
#<Card:0x007f97699b8928 @suit=:diamonds, @value=:eight>
#<Card:0x007f97699b8428 @suit=:diamonds, @value=:nine>
#<Card:0x007f97699b3f40 @suit=:diamonds, @value=:ten>
#<Card:0x007f97699b3c98 @suit=:diamonds, @value=:jack>
#<Card:0x007f97699b39a0 @suit=:diamonds, @value=:queen>
#<Card:0x007f97699b3748 @suit=:diamonds, @value=:king>
#<Card:0x007f97699b34c8 @suit=:diamonds, @value=:ace>
#<Card:0x007f97699b30e0 @suit=:hearts, @value=:deuce>
#<Card:0x007f97699b2e60 @suit=:hearts, @value=:three>
#<Card:0x007f97699b2b40 @suit=:hearts, @value=:four>
#<Card:0x007f97699b2618 @suit=:hearts, @value=:five>
#<Card:0x007f97699b2348 @suit=:hearts, @value=:six>
#<Card:0x007f97699b2000 @suit=:hearts, @value=:seven>
#<Card:0x007f97699b1c90 @suit=:hearts, @value=:eight>
#<Card:0x007f97699b19e8 @suit=:hearts, @value=:nine>
#<Card:0x007f97699b1830 @suit=:hearts, @value=:ten>
#<Card:0x007f97699b1678 @suit=:hearts, @value=:jack>
#<Card:0x007f97699b14c0 @suit=:hearts, @value=:queen>
#<Card:0x007f97699b12e0 @suit=:hearts, @value=:king>
#<Card:0x007f97699b1010 @suit=:hearts, @value=:ace>
#<Card:0x007f97699b0e30 @suit=:spades, @value=:deuce>
#<Card:0x007f97699b0980 @suit=:spades, @value=:three>
#<Card:0x007f97699b0048 @suit=:spades, @value=:four>
#<Card:0x007f97699aba98 @suit=:spades, @value=:five>
#<Card:0x007f97699ab0c0 @suit=:spades, @value=:six>
#<Card:0x007f97699aaa30 @suit=:spades, @value=:seven>
#<Card:0x007f97699aa5a8 @suit=:spades, @value=:eight>
#<Card:0x007f97699aa148 @suit=:spades, @value=:nine>
#<Card:0x007f97699a9c48 @suit=:spades, @value=:ten>
#<Card:0x007f97699a92e8 @suit=:spades, @value=:jack>
#<Card:0x007f97699a8e88 @suit=:spades, @value=:queen>
#<Card:0x007f97699a8a50 @suit=:spades, @value=:king>
#<Card:0x007f97699a3c08 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007f976993b798 @suit=:clubs, @value=:deuce>
#<Card:0x007f976993b4f0 @suit=:clubs, @value=:three>
#<Card:0x007f976993b180 @suit=:clubs, @value=:four>
#<Card:0x007f976993af00 @suit=:clubs, @value=:five>
#<Card:0x007f976993acd0 @suit=:clubs, @value=:six>
#<Card:0x007f976993aa50 @suit=:clubs, @value=:seven>
#<Card:0x007f976993a690 @suit=:clubs, @value=:eight>
#<Card:0x007f976993a410 @suit=:clubs, @value=:nine>
#<Card:0x007f976993a028 @suit=:clubs, @value=:ten>
#<Card:0x007f9769939e20 @suit=:clubs, @value=:jack>
#<Card:0x007f9769939b28 @suit=:clubs, @value=:queen>
#<Card:0x007f97699394e8 @suit=:clubs, @value=:king>
#<Card:0x007f9769939240 @suit=:clubs, @value=:ace>
#<Card:0x007f9769938e80 @suit=:diamonds, @value=:deuce>
#<Card:0x007f9769938c00 @suit=:diamonds, @value=:three>
#<Card:0x007f97699387c8 @suit=:diamonds, @value=:four>
#<Card:0x007f9769938430 @suit=:diamonds, @value=:five>
#<Card:0x007f9769938200 @suit=:diamonds, @value=:six>
#<Card:0x007f976999bb98 @suit=:diamonds, @value=:seven>
#<Card:0x007f9769999550 @suit=:diamonds, @value=:eight>
#<Card:0x007f9769937d28 @suit=:diamonds, @value=:nine>
#<Card:0x007f9769936248 @suit=:diamonds, @value=:ten>
#<Card:0x007f9769934560 @suit=:diamonds, @value=:jack>
#<Card:0x007f976991bd08 @suit=:diamonds, @value=:queen>
#<Card:0x007f976991b1c8 @suit=:diamonds, @value=:king>
#<Card:0x007f976991a9f8 @suit=:diamonds, @value=:ace>
#<Card:0x007f976991a070 @suit=:hearts, @value=:deuce>
#<Card:0x007f97699193f0 @suit=:hearts, @value=:three>
#<Card:0x007f9769918860 @suit=:hearts, @value=:four>
#<Card:0x007f9769918068 @suit=:hearts, @value=:five>
#<Card:0x007f97699136a8 @suit=:hearts, @value=:six>
#<Card:0x007f9769911628 @suit=:hearts, @value=:seven>
#<Card:0x007f9769903c08 @suit=:hearts, @value=:eight>
#<Card:0x007f9769902cb8 @suit=:hearts, @value=:nine>
#<Card:0x007f97699021f0 @suit=:hearts, @value=:ten>
#<Card:0x007f9769900e18 @suit=:hearts, @value=:jack>
#<Card:0x007f9769993a10 @suit=:hearts, @value=:queen>
#<Card:0x007f9769993510 @suit=:hearts, @value=:king>
#<Card:0x007f9769993010 @suit=:hearts, @value=:ace>
#<Card:0x007f9769992818 @suit=:spades, @value=:deuce>
#<Card:0x007f976998bb08 @suit=:spades, @value=:three>
#<Card:0x007f976998b400 @suit=:spades, @value=:four>
#<Card:0x007f976998ade8 @suit=:spades, @value=:five>
#<Card:0x007f976998a398 @suit=:spades, @value=:six>
#<Card:0x007f97699898a8 @suit=:spades, @value=:seven>
#<Card:0x007f9769989060 @suit=:spades, @value=:eight>
#<Card:0x007f97699889a8 @suit=:spades, @value=:nine>
#<Card:0x007f9769983ef8 @suit=:spades, @value=:ten>
#<Card:0x007f97699838b8 @suit=:spades, @value=:jack>
#<Card:0x007f9769982e68 @suit=:spades, @value=:queen>
#<Card:0x007f9769980c58 @suit=:spades, @value=:king>
#<Card:0x007f97699804b0 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fcbb5c15c6c @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fcbb5c15c6c @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fcbb4d2ff04 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fcbb4d2ff04 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007f9769963310 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007f976982dae0 @suit=:spades, @value=:deuce>, #<Card:0x007f976982d9f0 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007f9769826678 @suit=:spades, @value=:ten>, #<Card:0x007f9769826538 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007f976a1df368 @suit=:spades, @value=:ace>, #<Card:0x007f976a1df2c8 @suit=:spades, @value=:ten>, #<Card:0x007f976a1df228 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fcbb510ac28 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fcbb510ac28 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f976a465178 @suit=:spades, @value=:deuce>, #<Card:0x007f976a464fe8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f976a465178 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f976a464fe8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fcbb52234c0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fcbb52234c0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f976a43ce58 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f976a43ce58 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02793 seconds (files took 0.08231 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:17 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fe25603c1a0 @suit=:clubs, @value=:deuce>
#<Card:0x007fe256037ec0 @suit=:clubs, @value=:three>
#<Card:0x007fe256037b00 @suit=:clubs, @value=:four>
#<Card:0x007fe2560378f8 @suit=:clubs, @value=:five>
#<Card:0x007fe2560373d0 @suit=:clubs, @value=:six>
#<Card:0x007fe256036e58 @suit=:clubs, @value=:seven>
#<Card:0x007fe256036a48 @suit=:clubs, @value=:eight>
#<Card:0x007fe256036480 @suit=:clubs, @value=:nine>
#<Card:0x007fe256035fa8 @suit=:clubs, @value=:ten>
#<Card:0x007fe256035a08 @suit=:clubs, @value=:jack>
#<Card:0x007fe256035580 @suit=:clubs, @value=:queen>
#<Card:0x007fe256034ec8 @suit=:clubs, @value=:king>
#<Card:0x007fe256034b30 @suit=:clubs, @value=:ace>
#<Card:0x007fe2560343d8 @suit=:diamonds, @value=:deuce>
#<Card:0x007fe25602ff40 @suit=:diamonds, @value=:three>
#<Card:0x007fe25602fa18 @suit=:diamonds, @value=:four>
#<Card:0x007fe25602f3d8 @suit=:diamonds, @value=:five>
#<Card:0x007fe25602ecf8 @suit=:diamonds, @value=:six>
#<Card:0x007fe25602e758 @suit=:diamonds, @value=:seven>
#<Card:0x007fe25602da38 @suit=:diamonds, @value=:eight>
#<Card:0x007fe25602d448 @suit=:diamonds, @value=:nine>
#<Card:0x007fe25602cc78 @suit=:diamonds, @value=:ten>
#<Card:0x007fe25602c480 @suit=:diamonds, @value=:jack>
#<Card:0x007fe256027f20 @suit=:diamonds, @value=:queen>
#<Card:0x007fe256027700 @suit=:diamonds, @value=:king>
#<Card:0x007fe2560271d8 @suit=:diamonds, @value=:ace>
#<Card:0x007fe256026cd8 @suit=:hearts, @value=:deuce>
#<Card:0x007fe256026530 @suit=:hearts, @value=:three>
#<Card:0x007fe256026080 @suit=:hearts, @value=:four>
#<Card:0x007fe256025b80 @suit=:hearts, @value=:five>
#<Card:0x007fe256025798 @suit=:hearts, @value=:six>
#<Card:0x007fe2560251d0 @suit=:hearts, @value=:seven>
#<Card:0x007fe256024d20 @suit=:hearts, @value=:eight>
#<Card:0x007fe2560245f0 @suit=:hearts, @value=:nine>
#<Card:0x007fe256013ef8 @suit=:hearts, @value=:ten>
#<Card:0x007fe256013700 @suit=:hearts, @value=:jack>
#<Card:0x007fe256012b20 @suit=:hearts, @value=:queen>
#<Card:0x007fe2560126c0 @suit=:hearts, @value=:king>
#<Card:0x007fe256011ea0 @suit=:hearts, @value=:ace>
#<Card:0x007fe256011720 @suit=:spades, @value=:deuce>
#<Card:0x007fe256010f78 @suit=:spades, @value=:three>
#<Card:0x007fe256010a00 @suit=:spades, @value=:four>
#<Card:0x007fe2560104b0 @suit=:spades, @value=:five>
#<Card:0x007fe256007f90 @suit=:spades, @value=:six>
#<Card:0x007fe256007400 @suit=:spades, @value=:seven>
#<Card:0x007fe256006c30 @suit=:spades, @value=:eight>
#<Card:0x007fe2560066b8 @suit=:spades, @value=:nine>
#<Card:0x007fe256006190 @suit=:spades, @value=:ten>
#<Card:0x007fe256005a10 @suit=:spades, @value=:jack>
#<Card:0x007fe2560055b0 @suit=:spades, @value=:queen>
#<Card:0x007fe2560051a0 @suit=:spades, @value=:king>
#<Card:0x007fe2560048e0 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fe2558d7c70 @suit=:clubs, @value=:deuce>
#<Card:0x007fe2558d7928 @suit=:clubs, @value=:three>
#<Card:0x007fe2558d76f8 @suit=:clubs, @value=:four>
#<Card:0x007fe2558d7310 @suit=:clubs, @value=:five>
#<Card:0x007fe2558d6f50 @suit=:clubs, @value=:six>
#<Card:0x007fe2558d6c80 @suit=:clubs, @value=:seven>
#<Card:0x007fe2558d67d0 @suit=:clubs, @value=:eight>
#<Card:0x007fe2558d61e0 @suit=:clubs, @value=:nine>
#<Card:0x007fe2558d5e20 @suit=:clubs, @value=:ten>
#<Card:0x007fe2558d5970 @suit=:clubs, @value=:jack>
#<Card:0x007fe2558d55d8 @suit=:clubs, @value=:queen>
#<Card:0x007fe2558d5218 @suit=:clubs, @value=:king>
#<Card:0x007fe2558d4de0 @suit=:clubs, @value=:ace>
#<Card:0x007fe2558d4a48 @suit=:diamonds, @value=:deuce>
#<Card:0x007fe2558d4700 @suit=:diamonds, @value=:three>
#<Card:0x007fe2558d4318 @suit=:diamonds, @value=:four>
#<Card:0x007fe2558d5498 @suit=:diamonds, @value=:five>
#<Card:0x007fe2558cfca0 @suit=:diamonds, @value=:six>
#<Card:0x007fe2558cf7f0 @suit=:diamonds, @value=:seven>
#<Card:0x007fe2558cf340 @suit=:diamonds, @value=:eight>
#<Card:0x007fe2558cee40 @suit=:diamonds, @value=:nine>
#<Card:0x007fe2558ce6e8 @suit=:diamonds, @value=:ten>
#<Card:0x007fe2558ce1c0 @suit=:diamonds, @value=:jack>
#<Card:0x007fe2558cdd10 @suit=:diamonds, @value=:queen>
#<Card:0x007fe2558cd8d8 @suit=:diamonds, @value=:king>
#<Card:0x007fe2558cd720 @suit=:diamonds, @value=:ace>
#<Card:0x007fe2558cd540 @suit=:hearts, @value=:deuce>
#<Card:0x007fe2558cd310 @suit=:hearts, @value=:three>
#<Card:0x007fe2558ccff0 @suit=:hearts, @value=:four>
#<Card:0x007fe2558cccf8 @suit=:hearts, @value=:five>
#<Card:0x007fe2558cc550 @suit=:hearts, @value=:six>
#<Card:0x007fe2558c7eb0 @suit=:hearts, @value=:seven>
#<Card:0x007fe2558c74b0 @suit=:hearts, @value=:eight>
#<Card:0x007fe2558c6e98 @suit=:hearts, @value=:nine>
#<Card:0x007fe2558c6538 @suit=:hearts, @value=:ten>
#<Card:0x007fe2558c6218 @suit=:hearts, @value=:jack>
#<Card:0x007fe2558c5e58 @suit=:hearts, @value=:queen>
#<Card:0x007fe2558c58e0 @suit=:hearts, @value=:king>
#<Card:0x007fe2558c5070 @suit=:hearts, @value=:ace>
#<Card:0x007fe2558c4d50 @suit=:spades, @value=:deuce>
#<Card:0x007fe2558c4ad0 @suit=:spades, @value=:three>
#<Card:0x007fe2558c4698 @suit=:spades, @value=:four>
#<Card:0x007fe2558bfa80 @suit=:spades, @value=:five>
#<Card:0x007fe2558bf6e8 @suit=:spades, @value=:six>
#<Card:0x007fe2558bf490 @suit=:spades, @value=:seven>
#<Card:0x007fe2558befb8 @suit=:spades, @value=:eight>
#<Card:0x007fe2558bed38 @suit=:spades, @value=:nine>
#<Card:0x007fe2558beae0 @suit=:spades, @value=:ten>
#<Card:0x007fe2558be928 @suit=:spades, @value=:jack>
#<Card:0x007fe2558be5b8 @suit=:spades, @value=:queen>
#<Card:0x007fe2558be360 @suit=:spades, @value=:king>
#<Card:0x007fe2558be0b8 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fe2558b71a0 @suit=:clubs, @value=:deuce>
#<Card:0x007fe2558b6f98 @suit=:clubs, @value=:three>
#<Card:0x007fe2558b6d68 @suit=:clubs, @value=:four>
#<Card:0x007fe2558b6ac0 @suit=:clubs, @value=:five>
#<Card:0x007fe2558b67c8 @suit=:clubs, @value=:six>
#<Card:0x007fe2558b6570 @suit=:clubs, @value=:seven>
#<Card:0x007fe2558b60c0 @suit=:clubs, @value=:eight>
#<Card:0x007fe2558b5e40 @suit=:clubs, @value=:nine>
#<Card:0x007fe2558b5b48 @suit=:clubs, @value=:ten>
#<Card:0x007fe2558b58c8 @suit=:clubs, @value=:jack>
#<Card:0x007fe2558b5440 @suit=:clubs, @value=:queen>
#<Card:0x007fe2558b5030 @suit=:clubs, @value=:king>
#<Card:0x007fe2558b4d88 @suit=:clubs, @value=:ace>
#<Card:0x007fe2558b4a68 @suit=:diamonds, @value=:deuce>
#<Card:0x007fe2558b46a8 @suit=:diamonds, @value=:three>
#<Card:0x007fe2558b4360 @suit=:diamonds, @value=:four>
#<Card:0x007fe2558b40e0 @suit=:diamonds, @value=:five>
#<Card:0x007fe2558afd88 @suit=:diamonds, @value=:six>
#<Card:0x007fe2558afb30 @suit=:diamonds, @value=:seven>
#<Card:0x007fe2558af888 @suit=:diamonds, @value=:eight>
#<Card:0x007fe2558af590 @suit=:diamonds, @value=:nine>
#<Card:0x007fe2558af090 @suit=:diamonds, @value=:ten>
#<Card:0x007fe2558ae4b0 @suit=:diamonds, @value=:jack>
#<Card:0x007fe2558ad880 @suit=:diamonds, @value=:queen>
#<Card:0x007fe2558a7c78 @suit=:diamonds, @value=:king>
#<Card:0x007fe2558a51a8 @suit=:diamonds, @value=:ace>
#<Card:0x007fe25582ea08 @suit=:hearts, @value=:deuce>
#<Card:0x007fe25582c078 @suit=:hearts, @value=:three>
#<Card:0x007fe255827708 @suit=:hearts, @value=:four>
#<Card:0x007fe255826e70 @suit=:hearts, @value=:five>
#<Card:0x007fe255825f20 @suit=:hearts, @value=:six>
#<Card:0x007fe2558250c0 @suit=:hearts, @value=:seven>
#<Card:0x007fe2558245d0 @suit=:hearts, @value=:eight>
#<Card:0x007fe25581fb48 @suit=:hearts, @value=:nine>
#<Card:0x007fe25581e590 @suit=:hearts, @value=:ten>
#<Card:0x007fe25581cb78 @suit=:hearts, @value=:jack>
#<Card:0x007fe25580fb08 @suit=:hearts, @value=:queen>
#<Card:0x007fe25580ecd0 @suit=:hearts, @value=:king>
#<Card:0x007fe25580e708 @suit=:hearts, @value=:ace>
#<Card:0x007fe25580dec0 @suit=:spades, @value=:deuce>
#<Card:0x007fe25580d678 @suit=:spades, @value=:three>
#<Card:0x007fe25580c980 @suit=:spades, @value=:four>
#<Card:0x007fe25589fd20 @suit=:spades, @value=:five>
#<Card:0x007fe25589f9b0 @suit=:spades, @value=:six>
#<Card:0x007fe25589f618 @suit=:spades, @value=:seven>
#<Card:0x007fe25589f140 @suit=:spades, @value=:eight>
#<Card:0x007fe25589ea38 @suit=:spades, @value=:nine>
#<Card:0x007fe25589e420 @suit=:spades, @value=:ten>
#<Card:0x007fe25589c940 @suit=:spades, @value=:jack>
#<Card:0x007fe25589c2b0 @suit=:spades, @value=:queen>
#<Card:0x007fe255896ef0 @suit=:spades, @value=:king>
#<Card:0x007fe255896658 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ff12ac7fc94 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ff12ac7fc94 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ff12ac76aa4 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff12ac76aa4 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fe255874e68 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fe25502d5c0 @suit=:spades, @value=:deuce>, #<Card:0x007fe25502d4f8 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fe255025d98 @suit=:spades, @value=:ten>, #<Card:0x007fe255025c30 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fe256a22fe8 @suit=:spades, @value=:ace>, #<Card:0x007fe256a22f48 @suit=:spades, @value=:ten>, #<Card:0x007fe256a22ea8 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff12b528a94 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff12b528a94 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe255af4d78 @suit=:spades, @value=:deuce>, #<Card:0x007fe255af4cd8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe255af4d78 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe255af4cd8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ff12ad6b20c @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff12ad6b20c @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fe255accbe8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fe255accbe8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03243 seconds (files took 0.0862 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:20 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fef1f1f44b8 @suit=:clubs, @value=:deuce>
#<Card:0x007fef1f1f4120 @suit=:clubs, @value=:three>
#<Card:0x007fef1f1efe40 @suit=:clubs, @value=:four>
#<Card:0x007fef1f1efa58 @suit=:clubs, @value=:five>
#<Card:0x007fef1f1ef828 @suit=:clubs, @value=:six>
#<Card:0x007fef1f1ef3c8 @suit=:clubs, @value=:seven>
#<Card:0x007fef1f1eef68 @suit=:clubs, @value=:eight>
#<Card:0x007fef1f1eeb30 @suit=:clubs, @value=:nine>
#<Card:0x007fef1f1ee608 @suit=:clubs, @value=:ten>
#<Card:0x007fef1f1edf00 @suit=:clubs, @value=:jack>
#<Card:0x007fef1f1ed988 @suit=:clubs, @value=:queen>
#<Card:0x007fef1f1ed3e8 @suit=:clubs, @value=:king>
#<Card:0x007fef1f1ecf10 @suit=:clubs, @value=:ace>
#<Card:0x007fef1f1ec790 @suit=:diamonds, @value=:deuce>
#<Card:0x007fef1f1ec3f8 @suit=:diamonds, @value=:three>
#<Card:0x007fef1f1e7e98 @suit=:diamonds, @value=:four>
#<Card:0x007fef1f1e78d0 @suit=:diamonds, @value=:five>
#<Card:0x007fef1f1e72b8 @suit=:diamonds, @value=:six>
#<Card:0x007fef1f1e6c00 @suit=:diamonds, @value=:seven>
#<Card:0x007fef1f1e63b8 @suit=:diamonds, @value=:eight>
#<Card:0x007fef1f1e5eb8 @suit=:diamonds, @value=:nine>
#<Card:0x007fef1f1e5030 @suit=:diamonds, @value=:ten>
#<Card:0x007fef1f1e46a8 @suit=:diamonds, @value=:jack>
#<Card:0x007fef1f1e41a8 @suit=:diamonds, @value=:queen>
#<Card:0x007fef1f1df860 @suit=:diamonds, @value=:king>
#<Card:0x007fef1f1df428 @suit=:diamonds, @value=:ace>
#<Card:0x007fef1f1deed8 @suit=:hearts, @value=:deuce>
#<Card:0x007fef1f1dec08 @suit=:hearts, @value=:three>
#<Card:0x007fef1f1de578 @suit=:hearts, @value=:four>
#<Card:0x007fef1f1de0c8 @suit=:hearts, @value=:five>
#<Card:0x007fef1f1ddc68 @suit=:hearts, @value=:six>
#<Card:0x007fef1f1dd9c0 @suit=:hearts, @value=:seven>
#<Card:0x007fef1f1dd560 @suit=:hearts, @value=:eight>
#<Card:0x007fef1f1dd0d8 @suit=:hearts, @value=:nine>
#<Card:0x007fef1f1dcde0 @suit=:hearts, @value=:ten>
#<Card:0x007fef1f1dc688 @suit=:hearts, @value=:jack>
#<Card:0x007fef1f1dc200 @suit=:hearts, @value=:queen>
#<Card:0x007fef1f1d3d58 @suit=:hearts, @value=:king>
#<Card:0x007fef1f1d34e8 @suit=:hearts, @value=:ace>
#<Card:0x007fef1f1d2bd8 @suit=:spades, @value=:deuce>
#<Card:0x007fef1f1d2278 @suit=:spades, @value=:three>
#<Card:0x007fef1f1d1b98 @suit=:spades, @value=:four>
#<Card:0x007fef1f1d13c8 @suit=:spades, @value=:five>
#<Card:0x007fef1f1d0cc0 @suit=:spades, @value=:six>
#<Card:0x007fef1f1d0720 @suit=:spades, @value=:seven>
#<Card:0x007fef1f1d0310 @suit=:spades, @value=:eight>
#<Card:0x007fef1f1cb6d0 @suit=:spades, @value=:nine>
#<Card:0x007fef1f1cae10 @suit=:spades, @value=:ten>
#<Card:0x007fef1f1caa00 @suit=:spades, @value=:jack>
#<Card:0x007fef1f1ca488 @suit=:spades, @value=:queen>
#<Card:0x007fef1f1ca0a0 @suit=:spades, @value=:king>
#<Card:0x007fef1f1c9948 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fef1f1c15b8 @suit=:clubs, @value=:deuce>
#<Card:0x007fef1f1c0d98 @suit=:clubs, @value=:three>
#<Card:0x007fef1f1c05a0 @suit=:clubs, @value=:four>
#<Card:0x007fef1f1bbe88 @suit=:clubs, @value=:five>
#<Card:0x007fef1f1bbb18 @suit=:clubs, @value=:six>
#<Card:0x007fef1f1bb820 @suit=:clubs, @value=:seven>
#<Card:0x007fef1f1bb438 @suit=:clubs, @value=:eight>
#<Card:0x007fef1f1bb168 @suit=:clubs, @value=:nine>
#<Card:0x007fef1f1bada8 @suit=:clubs, @value=:ten>
#<Card:0x007fef1f1ba880 @suit=:clubs, @value=:jack>
#<Card:0x007fef1f1ba308 @suit=:clubs, @value=:queen>
#<Card:0x007fef1f1b9ed0 @suit=:clubs, @value=:king>
#<Card:0x007fef1f1b9ae8 @suit=:clubs, @value=:ace>
#<Card:0x007fef1f1b9750 @suit=:diamonds, @value=:deuce>
#<Card:0x007fef1f1b93b8 @suit=:diamonds, @value=:three>
#<Card:0x007fef1f1b8fa8 @suit=:diamonds, @value=:four>
#<Card:0x007fef1f1b8c60 @suit=:diamonds, @value=:five>
#<Card:0x007fef1f1b8990 @suit=:diamonds, @value=:six>
#<Card:0x007fef1f1b8648 @suit=:diamonds, @value=:seven>
#<Card:0x007fef1f1b82b0 @suit=:diamonds, @value=:eight>
#<Card:0x007fef1f1bb848 @suit=:diamonds, @value=:nine>
#<Card:0x007fef1f1b3c10 @suit=:diamonds, @value=:ten>
#<Card:0x007fef1f1b37d8 @suit=:diamonds, @value=:jack>
#<Card:0x007fef1f1b32b0 @suit=:diamonds, @value=:queen>
#<Card:0x007fef1f1b2db0 @suit=:diamonds, @value=:king>
#<Card:0x007fef1f1b25e0 @suit=:diamonds, @value=:ace>
#<Card:0x007fef1f1b2018 @suit=:hearts, @value=:deuce>
#<Card:0x007fef1f1b1c58 @suit=:hearts, @value=:three>
#<Card:0x007fef1f1b1870 @suit=:hearts, @value=:four>
#<Card:0x007fef1f1b16b8 @suit=:hearts, @value=:five>
#<Card:0x007fef1f1b1500 @suit=:hearts, @value=:six>
#<Card:0x007fef1f1b1320 @suit=:hearts, @value=:seven>
#<Card:0x007fef1f1b1050 @suit=:hearts, @value=:eight>
#<Card:0x007fef1f1b0e98 @suit=:hearts, @value=:nine>
#<Card:0x007fef1f1b0880 @suit=:hearts, @value=:ten>
#<Card:0x007fef1f1b0038 @suit=:hearts, @value=:jack>
#<Card:0x007fef1f1ab4e8 @suit=:hearts, @value=:queen>
#<Card:0x007fef1f1aacc8 @suit=:hearts, @value=:king>
#<Card:0x007fef1f1aa2c8 @suit=:hearts, @value=:ace>
#<Card:0x007fef1f1a9bc0 @suit=:spades, @value=:deuce>
#<Card:0x007fef1f1a9558 @suit=:spades, @value=:three>
#<Card:0x007fef1f1a8dd8 @suit=:spades, @value=:four>
#<Card:0x007fef1f1a8a18 @suit=:spades, @value=:five>
#<Card:0x007fef1f1a8338 @suit=:spades, @value=:six>
#<Card:0x007fef1f1a3810 @suit=:spades, @value=:seven>
#<Card:0x007fef1f1a2f28 @suit=:spades, @value=:eight>
#<Card:0x007fef1f1a2848 @suit=:spades, @value=:nine>
#<Card:0x007fef1f1a1da8 @suit=:spades, @value=:ten>
#<Card:0x007fef1f1a1268 @suit=:spades, @value=:jack>
#<Card:0x007fef1f1a0a98 @suit=:spades, @value=:queen>
#<Card:0x007fef1f1a02c8 @suit=:spades, @value=:king>
#<Card:0x007fef1f1a00e8 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fef1f139438 @suit=:clubs, @value=:deuce>
#<Card:0x007fef1f1390a0 @suit=:clubs, @value=:three>
#<Card:0x007fef1f138dd0 @suit=:clubs, @value=:four>
#<Card:0x007fef1f138ba0 @suit=:clubs, @value=:five>
#<Card:0x007fef1f138858 @suit=:clubs, @value=:six>
#<Card:0x007fef1f138470 @suit=:clubs, @value=:seven>
#<Card:0x007fef1f138240 @suit=:clubs, @value=:eight>
#<Card:0x007fef1f19bca0 @suit=:clubs, @value=:nine>
#<Card:0x007fef1f19b840 @suit=:clubs, @value=:ten>
#<Card:0x007fef1f19b318 @suit=:clubs, @value=:jack>
#<Card:0x007fef1f1376d8 @suit=:clubs, @value=:queen>
#<Card:0x007fef1f135a68 @suit=:clubs, @value=:king>
#<Card:0x007fef1f121f40 @suit=:clubs, @value=:ace>
#<Card:0x007fef1f11b960 @suit=:diamonds, @value=:deuce>
#<Card:0x007fef1f11b0a0 @suit=:diamonds, @value=:three>
#<Card:0x007fef1f11a858 @suit=:diamonds, @value=:four>
#<Card:0x007fef1f119638 @suit=:diamonds, @value=:five>
#<Card:0x007fef1f118c38 @suit=:diamonds, @value=:six>
#<Card:0x007fef1f1184e0 @suit=:diamonds, @value=:seven>
#<Card:0x007fef1f113c10 @suit=:diamonds, @value=:eight>
#<Card:0x007fef1f1123d8 @suit=:diamonds, @value=:nine>
#<Card:0x007fef1f110a60 @suit=:diamonds, @value=:ten>
#<Card:0x007fef1f103158 @suit=:diamonds, @value=:jack>
#<Card:0x007fef1f102bb8 @suit=:diamonds, @value=:queen>
#<Card:0x007fef1f102550 @suit=:diamonds, @value=:king>
#<Card:0x007fef1f1016a0 @suit=:diamonds, @value=:ace>
#<Card:0x007fef1f193e10 @suit=:hearts, @value=:deuce>
#<Card:0x007fef1f193988 @suit=:hearts, @value=:three>
#<Card:0x007fef1f193460 @suit=:hearts, @value=:four>
#<Card:0x007fef1f192d30 @suit=:hearts, @value=:five>
#<Card:0x007fef1f192768 @suit=:hearts, @value=:six>
#<Card:0x007fef1f190cd8 @suit=:hearts, @value=:seven>
#<Card:0x007fef1f190738 @suit=:hearts, @value=:eight>
#<Card:0x007fef1f18baf8 @suit=:hearts, @value=:nine>
#<Card:0x007fef1f18a950 @suit=:hearts, @value=:ten>
#<Card:0x007fef1f18a310 @suit=:hearts, @value=:jack>
#<Card:0x007fef1f189e88 @suit=:hearts, @value=:queen>
#<Card:0x007fef1f189370 @suit=:hearts, @value=:king>
#<Card:0x007fef1f188ce0 @suit=:hearts, @value=:ace>
#<Card:0x007fef1f188858 @suit=:spades, @value=:deuce>
#<Card:0x007fef1f188380 @suit=:spades, @value=:three>
#<Card:0x007fef1f188038 @suit=:spades, @value=:four>
#<Card:0x007fef1f183b00 @suit=:spades, @value=:five>
#<Card:0x007fef1f183628 @suit=:spades, @value=:six>
#<Card:0x007fef1f182cc8 @suit=:spades, @value=:seven>
#<Card:0x007fef1f180770 @suit=:spades, @value=:eight>
#<Card:0x007fef1f17bef0 @suit=:spades, @value=:nine>
#<Card:0x007fef1f17bc70 @suit=:spades, @value=:ten>
#<Card:0x007fef1f17b9c8 @suit=:spades, @value=:jack>
#<Card:0x007fef1f17b220 @suit=:spades, @value=:queen>
#<Card:0x007fef1f179c68 @suit=:spades, @value=:king>
#<Card:0x007fef1f1790b0 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ff790424524 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ff790424524 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ff7904192a0 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff7904192a0 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fef1f159f58 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fef1f46c880 @suit=:spades, @value=:deuce>, #<Card:0x007fef1f46c7e0 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fef1f476e70 @suit=:spades, @value=:ten>, #<Card:0x007fef1f476dd0 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fef1f4754a8 @suit=:spades, @value=:ace>, #<Card:0x007fef1f475408 @suit=:spades, @value=:ten>, #<Card:0x007fef1f475368 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff78fa4a558 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff78fa4a558 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fef1f6d6788 @suit=:spades, @value=:deuce>, #<Card:0x007fef1f6d66e8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fef1f6d6788 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fef1f6d66e8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ff78fb5ea48 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff78fb5ea48 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fef1f6ae0f8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fef1f6ae0f8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02892 seconds (files took 0.08356 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:20 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fbe4d9f4418 @suit=:clubs, @value=:deuce>
#<Card:0x007fbe4d9f4008 @suit=:clubs, @value=:three>
#<Card:0x007fbe4d9efd28 @suit=:clubs, @value=:four>
#<Card:0x007fbe4d9efa08 @suit=:clubs, @value=:five>
#<Card:0x007fbe4d9ef6e8 @suit=:clubs, @value=:six>
#<Card:0x007fbe4d9ef300 @suit=:clubs, @value=:seven>
#<Card:0x007fbe4d9eed10 @suit=:clubs, @value=:eight>
#<Card:0x007fbe4d9ee860 @suit=:clubs, @value=:nine>
#<Card:0x007fbe4d9ee310 @suit=:clubs, @value=:ten>
#<Card:0x007fbe4d9edcf8 @suit=:clubs, @value=:jack>
#<Card:0x007fbe4d9ed7a8 @suit=:clubs, @value=:queen>
#<Card:0x007fbe4d9ed0a0 @suit=:clubs, @value=:king>
#<Card:0x007fbe4d9ecd30 @suit=:clubs, @value=:ace>
#<Card:0x007fbe4d9ec718 @suit=:diamonds, @value=:deuce>
#<Card:0x007fbe4d9ec240 @suit=:diamonds, @value=:three>
#<Card:0x007fbe4d9e7c40 @suit=:diamonds, @value=:four>
#<Card:0x007fbe4d9e7600 @suit=:diamonds, @value=:five>
#<Card:0x007fbe4d9e7038 @suit=:diamonds, @value=:six>
#<Card:0x007fbe4d9e6908 @suit=:diamonds, @value=:seven>
#<Card:0x007fbe4d9e6228 @suit=:diamonds, @value=:eight>
#<Card:0x007fbe4d9e5cd8 @suit=:diamonds, @value=:nine>
#<Card:0x007fbe4d9e4c98 @suit=:diamonds, @value=:ten>
#<Card:0x007fbe4d9e4428 @suit=:diamonds, @value=:jack>
#<Card:0x007fbe4d9dfb58 @suit=:diamonds, @value=:queen>
#<Card:0x007fbe4d9df5b8 @suit=:diamonds, @value=:king>
#<Card:0x007fbe4d9df2c0 @suit=:diamonds, @value=:ace>
#<Card:0x007fbe4d9dee38 @suit=:hearts, @value=:deuce>
#<Card:0x007fbe4d9de8c0 @suit=:hearts, @value=:three>
#<Card:0x007fbe4d9de398 @suit=:hearts, @value=:four>
#<Card:0x007fbe4d9ddfd8 @suit=:hearts, @value=:five>
#<Card:0x007fbe4d9ddc40 @suit=:hearts, @value=:six>
#<Card:0x007fbe4d9dd880 @suit=:hearts, @value=:seven>
#<Card:0x007fbe4d9dd448 @suit=:hearts, @value=:eight>
#<Card:0x007fbe4d9dcfe8 @suit=:hearts, @value=:nine>
#<Card:0x007fbe4d9dc930 @suit=:hearts, @value=:ten>
#<Card:0x007fbe4d9dc520 @suit=:hearts, @value=:jack>
#<Card:0x007fbe4d9dc048 @suit=:hearts, @value=:queen>
#<Card:0x007fbe4d9d3998 @suit=:hearts, @value=:king>
#<Card:0x007fbe4d9d3178 @suit=:hearts, @value=:ace>
#<Card:0x007fbe4d9d27c8 @suit=:spades, @value=:deuce>
#<Card:0x007fbe4d9d1f08 @suit=:spades, @value=:three>
#<Card:0x007fbe4d9d1878 @suit=:spades, @value=:four>
#<Card:0x007fbe4d9d0fe0 @suit=:spades, @value=:five>
#<Card:0x007fbe4d9d0978 @suit=:spades, @value=:six>
#<Card:0x007fbe4d9d04c8 @suit=:spades, @value=:seven>
#<Card:0x007fbe4d9d0040 @suit=:spades, @value=:eight>
#<Card:0x007fbe4d9cb4f0 @suit=:spades, @value=:nine>
#<Card:0x007fbe4d9cad48 @suit=:spades, @value=:ten>
#<Card:0x007fbe4d9ca730 @suit=:spades, @value=:jack>
#<Card:0x007fbe4d9ca2f8 @suit=:spades, @value=:queen>
#<Card:0x007fbe4d9c9c68 @suit=:spades, @value=:king>
#<Card:0x007fbe4d9c9790 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fbe4d9c1608 @suit=:clubs, @value=:deuce>
#<Card:0x007fbe4d9c0dc0 @suit=:clubs, @value=:three>
#<Card:0x007fbe4d9c0398 @suit=:clubs, @value=:four>
#<Card:0x007fbe4d9bbd98 @suit=:clubs, @value=:five>
#<Card:0x007fbe4d9bbaa0 @suit=:clubs, @value=:six>
#<Card:0x007fbe4d9bb6e0 @suit=:clubs, @value=:seven>
#<Card:0x007fbe4d9bb3c0 @suit=:clubs, @value=:eight>
#<Card:0x007fbe4d9bb0c8 @suit=:clubs, @value=:nine>
#<Card:0x007fbe4d9babf0 @suit=:clubs, @value=:ten>
#<Card:0x007fbe4d9ba768 @suit=:clubs, @value=:jack>
#<Card:0x007fbe4d9ba218 @suit=:clubs, @value=:queen>
#<Card:0x007fbe4d9b9d40 @suit=:clubs, @value=:king>
#<Card:0x007fbe4d9b99a8 @suit=:clubs, @value=:ace>
#<Card:0x007fbe4d9b95c0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fbe4d9b92c8 @suit=:diamonds, @value=:three>
#<Card:0x007fbe4d9b8e90 @suit=:diamonds, @value=:four>
#<Card:0x007fbe4d9b8be8 @suit=:diamonds, @value=:five>
#<Card:0x007fbe4d9b88c8 @suit=:diamonds, @value=:six>
#<Card:0x007fbe4d9b8580 @suit=:diamonds, @value=:seven>
#<Card:0x007fbe4d9b8260 @suit=:diamonds, @value=:eight>
#<Card:0x007fbe4d9bbc58 @suit=:diamonds, @value=:nine>
#<Card:0x007fbe4d9b3b70 @suit=:diamonds, @value=:ten>
#<Card:0x007fbe4d9b37d8 @suit=:diamonds, @value=:jack>
#<Card:0x007fbe4d9b32b0 @suit=:diamonds, @value=:queen>
#<Card:0x007fbe4d9b2d60 @suit=:diamonds, @value=:king>
#<Card:0x007fbe4d9b25e0 @suit=:diamonds, @value=:ace>
#<Card:0x007fbe4d9b2040 @suit=:hearts, @value=:deuce>
#<Card:0x007fbe4d9b1c30 @suit=:hearts, @value=:three>
#<Card:0x007fbe4d9b1870 @suit=:hearts, @value=:four>
#<Card:0x007fbe4d9b16b8 @suit=:hearts, @value=:five>
#<Card:0x007fbe4d9b1500 @suit=:hearts, @value=:six>
#<Card:0x007fbe4d9b1320 @suit=:hearts, @value=:seven>
#<Card:0x007fbe4d9b1050 @suit=:hearts, @value=:eight>
#<Card:0x007fbe4d9b0e98 @suit=:hearts, @value=:nine>
#<Card:0x007fbe4d9b0920 @suit=:hearts, @value=:ten>
#<Card:0x007fbe4d9b0100 @suit=:hearts, @value=:jack>
#<Card:0x007fbe4d9ab4e8 @suit=:hearts, @value=:queen>
#<Card:0x007fbe4d9aaa98 @suit=:hearts, @value=:king>
#<Card:0x007fbe4d9aa3e0 @suit=:hearts, @value=:ace>
#<Card:0x007fbe4d9a9d78 @suit=:spades, @value=:deuce>
#<Card:0x007fbe4d9a9210 @suit=:spades, @value=:three>
#<Card:0x007fbe4d9a8e00 @suit=:spades, @value=:four>
#<Card:0x007fbe4d9a8a90 @suit=:spades, @value=:five>
#<Card:0x007fbe4d9a3ea0 @suit=:spades, @value=:six>
#<Card:0x007fbe4d9a3798 @suit=:spades, @value=:seven>
#<Card:0x007fbe4d9a2d20 @suit=:spades, @value=:eight>
#<Card:0x007fbe4d9a2578 @suit=:spades, @value=:nine>
#<Card:0x007fbe4d9a1ab0 @suit=:spades, @value=:ten>
#<Card:0x007fbe4d9a10d8 @suit=:spades, @value=:jack>
#<Card:0x007fbe4d9a07a0 @suit=:spades, @value=:queen>
#<Card:0x007fbe4d9a0390 @suit=:spades, @value=:king>
#<Card:0x007fbe4d9a01b0 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fbe4d9395f0 @suit=:clubs, @value=:deuce>
#<Card:0x007fbe4d9392d0 @suit=:clubs, @value=:three>
#<Card:0x007fbe4d938fd8 @suit=:clubs, @value=:four>
#<Card:0x007fbe4d938d58 @suit=:clubs, @value=:five>
#<Card:0x007fbe4d9389e8 @suit=:clubs, @value=:six>
#<Card:0x007fbe4d9386a0 @suit=:clubs, @value=:seven>
#<Card:0x007fbe4d938380 @suit=:clubs, @value=:eight>
#<Card:0x007fbe4d938060 @suit=:clubs, @value=:nine>
#<Card:0x007fbe4d99bc28 @suit=:clubs, @value=:ten>
#<Card:0x007fbe4d99b4d0 @suit=:clubs, @value=:jack>
#<Card:0x007fbe4d937de0 @suit=:clubs, @value=:queen>
#<Card:0x007fbe4d936648 @suit=:clubs, @value=:king>
#<Card:0x007fbe4d935400 @suit=:clubs, @value=:ace>
#<Card:0x007fbe4d91bf50 @suit=:diamonds, @value=:deuce>
#<Card:0x007fbe4d91b870 @suit=:diamonds, @value=:three>
#<Card:0x007fbe4d91ae98 @suit=:diamonds, @value=:four>
#<Card:0x007fbe4d91a358 @suit=:diamonds, @value=:five>
#<Card:0x007fbe4d919520 @suit=:diamonds, @value=:six>
#<Card:0x007fbe4d918788 @suit=:diamonds, @value=:seven>
#<Card:0x007fbe4d918030 @suit=:diamonds, @value=:eight>
#<Card:0x007fbe4d912928 @suit=:diamonds, @value=:nine>
#<Card:0x007fbe4d911460 @suit=:diamonds, @value=:ten>
#<Card:0x007fbe4d903d88 @suit=:diamonds, @value=:jack>
#<Card:0x007fbe4d902fa0 @suit=:diamonds, @value=:queen>
#<Card:0x007fbe4d902c30 @suit=:diamonds, @value=:king>
#<Card:0x007fbe4d902488 @suit=:diamonds, @value=:ace>
#<Card:0x007fbe4d9010d8 @suit=:hearts, @value=:deuce>
#<Card:0x007fbe4d993cf8 @suit=:hearts, @value=:three>
#<Card:0x007fbe4d993898 @suit=:hearts, @value=:four>
#<Card:0x007fbe4d9932d0 @suit=:hearts, @value=:five>
#<Card:0x007fbe4d992cb8 @suit=:hearts, @value=:six>
#<Card:0x007fbe4d991070 @suit=:hearts, @value=:seven>
#<Card:0x007fbe4d990ad0 @suit=:hearts, @value=:eight>
#<Card:0x007fbe4d9902b0 @suit=:hearts, @value=:nine>
#<Card:0x007fbe4d98b238 @suit=:hearts, @value=:ten>
#<Card:0x007fbe4d98a6a8 @suit=:hearts, @value=:jack>
#<Card:0x007fbe4d98a108 @suit=:hearts, @value=:queen>
#<Card:0x007fbe4d989de8 @suit=:hearts, @value=:king>
#<Card:0x007fbe4d989140 @suit=:hearts, @value=:ace>
#<Card:0x007fbe4d988ba0 @suit=:spades, @value=:deuce>
#<Card:0x007fbe4d988538 @suit=:spades, @value=:three>
#<Card:0x007fbe4d988290 @suit=:spades, @value=:four>
#<Card:0x007fbe4d983ee8 @suit=:spades, @value=:five>
#<Card:0x007fbe4d983858 @suit=:spades, @value=:six>
#<Card:0x007fbe4d9831f0 @suit=:spades, @value=:seven>
#<Card:0x007fbe4d981e40 @suit=:spades, @value=:eight>
#<Card:0x007fbe4d9804c8 @suit=:spades, @value=:nine>
#<Card:0x007fbe4d97bdb0 @suit=:spades, @value=:ten>
#<Card:0x007fbe4d97bab8 @suit=:spades, @value=:jack>
#<Card:0x007fbe4d97b680 @suit=:spades, @value=:queen>
#<Card:0x007fbe4d97a910 @suit=:spades, @value=:king>
#<Card:0x007fbe4d979768 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fdf26d425ac @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fdf26d425ac @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fdf26d37274 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdf26d37274 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fbe4d959ff8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fbe4f8a09e8 @suit=:spades, @value=:deuce>, #<Card:0x007fbe4f8a0948 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fbe4f8aafd8 @suit=:spades, @value=:ten>, #<Card:0x007fbe4f8aaf38 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fbe4f8a9610 @suit=:spades, @value=:ace>, #<Card:0x007fbe4f8a9570 @suit=:spades, @value=:ten>, #<Card:0x007fbe4f8a94d0 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fdf27c64760 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fdf27c64760 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fbe4e2ae810 @suit=:spades, @value=:deuce>, #<Card:0x007fbe4e2ae748 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fbe4e2ae810 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fbe4e2ae748 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fdf2714aaa0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdf2714aaa0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fbe4e2861f8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fbe4e2861f8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03238 seconds (files took 0.08503 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:22 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007ff61d1ec9e8 @suit=:clubs, @value=:deuce>
#<Card:0x007ff61d1ec6a0 @suit=:clubs, @value=:three>
#<Card:0x007ff61d1ec308 @suit=:clubs, @value=:four>
#<Card:0x007ff61d1ec0b0 @suit=:clubs, @value=:five>
#<Card:0x007ff61d1e7d58 @suit=:clubs, @value=:six>
#<Card:0x007ff61d1e7a38 @suit=:clubs, @value=:seven>
#<Card:0x007ff61d1e76f0 @suit=:clubs, @value=:eight>
#<Card:0x007ff61d1e7330 @suit=:clubs, @value=:nine>
#<Card:0x007ff61d1e6cf0 @suit=:clubs, @value=:ten>
#<Card:0x007ff61d1e6958 @suit=:clubs, @value=:jack>
#<Card:0x007ff61d1e6340 @suit=:clubs, @value=:queen>
#<Card:0x007ff61d1e5c88 @suit=:clubs, @value=:king>
#<Card:0x007ff61d1e58f0 @suit=:clubs, @value=:ace>
#<Card:0x007ff61d1e5300 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff61d1e4dd8 @suit=:diamonds, @value=:three>
#<Card:0x007ff61d1e4928 @suit=:diamonds, @value=:four>
#<Card:0x007ff61d1e4360 @suit=:diamonds, @value=:five>
#<Card:0x007ff61d1dfea0 @suit=:diamonds, @value=:six>
#<Card:0x007ff61d1df8b0 @suit=:diamonds, @value=:seven>
#<Card:0x007ff61d1df298 @suit=:diamonds, @value=:eight>
#<Card:0x007ff61d1dec30 @suit=:diamonds, @value=:nine>
#<Card:0x007ff61d1de500 @suit=:diamonds, @value=:ten>
#<Card:0x007ff61d1dd830 @suit=:diamonds, @value=:jack>
#<Card:0x007ff61d1dcef8 @suit=:diamonds, @value=:queen>
#<Card:0x007ff61d1dc688 @suit=:diamonds, @value=:king>
#<Card:0x007ff61d1dc0e8 @suit=:diamonds, @value=:ace>
#<Card:0x007ff61d1d7818 @suit=:hearts, @value=:deuce>
#<Card:0x007ff61d1d7390 @suit=:hearts, @value=:three>
#<Card:0x007ff61d1d6f58 @suit=:hearts, @value=:four>
#<Card:0x007ff61d1d6c10 @suit=:hearts, @value=:five>
#<Card:0x007ff61d1d65a8 @suit=:hearts, @value=:six>
#<Card:0x007ff61d1d6148 @suit=:hearts, @value=:seven>
#<Card:0x007ff61d1d5c98 @suit=:hearts, @value=:eight>
#<Card:0x007ff61d1d5978 @suit=:hearts, @value=:nine>
#<Card:0x007ff61d1d54f0 @suit=:hearts, @value=:ten>
#<Card:0x007ff61d1d50b8 @suit=:hearts, @value=:jack>
#<Card:0x007ff61d1d4cd0 @suit=:hearts, @value=:queen>
#<Card:0x007ff61d1d4668 @suit=:hearts, @value=:king>
#<Card:0x007ff61d1d4168 @suit=:hearts, @value=:ace>
#<Card:0x007ff61d1cbbd0 @suit=:spades, @value=:deuce>
#<Card:0x007ff61d1cb270 @suit=:spades, @value=:three>
#<Card:0x007ff61d1ca7a8 @suit=:spades, @value=:four>
#<Card:0x007ff61d1c9f88 @suit=:spades, @value=:five>
#<Card:0x007ff61d1c9858 @suit=:spades, @value=:six>
#<Card:0x007ff61d1c8f98 @suit=:spades, @value=:seven>
#<Card:0x007ff61d1c89d0 @suit=:spades, @value=:eight>
#<Card:0x007ff61d1c8548 @suit=:spades, @value=:nine>
#<Card:0x007ff61d1c8138 @suit=:spades, @value=:ten>
#<Card:0x007ff61d1c3520 @suit=:spades, @value=:jack>
#<Card:0x007ff61d1c2c88 @suit=:spades, @value=:queen>
#<Card:0x007ff61d1c2788 @suit=:spades, @value=:king>
#<Card:0x007ff61d1c2260 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007ff61d1ba740 @suit=:clubs, @value=:deuce>
#<Card:0x007ff61d1b9c50 @suit=:clubs, @value=:three>
#<Card:0x007ff61d1b92f0 @suit=:clubs, @value=:four>
#<Card:0x007ff61d1b8968 @suit=:clubs, @value=:five>
#<Card:0x007ff61d1b3fa8 @suit=:clubs, @value=:six>
#<Card:0x007ff61d1b3cd8 @suit=:clubs, @value=:seven>
#<Card:0x007ff61d1b3968 @suit=:clubs, @value=:eight>
#<Card:0x007ff61d1b36c0 @suit=:clubs, @value=:nine>
#<Card:0x007ff61d1b33a0 @suit=:clubs, @value=:ten>
#<Card:0x007ff61d1b2f90 @suit=:clubs, @value=:jack>
#<Card:0x007ff61d1b2c98 @suit=:clubs, @value=:queen>
#<Card:0x007ff61d1b2630 @suit=:clubs, @value=:king>
#<Card:0x007ff61d1b2158 @suit=:clubs, @value=:ace>
#<Card:0x007ff61d1b1cf8 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff61d1b1988 @suit=:diamonds, @value=:three>
#<Card:0x007ff61d1b1690 @suit=:diamonds, @value=:four>
#<Card:0x007ff61d1b1208 @suit=:diamonds, @value=:five>
#<Card:0x007ff61d1b0e70 @suit=:diamonds, @value=:six>
#<Card:0x007ff61d1b0bc8 @suit=:diamonds, @value=:seven>
#<Card:0x007ff61d1b08a8 @suit=:diamonds, @value=:eight>
#<Card:0x007ff61d1b0588 @suit=:diamonds, @value=:nine>
#<Card:0x007ff61d1b0240 @suit=:diamonds, @value=:ten>
#<Card:0x007ff61d1abf88 @suit=:diamonds, @value=:jack>
#<Card:0x007ff61d1abab0 @suit=:diamonds, @value=:queen>
#<Card:0x007ff61d1ab6f0 @suit=:diamonds, @value=:king>
#<Card:0x007ff61d1ab1a0 @suit=:diamonds, @value=:ace>
#<Card:0x007ff61d1aaca0 @suit=:hearts, @value=:deuce>
#<Card:0x007ff61d1aa570 @suit=:hearts, @value=:three>
#<Card:0x007ff61d1aa020 @suit=:hearts, @value=:four>
#<Card:0x007ff61d1a9b48 @suit=:hearts, @value=:five>
#<Card:0x007ff61d1a9828 @suit=:hearts, @value=:six>
#<Card:0x007ff61d1a9670 @suit=:hearts, @value=:seven>
#<Card:0x007ff61d1a9490 @suit=:hearts, @value=:eight>
#<Card:0x007ff61d1a92d8 @suit=:hearts, @value=:nine>
#<Card:0x007ff61d1a9008 @suit=:hearts, @value=:ten>
#<Card:0x007ff61d1a8e28 @suit=:hearts, @value=:jack>
#<Card:0x007ff61d1a87c0 @suit=:hearts, @value=:queen>
#<Card:0x007ff61d1a3d60 @suit=:hearts, @value=:king>
#<Card:0x007ff61d1a3108 @suit=:hearts, @value=:ace>
#<Card:0x007ff61d1a2640 @suit=:spades, @value=:deuce>
#<Card:0x007ff61d1a21b8 @suit=:spades, @value=:three>
#<Card:0x007ff61d1a1b00 @suit=:spades, @value=:four>
#<Card:0x007ff61d1a1128 @suit=:spades, @value=:five>
#<Card:0x007ff61d1a0d68 @suit=:spades, @value=:six>
#<Card:0x007ff61d1a0a48 @suit=:spades, @value=:seven>
#<Card:0x007ff61d1a0700 @suit=:spades, @value=:eight>
#<Card:0x007ff61d19bb88 @suit=:spades, @value=:nine>
#<Card:0x007ff61d19b840 @suit=:spades, @value=:ten>
#<Card:0x007ff61d19b5e8 @suit=:spades, @value=:jack>
#<Card:0x007ff61d19b228 @suit=:spades, @value=:queen>
#<Card:0x007ff61d19adf0 @suit=:spades, @value=:king>
#<Card:0x007ff61d19ac38 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007ff61d133d58 @suit=:clubs, @value=:deuce>
#<Card:0x007ff61d133ad8 @suit=:clubs, @value=:three>
#<Card:0x007ff61d133880 @suit=:clubs, @value=:four>
#<Card:0x007ff61d133498 @suit=:clubs, @value=:five>
#<Card:0x007ff61d1331f0 @suit=:clubs, @value=:six>
#<Card:0x007ff61d132fe8 @suit=:clubs, @value=:seven>
#<Card:0x007ff61d132d90 @suit=:clubs, @value=:eight>
#<Card:0x007ff61d132b60 @suit=:clubs, @value=:nine>
#<Card:0x007ff61d1328b8 @suit=:clubs, @value=:ten>
#<Card:0x007ff61d132638 @suit=:clubs, @value=:jack>
#<Card:0x007ff61d132340 @suit=:clubs, @value=:queen>
#<Card:0x007ff61d131ee0 @suit=:clubs, @value=:king>
#<Card:0x007ff61d131b20 @suit=:clubs, @value=:ace>
#<Card:0x007ff61d131620 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff61d131350 @suit=:diamonds, @value=:three>
#<Card:0x007ff61d131148 @suit=:diamonds, @value=:four>
#<Card:0x007ff61d130d60 @suit=:diamonds, @value=:five>
#<Card:0x007ff61d1309f0 @suit=:diamonds, @value=:six>
#<Card:0x007ff61d130748 @suit=:diamonds, @value=:seven>
#<Card:0x007ff61d1303b0 @suit=:diamonds, @value=:eight>
#<Card:0x007ff61d1301a8 @suit=:diamonds, @value=:nine>
#<Card:0x007ff61d193c80 @suit=:diamonds, @value=:ten>
#<Card:0x007ff61d193758 @suit=:diamonds, @value=:jack>
#<Card:0x007ff61d1932a8 @suit=:diamonds, @value=:queen>
#<Card:0x007ff61d192ce0 @suit=:diamonds, @value=:king>
#<Card:0x007ff61d191ea8 @suit=:diamonds, @value=:ace>
#<Card:0x007ff61d190d78 @suit=:hearts, @value=:deuce>
#<Card:0x007ff61d12ef88 @suit=:hearts, @value=:three>
#<Card:0x007ff61d12d0e8 @suit=:hearts, @value=:four>
#<Card:0x007ff61d11aab0 @suit=:hearts, @value=:five>
#<Card:0x007ff61d118378 @suit=:hearts, @value=:six>
#<Card:0x007ff61d1138c8 @suit=:hearts, @value=:seven>
#<Card:0x007ff61d112928 @suit=:hearts, @value=:eight>
#<Card:0x007ff61d1124f0 @suit=:hearts, @value=:nine>
#<Card:0x007ff61d111550 @suit=:hearts, @value=:ten>
#<Card:0x007ff61d110d30 @suit=:hearts, @value=:jack>
#<Card:0x007ff61d110560 @suit=:hearts, @value=:queen>
#<Card:0x007ff61d10bab0 @suit=:hearts, @value=:king>
#<Card:0x007ff61d10a700 @suit=:hearts, @value=:ace>
#<Card:0x007ff61d108cc0 @suit=:spades, @value=:deuce>
#<Card:0x007ff61d01fbb0 @suit=:spades, @value=:three>
#<Card:0x007ff61d01edc8 @suit=:spades, @value=:four>
#<Card:0x007ff61d01e670 @suit=:spades, @value=:five>
#<Card:0x007ff61d01dea0 @suit=:spades, @value=:six>
#<Card:0x007ff61d01ccd0 @suit=:spades, @value=:seven>
#<Card:0x007ff61d18bbc0 @suit=:spades, @value=:eight>
#<Card:0x007ff61d18b760 @suit=:spades, @value=:nine>
#<Card:0x007ff61d18b0a8 @suit=:spades, @value=:ten>
#<Card:0x007ff61d18ab30 @suit=:spades, @value=:jack>
#<Card:0x007ff61d18a518 @suit=:spades, @value=:queen>
#<Card:0x007ff61d188b50 @suit=:spades, @value=:king>
#<Card:0x007ff61d188678 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ffb0e93eaec @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ffb0e93eaec @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ffb0e933548 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ffb0e933548 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007ff61d161a00 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007ff61d02e980 @suit=:spades, @value=:deuce>, #<Card:0x007ff61d02e8e0 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007ff61d026dc0 @suit=:spades, @value=:ten>, #<Card:0x007ff61d026c30 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007ff61e2433a0 @suit=:spades, @value=:ace>, #<Card:0x007ff61e243300 @suit=:spades, @value=:ten>, #<Card:0x007ff61e243260 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ffb0f13cc6c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ffb0f13cc6c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ff61d31d4c0 @suit=:spades, @value=:deuce>, #<Card:0x007ff61d31d3a8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ff61d31d4c0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ff61d31d3a8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ffb0e97f510 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ffb0e97f510 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ff61d2f52e0 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ff61d2f52e0 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02772 seconds (files took 0.08613 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:23 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fee3a1f49a8 @suit=:clubs, @value=:deuce>
#<Card:0x007fee3a1f4570 @suit=:clubs, @value=:three>
#<Card:0x007fee3a1f42f0 @suit=:clubs, @value=:four>
#<Card:0x007fee3a1f4020 @suit=:clubs, @value=:five>
#<Card:0x007fee3a1efca0 @suit=:clubs, @value=:six>
#<Card:0x007fee3a1ef9a8 @suit=:clubs, @value=:seven>
#<Card:0x007fee3a1ef5c0 @suit=:clubs, @value=:eight>
#<Card:0x007fee3a1ef070 @suit=:clubs, @value=:nine>
#<Card:0x007fee3a1eeb98 @suit=:clubs, @value=:ten>
#<Card:0x007fee3a1ee710 @suit=:clubs, @value=:jack>
#<Card:0x007fee3a1ee170 @suit=:clubs, @value=:queen>
#<Card:0x007fee3a1edbd0 @suit=:clubs, @value=:king>
#<Card:0x007fee3a1ed6d0 @suit=:clubs, @value=:ace>
#<Card:0x007fee3a1ed0e0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fee3a1eccf8 @suit=:diamonds, @value=:three>
#<Card:0x007fee3a1ec758 @suit=:diamonds, @value=:four>
#<Card:0x007fee3a1ec2a8 @suit=:diamonds, @value=:five>
#<Card:0x007fee3a1e7c58 @suit=:diamonds, @value=:six>
#<Card:0x007fee3a1e7618 @suit=:diamonds, @value=:seven>
#<Card:0x007fee3a1e7078 @suit=:diamonds, @value=:eight>
#<Card:0x007fee3a1e6a88 @suit=:diamonds, @value=:nine>
#<Card:0x007fee3a1e6150 @suit=:diamonds, @value=:ten>
#<Card:0x007fee3a1e5cc8 @suit=:diamonds, @value=:jack>
#<Card:0x007fee3a1e4850 @suit=:diamonds, @value=:queen>
#<Card:0x007fee3a1e4378 @suit=:diamonds, @value=:king>
#<Card:0x007fee3a1dfbc0 @suit=:diamonds, @value=:ace>
#<Card:0x007fee3a1df490 @suit=:hearts, @value=:deuce>
#<Card:0x007fee3a1df080 @suit=:hearts, @value=:three>
#<Card:0x007fee3a1ded10 @suit=:hearts, @value=:four>
#<Card:0x007fee3a1de9f0 @suit=:hearts, @value=:five>
#<Card:0x007fee3a1de2e8 @suit=:hearts, @value=:six>
#<Card:0x007fee3a1ddfa0 @suit=:hearts, @value=:seven>
#<Card:0x007fee3a1ddb90 @suit=:hearts, @value=:eight>
#<Card:0x007fee3a1dd848 @suit=:hearts, @value=:nine>
#<Card:0x007fee3a1dd488 @suit=:hearts, @value=:ten>
#<Card:0x007fee3a1dcf60 @suit=:hearts, @value=:jack>
#<Card:0x007fee3a1dcbf0 @suit=:hearts, @value=:queen>
#<Card:0x007fee3a1dc4c0 @suit=:hearts, @value=:king>
#<Card:0x007fee3a1dc088 @suit=:hearts, @value=:ace>
#<Card:0x007fee3a1d38e8 @suit=:spades, @value=:deuce>
#<Card:0x007fee3a1d30a0 @suit=:spades, @value=:three>
#<Card:0x007fee3a1d2718 @suit=:spades, @value=:four>
#<Card:0x007fee3a1d1e80 @suit=:spades, @value=:five>
#<Card:0x007fee3a1d1700 @suit=:spades, @value=:six>
#<Card:0x007fee3a1d0eb8 @suit=:spades, @value=:seven>
#<Card:0x007fee3a1d07d8 @suit=:spades, @value=:eight>
#<Card:0x007fee3a1d0468 @suit=:spades, @value=:nine>
#<Card:0x007fee3a1cbf30 @suit=:spades, @value=:ten>
#<Card:0x007fee3a1cb440 @suit=:spades, @value=:jack>
#<Card:0x007fee3a1cad88 @suit=:spades, @value=:queen>
#<Card:0x007fee3a1ca8b0 @suit=:spades, @value=:king>
#<Card:0x007fee3a1ca1d0 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fee3a1c25c0 @suit=:clubs, @value=:deuce>
#<Card:0x007fee3a1c1eb8 @suit=:clubs, @value=:three>
#<Card:0x007fee3a1c1418 @suit=:clubs, @value=:four>
#<Card:0x007fee3a1c0ce8 @suit=:clubs, @value=:five>
#<Card:0x007fee3a1c02e8 @suit=:clubs, @value=:six>
#<Card:0x007fee3a1bbe00 @suit=:clubs, @value=:seven>
#<Card:0x007fee3a1bba40 @suit=:clubs, @value=:eight>
#<Card:0x007fee3a1bb770 @suit=:clubs, @value=:nine>
#<Card:0x007fee3a1bb3b0 @suit=:clubs, @value=:ten>
#<Card:0x007fee3a1bb0b8 @suit=:clubs, @value=:jack>
#<Card:0x007fee3a1bac80 @suit=:clubs, @value=:queen>
#<Card:0x007fee3a1ba7a8 @suit=:clubs, @value=:king>
#<Card:0x007fee3a1ba230 @suit=:clubs, @value=:ace>
#<Card:0x007fee3a1b9e20 @suit=:diamonds, @value=:deuce>
#<Card:0x007fee3a1b9ad8 @suit=:diamonds, @value=:three>
#<Card:0x007fee3a1b9740 @suit=:diamonds, @value=:four>
#<Card:0x007fee3a1b9358 @suit=:diamonds, @value=:five>
#<Card:0x007fee3a1b8f20 @suit=:diamonds, @value=:six>
#<Card:0x007fee3a1b8c50 @suit=:diamonds, @value=:seven>
#<Card:0x007fee3a1b8958 @suit=:diamonds, @value=:eight>
#<Card:0x007fee3a1b8660 @suit=:diamonds, @value=:nine>
#<Card:0x007fee3a1b82f0 @suit=:diamonds, @value=:ten>
#<Card:0x007fee3a1bb7e8 @suit=:diamonds, @value=:jack>
#<Card:0x007fee3a1b3b10 @suit=:diamonds, @value=:queen>
#<Card:0x007fee3a1b36d8 @suit=:diamonds, @value=:king>
#<Card:0x007fee3a1b31d8 @suit=:diamonds, @value=:ace>
#<Card:0x007fee3a1b2be8 @suit=:hearts, @value=:deuce>
#<Card:0x007fee3a1b2508 @suit=:hearts, @value=:three>
#<Card:0x007fee3a1b2030 @suit=:hearts, @value=:four>
#<Card:0x007fee3a1b1bd0 @suit=:hearts, @value=:five>
#<Card:0x007fee3a1b18b0 @suit=:hearts, @value=:six>
#<Card:0x007fee3a1b16f8 @suit=:hearts, @value=:seven>
#<Card:0x007fee3a1b1540 @suit=:hearts, @value=:eight>
#<Card:0x007fee3a1b1360 @suit=:hearts, @value=:nine>
#<Card:0x007fee3a1b1090 @suit=:hearts, @value=:ten>
#<Card:0x007fee3a1b0ed8 @suit=:hearts, @value=:jack>
#<Card:0x007fee3a1b0a78 @suit=:hearts, @value=:queen>
#<Card:0x007fee3a1b0230 @suit=:hearts, @value=:king>
#<Card:0x007fee3a1ab5a0 @suit=:hearts, @value=:ace>
#<Card:0x007fee3a1aacb8 @suit=:spades, @value=:deuce>
#<Card:0x007fee3a1aa3f8 @suit=:spades, @value=:three>
#<Card:0x007fee3a1a9d40 @suit=:spades, @value=:four>
#<Card:0x007fee3a1a9520 @suit=:spades, @value=:five>
#<Card:0x007fee3a1a8e18 @suit=:spades, @value=:six>
#<Card:0x007fee3a1a8aa8 @suit=:spades, @value=:seven>
#<Card:0x007fee3a1a8760 @suit=:spades, @value=:eight>
#<Card:0x007fee3a1a3c60 @suit=:spades, @value=:nine>
#<Card:0x007fee3a1a3940 @suit=:spades, @value=:ten>
#<Card:0x007fee3a1a36c0 @suit=:spades, @value=:jack>
#<Card:0x007fee3a1a3328 @suit=:spades, @value=:queen>
#<Card:0x007fee3a1a2f18 @suit=:spades, @value=:king>
#<Card:0x007fee3a1a2d38 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fee3a13be58 @suit=:clubs, @value=:deuce>
#<Card:0x007fee3a13bbb0 @suit=:clubs, @value=:three>
#<Card:0x007fee3a13b958 @suit=:clubs, @value=:four>
#<Card:0x007fee3a13b570 @suit=:clubs, @value=:five>
#<Card:0x007fee3a13b2c8 @suit=:clubs, @value=:six>
#<Card:0x007fee3a13b098 @suit=:clubs, @value=:seven>
#<Card:0x007fee3a13ae68 @suit=:clubs, @value=:eight>
#<Card:0x007fee3a13abc0 @suit=:clubs, @value=:nine>
#<Card:0x007fee3a13a990 @suit=:clubs, @value=:ten>
#<Card:0x007fee3a13a6c0 @suit=:clubs, @value=:jack>
#<Card:0x007fee3a13a350 @suit=:clubs, @value=:queen>
#<Card:0x007fee3a139f90 @suit=:clubs, @value=:king>
#<Card:0x007fee3a139ba8 @suit=:clubs, @value=:ace>
#<Card:0x007fee3a139630 @suit=:diamonds, @value=:deuce>
#<Card:0x007fee3a139360 @suit=:diamonds, @value=:three>
#<Card:0x007fee3a1390e0 @suit=:diamonds, @value=:four>
#<Card:0x007fee3a138de8 @suit=:diamonds, @value=:five>
#<Card:0x007fee3a138a78 @suit=:diamonds, @value=:six>
#<Card:0x007fee3a1387d0 @suit=:diamonds, @value=:seven>
#<Card:0x007fee3a1384d8 @suit=:diamonds, @value=:eight>
#<Card:0x007fee3a138258 @suit=:diamonds, @value=:nine>
#<Card:0x007fee3a19be98 @suit=:diamonds, @value=:ten>
#<Card:0x007fee3a19b858 @suit=:diamonds, @value=:jack>
#<Card:0x007fee3a19b2b8 @suit=:diamonds, @value=:queen>
#<Card:0x007fee3a19a5e8 @suit=:diamonds, @value=:king>
#<Card:0x007fee3a198f40 @suit=:diamonds, @value=:ace>
#<Card:0x007fee3a137b50 @suit=:hearts, @value=:deuce>
#<Card:0x007fee3a135af8 @suit=:hearts, @value=:three>
#<Card:0x007fee3a123c18 @suit=:hearts, @value=:four>
#<Card:0x007fee3a120dd8 @suit=:hearts, @value=:five>
#<Card:0x007fee3a11b978 @suit=:hearts, @value=:six>
#<Card:0x007fee3a11ad20 @suit=:hearts, @value=:seven>
#<Card:0x007fee3a11a550 @suit=:hearts, @value=:eight>
#<Card:0x007fee3a119358 @suit=:hearts, @value=:nine>
#<Card:0x007fee3a118728 @suit=:hearts, @value=:ten>
#<Card:0x007fee3a113de0 @suit=:hearts, @value=:jack>
#<Card:0x007fee3a112a30 @suit=:hearts, @value=:queen>
#<Card:0x007fee3a111720 @suit=:hearts, @value=:king>
#<Card:0x007fee3a103da0 @suit=:hearts, @value=:ace>
#<Card:0x007fee3a102fb8 @suit=:spades, @value=:deuce>
#<Card:0x007fee3a102b58 @suit=:spades, @value=:three>
#<Card:0x007fee3a102158 @suit=:spades, @value=:four>
#<Card:0x007fee3a100fd8 @suit=:spades, @value=:five>
#<Card:0x007fee3a193c70 @suit=:spades, @value=:six>
#<Card:0x007fee3a193798 @suit=:spades, @value=:seven>
#<Card:0x007fee3a193090 @suit=:spades, @value=:eight>
#<Card:0x007fee3a192c08 @suit=:spades, @value=:nine>
#<Card:0x007fee3a190ea8 @suit=:spades, @value=:ten>
#<Card:0x007fee3a190958 @suit=:spades, @value=:jack>
#<Card:0x007fee3a190138 @suit=:spades, @value=:queen>
#<Card:0x007fee3a18b8b8 @suit=:spades, @value=:king>
#<Card:0x007fee3a18a5f8 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ff71d136d94 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ff71d136d94 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ff71d12b610 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff71d12b610 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fee3a168d40 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fee3a02e4e8 @suit=:spades, @value=:deuce>, #<Card:0x007fee3a02e380 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fee3a026720 @suit=:spades, @value=:ten>, #<Card:0x007fee3a0265e0 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fee3a33f330 @suit=:spades, @value=:ace>, #<Card:0x007fee3a33f290 @suit=:spades, @value=:ten>, #<Card:0x007fee3a33f1f0 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff71d1bac48 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff71d1bac48 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fee3a5c52a8 @suit=:spades, @value=:deuce>, #<Card:0x007fee3a5c5190 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fee3a5c52a8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fee3a5c5190 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ff71d2d329c @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff71d2d329c @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fee3a59ce48 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fee3a59ce48 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03086 seconds (files took 0.08927 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 08:23 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007f82028389a8 @suit=:clubs, @value=:deuce>
#<Card:0x007f82028385c0 @suit=:clubs, @value=:three>
#<Card:0x007f8202838318 @suit=:clubs, @value=:four>
#<Card:0x007f8202838d18 @suit=:clubs, @value=:five>
#<Card:0x007f8202833bd8 @suit=:clubs, @value=:six>
#<Card:0x007f82028339a8 @suit=:clubs, @value=:seven>
#<Card:0x007f8202833638 @suit=:clubs, @value=:eight>
#<Card:0x007f8202833188 @suit=:clubs, @value=:nine>
#<Card:0x007f8202832cb0 @suit=:clubs, @value=:ten>
#<Card:0x007f8202832878 @suit=:clubs, @value=:jack>
#<Card:0x007f8202832238 @suit=:clubs, @value=:queen>
#<Card:0x007f8202831c98 @suit=:clubs, @value=:king>
#<Card:0x007f8202831720 @suit=:clubs, @value=:ace>
#<Card:0x007f82028310e0 @suit=:diamonds, @value=:deuce>
#<Card:0x007f8202830b90 @suit=:diamonds, @value=:three>
#<Card:0x007f8202830708 @suit=:diamonds, @value=:four>
#<Card:0x007f8202830208 @suit=:diamonds, @value=:five>
#<Card:0x007f820282bb18 @suit=:diamonds, @value=:six>
#<Card:0x007f820282b550 @suit=:diamonds, @value=:seven>
#<Card:0x007f820282ae20 @suit=:diamonds, @value=:eight>
#<Card:0x007f820282a830 @suit=:diamonds, @value=:nine>
#<Card:0x007f820282a100 @suit=:diamonds, @value=:ten>
#<Card:0x007f8202829bb0 @suit=:diamonds, @value=:jack>
#<Card:0x007f8202828850 @suit=:diamonds, @value=:queen>
#<Card:0x007f82028283a0 @suit=:diamonds, @value=:king>
#<Card:0x007f8202823c38 @suit=:diamonds, @value=:ace>
#<Card:0x007f8202823620 @suit=:hearts, @value=:deuce>
#<Card:0x007f8202823198 @suit=:hearts, @value=:three>
#<Card:0x007f8202822e00 @suit=:hearts, @value=:four>
#<Card:0x007f82028229a0 @suit=:hearts, @value=:five>
#<Card:0x007f8202822388 @suit=:hearts, @value=:six>
#<Card:0x007f8202822108 @suit=:hearts, @value=:seven>
#<Card:0x007f8202821cf8 @suit=:hearts, @value=:eight>
#<Card:0x007f82028219d8 @suit=:hearts, @value=:nine>
#<Card:0x007f82028214b0 @suit=:hearts, @value=:ten>
#<Card:0x007f82028210c8 @suit=:hearts, @value=:jack>
#<Card:0x007f82028209e8 @suit=:hearts, @value=:queen>
#<Card:0x007f8202820650 @suit=:hearts, @value=:king>
#<Card:0x007f82028201c8 @suit=:hearts, @value=:ace>
#<Card:0x007f820280fc88 @suit=:spades, @value=:deuce>
#<Card:0x007f820280f3a0 @suit=:spades, @value=:three>
#<Card:0x007f820280e928 @suit=:spades, @value=:four>
#<Card:0x007f820280e0b8 @suit=:spades, @value=:five>
#<Card:0x007f820280d9b0 @suit=:spades, @value=:six>
#<Card:0x007f820280d118 @suit=:spades, @value=:seven>
#<Card:0x007f820280c858 @suit=:spades, @value=:eight>
#<Card:0x007f820280c560 @suit=:spades, @value=:nine>
#<Card:0x007f820280c0d8 @suit=:spades, @value=:ten>
#<Card:0x007f82021c3870 @suit=:spades, @value=:jack>
#<Card:0x007f82021c3050 @suit=:spades, @value=:queen>
#<Card:0x007f82021c29c0 @suit=:spades, @value=:king>
#<Card:0x007f82021c24c0 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007f82021ba7c0 @suit=:clubs, @value=:deuce>
#<Card:0x007f82021b9ff0 @suit=:clubs, @value=:three>
#<Card:0x007f82021b95a0 @suit=:clubs, @value=:four>
#<Card:0x007f82021b8d58 @suit=:clubs, @value=:five>
#<Card:0x007f82021b82e0 @suit=:clubs, @value=:six>
#<Card:0x007f82021b3d58 @suit=:clubs, @value=:seven>
#<Card:0x007f82021b3a38 @suit=:clubs, @value=:eight>
#<Card:0x007f82021b3768 @suit=:clubs, @value=:nine>
#<Card:0x007f82021b3448 @suit=:clubs, @value=:ten>
#<Card:0x007f82021b3100 @suit=:clubs, @value=:jack>
#<Card:0x007f82021b2c00 @suit=:clubs, @value=:queen>
#<Card:0x007f82021b27a0 @suit=:clubs, @value=:king>
#<Card:0x007f82021b2250 @suit=:clubs, @value=:ace>
#<Card:0x007f82021b1e90 @suit=:diamonds, @value=:deuce>
#<Card:0x007f82021b1ad0 @suit=:diamonds, @value=:three>
#<Card:0x007f82021b16e8 @suit=:diamonds, @value=:four>
#<Card:0x007f82021b1328 @suit=:diamonds, @value=:five>
#<Card:0x007f82021b0fb8 @suit=:diamonds, @value=:six>
#<Card:0x007f82021b0c98 @suit=:diamonds, @value=:seven>
#<Card:0x007f82021b0978 @suit=:diamonds, @value=:eight>
#<Card:0x007f82021b0680 @suit=:diamonds, @value=:nine>
#<Card:0x007f82021b02e8 @suit=:diamonds, @value=:ten>
#<Card:0x007f82021b3d08 @suit=:diamonds, @value=:jack>
#<Card:0x007f82021abb08 @suit=:diamonds, @value=:queen>
#<Card:0x007f82021ab6f8 @suit=:diamonds, @value=:king>
#<Card:0x007f82021ab1d0 @suit=:diamonds, @value=:ace>
#<Card:0x007f82021aaa00 @suit=:hearts, @value=:deuce>
#<Card:0x007f82021aa438 @suit=:hearts, @value=:three>
#<Card:0x007f82021a9ec0 @suit=:hearts, @value=:four>
#<Card:0x007f82021a9ba0 @suit=:hearts, @value=:five>
#<Card:0x007f82021a98a8 @suit=:hearts, @value=:six>
#<Card:0x007f82021a96f0 @suit=:hearts, @value=:seven>
#<Card:0x007f82021a9538 @suit=:hearts, @value=:eight>
#<Card:0x007f82021a9358 @suit=:hearts, @value=:nine>
#<Card:0x007f82021a9088 @suit=:hearts, @value=:ten>
#<Card:0x007f82021a8de0 @suit=:hearts, @value=:jack>
#<Card:0x007f82021a88b8 @suit=:hearts, @value=:queen>
#<Card:0x007f82021abef0 @suit=:hearts, @value=:king>
#<Card:0x007f82021a3548 @suit=:hearts, @value=:ace>
#<Card:0x007f82021a29e0 @suit=:spades, @value=:deuce>
#<Card:0x007f82021a22b0 @suit=:spades, @value=:three>
#<Card:0x007f82021a1bd0 @suit=:spades, @value=:four>
#<Card:0x007f82021a1248 @suit=:spades, @value=:five>
#<Card:0x007f82021a0e88 @suit=:spades, @value=:six>
#<Card:0x007f82021a0a50 @suit=:spades, @value=:seven>
#<Card:0x007f820219be10 @suit=:spades, @value=:eight>
#<Card:0x007f820219bb90 @suit=:spades, @value=:nine>
#<Card:0x007f820219b820 @suit=:spades, @value=:ten>
#<Card:0x007f820219b500 @suit=:spades, @value=:jack>
#<Card:0x007f820219b028 @suit=:spades, @value=:queen>
#<Card:0x007f820219ae20 @suit=:spades, @value=:king>
#<Card:0x007f820219ac18 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007f820213bee8 @suit=:clubs, @value=:deuce>
#<Card:0x007f820213bc68 @suit=:clubs, @value=:three>
#<Card:0x007f820213b970 @suit=:clubs, @value=:four>
#<Card:0x007f820213b6a0 @suit=:clubs, @value=:five>
#<Card:0x007f820213b358 @suit=:clubs, @value=:six>
#<Card:0x007f820213b150 @suit=:clubs, @value=:seven>
#<Card:0x007f820213af48 @suit=:clubs, @value=:eight>
#<Card:0x007f820213acf0 @suit=:clubs, @value=:nine>
#<Card:0x007f820213a9f8 @suit=:clubs, @value=:ten>
#<Card:0x007f820213a7a0 @suit=:clubs, @value=:jack>
#<Card:0x007f820213a3b8 @suit=:clubs, @value=:queen>
#<Card:0x007f820213a020 @suit=:clubs, @value=:king>
#<Card:0x007f8202139d28 @suit=:clubs, @value=:ace>
#<Card:0x007f82021396c0 @suit=:diamonds, @value=:deuce>
#<Card:0x007f8202139468 @suit=:diamonds, @value=:three>
#<Card:0x007f82021390f8 @suit=:diamonds, @value=:four>
#<Card:0x007f8202138e50 @suit=:diamonds, @value=:five>
#<Card:0x007f8202138bf8 @suit=:diamonds, @value=:six>
#<Card:0x007f8202138838 @suit=:diamonds, @value=:seven>
#<Card:0x007f8202138568 @suit=:diamonds, @value=:eight>
#<Card:0x007f8202138338 @suit=:diamonds, @value=:nine>
#<Card:0x007f8202193da0 @suit=:diamonds, @value=:ten>
#<Card:0x007f8202193940 @suit=:diamonds, @value=:jack>
#<Card:0x007f82021933a0 @suit=:diamonds, @value=:queen>
#<Card:0x007f8202192450 @suit=:diamonds, @value=:king>
#<Card:0x007f82021910c8 @suit=:diamonds, @value=:ace>
#<Card:0x007f8202137438 @suit=:hearts, @value=:deuce>
#<Card:0x007f8202135318 @suit=:hearts, @value=:three>
#<Card:0x007f8202122fd8 @suit=:hearts, @value=:four>
#<Card:0x007f82021205d0 @suit=:hearts, @value=:five>
#<Card:0x007f820211bb48 @suit=:hearts, @value=:six>
#<Card:0x007f820211b148 @suit=:hearts, @value=:seven>
#<Card:0x007f820211a798 @suit=:hearts, @value=:eight>
#<Card:0x007f82021195c8 @suit=:hearts, @value=:nine>
#<Card:0x007f82021187b8 @suit=:hearts, @value=:ten>
#<Card:0x007f8202113fb0 @suit=:hearts, @value=:jack>
#<Card:0x007f8202112a70 @suit=:hearts, @value=:queen>
#<Card:0x007f82021115f8 @suit=:hearts, @value=:king>
#<Card:0x007f8202110130 @suit=:hearts, @value=:ace>
#<Card:0x007f82021032c8 @suit=:spades, @value=:deuce>
#<Card:0x007f8202102da0 @suit=:spades, @value=:three>
#<Card:0x007f8202102468 @suit=:spades, @value=:four>
#<Card:0x007f8202101180 @suit=:spades, @value=:five>
#<Card:0x007f8202803e10 @suit=:spades, @value=:six>
#<Card:0x007f8202803938 @suit=:spades, @value=:seven>
#<Card:0x007f82028034b0 @suit=:spades, @value=:eight>
#<Card:0x007f8202802d58 @suit=:spades, @value=:nine>
#<Card:0x007f8202802a88 @suit=:spades, @value=:ten>
#<Card:0x007f8202800d50 @suit=:spades, @value=:jack>
#<Card:0x007f82028008f0 @suit=:spades, @value=:queen>
#<Card:0x007f820218bf10 @suit=:spades, @value=:king>
#<Card:0x007f820218ac78 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fc10181a824 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fc10181a824 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fc1010ef43c @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc1010ef43c @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007f8202169118 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007f820202e4d8 @suit=:spades, @value=:deuce>, #<Card:0x007f820202e3e8 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007f8202026788 @suit=:spades, @value=:ten>, #<Card:0x007f82020266e8 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007f82023db388 @suit=:spades, @value=:ace>, #<Card:0x007f82023db2e8 @suit=:spades, @value=:ten>, #<Card:0x007f82023db248 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc101204c50 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc101204c50 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f8202639328 @suit=:spades, @value=:deuce>, #<Card:0x007f8202639210 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f8202639328 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f8202639210 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fc10130d340 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc10130d340 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f8202610f90 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f8202610f90 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02881 seconds (files took 0.09261 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:04 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007ff0a7908338 @suit=:clubs, @value=:deuce>
#<Card:0x007ff0a7908ce8 @suit=:clubs, @value=:three>
#<Card:0x007ff0a7903c48 @suit=:clubs, @value=:four>
#<Card:0x007ff0a79039a0 @suit=:clubs, @value=:five>
#<Card:0x007ff0a79034f0 @suit=:clubs, @value=:six>
#<Card:0x007ff0a7903180 @suit=:clubs, @value=:seven>
#<Card:0x007ff0a7902cd0 @suit=:clubs, @value=:eight>
#<Card:0x007ff0a79027f8 @suit=:clubs, @value=:nine>
#<Card:0x007ff0a7902208 @suit=:clubs, @value=:ten>
#<Card:0x007ff0a7901d30 @suit=:clubs, @value=:jack>
#<Card:0x007ff0a79017b8 @suit=:clubs, @value=:queen>
#<Card:0x007ff0a79010d8 @suit=:clubs, @value=:king>
#<Card:0x007ff0a7900ae8 @suit=:clubs, @value=:ace>
#<Card:0x007ff0a7900520 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff0a7900110 @suit=:diamonds, @value=:three>
#<Card:0x007ff0a78fb9d0 @suit=:diamonds, @value=:four>
#<Card:0x007ff0a78fb0e8 @suit=:diamonds, @value=:five>
#<Card:0x007ff0a78fa7b0 @suit=:diamonds, @value=:six>
#<Card:0x007ff0a78f9720 @suit=:diamonds, @value=:seven>
#<Card:0x007ff0a78f8b90 @suit=:diamonds, @value=:eight>
#<Card:0x007ff0a78f8258 @suit=:diamonds, @value=:nine>
#<Card:0x007ff0a78f3b68 @suit=:diamonds, @value=:ten>
#<Card:0x007ff0a78f3370 @suit=:diamonds, @value=:jack>
#<Card:0x007ff0a78f2f10 @suit=:diamonds, @value=:queen>
#<Card:0x007ff0a78f2bf0 @suit=:diamonds, @value=:king>
#<Card:0x007ff0a78f2678 @suit=:diamonds, @value=:ace>
#<Card:0x007ff0a78f2100 @suit=:hearts, @value=:deuce>
#<Card:0x007ff0a78f1db8 @suit=:hearts, @value=:three>
#<Card:0x007ff0a78f1a98 @suit=:hearts, @value=:four>
#<Card:0x007ff0a78f1610 @suit=:hearts, @value=:five>
#<Card:0x007ff0a78f1200 @suit=:hearts, @value=:six>
#<Card:0x007ff0a78f0df0 @suit=:hearts, @value=:seven>
#<Card:0x007ff0a78f0710 @suit=:hearts, @value=:eight>
#<Card:0x007ff0a78f02b0 @suit=:hearts, @value=:nine>
#<Card:0x007ff0a78e3ec0 @suit=:hearts, @value=:ten>
#<Card:0x007ff0a78e3790 @suit=:hearts, @value=:jack>
#<Card:0x007ff0a78e2e30 @suit=:hearts, @value=:queen>
#<Card:0x007ff0a78e2700 @suit=:hearts, @value=:king>
#<Card:0x007ff0a78e1e90 @suit=:hearts, @value=:ace>
#<Card:0x007ff0a78e1558 @suit=:spades, @value=:deuce>
#<Card:0x007ff0a78e0e50 @suit=:spades, @value=:three>
#<Card:0x007ff0a78e0798 @suit=:spades, @value=:four>
#<Card:0x007ff0a78e0450 @suit=:spades, @value=:five>
#<Card:0x007ff0a78e00e0 @suit=:spades, @value=:six>
#<Card:0x007ff0a78db810 @suit=:spades, @value=:seven>
#<Card:0x007ff0a78daca8 @suit=:spades, @value=:eight>
#<Card:0x007ff0a78da758 @suit=:spades, @value=:nine>
#<Card:0x007ff0a78da258 @suit=:spades, @value=:ten>
#<Card:0x007ff0a78d9df8 @suit=:spades, @value=:jack>
#<Card:0x007ff0a78d9740 @suit=:spades, @value=:queen>
#<Card:0x007ff0a78d9330 @suit=:spades, @value=:king>
#<Card:0x007ff0a78d8ed0 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007ff0a78d0438 @suit=:clubs, @value=:deuce>
#<Card:0x007ff0a78cbdc0 @suit=:clubs, @value=:three>
#<Card:0x007ff0a78cba78 @suit=:clubs, @value=:four>
#<Card:0x007ff0a78cb730 @suit=:clubs, @value=:five>
#<Card:0x007ff0a78cb370 @suit=:clubs, @value=:six>
#<Card:0x007ff0a78cb0a0 @suit=:clubs, @value=:seven>
#<Card:0x007ff0a78cacb8 @suit=:clubs, @value=:eight>
#<Card:0x007ff0a78ca790 @suit=:clubs, @value=:nine>
#<Card:0x007ff0a78ca2b8 @suit=:clubs, @value=:ten>
#<Card:0x007ff0a78c9ea8 @suit=:clubs, @value=:jack>
#<Card:0x007ff0a78c99f8 @suit=:clubs, @value=:queen>
#<Card:0x007ff0a78c9688 @suit=:clubs, @value=:king>
#<Card:0x007ff0a78c92c8 @suit=:clubs, @value=:ace>
#<Card:0x007ff0a78c8e90 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff0a78c8b20 @suit=:diamonds, @value=:three>
#<Card:0x007ff0a78c8800 @suit=:diamonds, @value=:four>
#<Card:0x007ff0a78c84e0 @suit=:diamonds, @value=:five>
#<Card:0x007ff0a78c81e8 @suit=:diamonds, @value=:six>
#<Card:0x007ff0a78c3f80 @suit=:diamonds, @value=:seven>
#<Card:0x007ff0a78c3cd8 @suit=:diamonds, @value=:eight>
#<Card:0x007ff0a78c3918 @suit=:diamonds, @value=:nine>
#<Card:0x007ff0a78c3710 @suit=:diamonds, @value=:ten>
#<Card:0x007ff0a78c3418 @suit=:diamonds, @value=:jack>
#<Card:0x007ff0a78c3080 @suit=:diamonds, @value=:queen>
#<Card:0x007ff0a78c2db0 @suit=:diamonds, @value=:king>
#<Card:0x007ff0a78c2a18 @suit=:diamonds, @value=:ace>
#<Card:0x007ff0a78c24f0 @suit=:hearts, @value=:deuce>
#<Card:0x007ff0a78c2220 @suit=:hearts, @value=:three>
#<Card:0x007ff0a78c1e38 @suit=:hearts, @value=:four>
#<Card:0x007ff0a78c1b90 @suit=:hearts, @value=:five>
#<Card:0x007ff0a78c1910 @suit=:hearts, @value=:six>
#<Card:0x007ff0a78c1758 @suit=:hearts, @value=:seven>
#<Card:0x007ff0a78c15a0 @suit=:hearts, @value=:eight>
#<Card:0x007ff0a78c13c0 @suit=:hearts, @value=:nine>
#<Card:0x007ff0a78c1208 @suit=:hearts, @value=:ten>
#<Card:0x007ff0a78c0f38 @suit=:hearts, @value=:jack>
#<Card:0x007ff0a78c0d08 @suit=:hearts, @value=:queen>
#<Card:0x007ff0a78c0a10 @suit=:hearts, @value=:king>
#<Card:0x007ff0a78c04c0 @suit=:hearts, @value=:ace>
#<Card:0x007ff0a78bbf88 @suit=:spades, @value=:deuce>
#<Card:0x007ff0a78bb600 @suit=:spades, @value=:three>
#<Card:0x007ff0a78bb010 @suit=:spades, @value=:four>
#<Card:0x007ff0a78ba890 @suit=:spades, @value=:five>
#<Card:0x007ff0a78ba278 @suit=:spades, @value=:six>
#<Card:0x007ff0a78b9e40 @suit=:spades, @value=:seven>
#<Card:0x007ff0a78b95a8 @suit=:spades, @value=:eight>
#<Card:0x007ff0a78b8f18 @suit=:spades, @value=:nine>
#<Card:0x007ff0a78b8ab8 @suit=:spades, @value=:ten>
#<Card:0x007ff0a78b82c0 @suit=:spades, @value=:jack>
#<Card:0x007ff0a78b3c20 @suit=:spades, @value=:queen>
#<Card:0x007ff0a78b36f8 @suit=:spades, @value=:king>
#<Card:0x007ff0a78b2f50 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007ff0a78ab020 @suit=:clubs, @value=:deuce>
#<Card:0x007ff0a78aae18 @suit=:clubs, @value=:three>
#<Card:0x007ff0a78aabc0 @suit=:clubs, @value=:four>
#<Card:0x007ff0a78aa9b8 @suit=:clubs, @value=:five>
#<Card:0x007ff0a78aa788 @suit=:clubs, @value=:six>
#<Card:0x007ff0a78aa468 @suit=:clubs, @value=:seven>
#<Card:0x007ff0a78a9fb8 @suit=:clubs, @value=:eight>
#<Card:0x007ff0a78a9d88 @suit=:clubs, @value=:nine>
#<Card:0x007ff0a78a99f0 @suit=:clubs, @value=:ten>
#<Card:0x007ff0a78a94f0 @suit=:clubs, @value=:jack>
#<Card:0x007ff0a78a91d0 @suit=:clubs, @value=:queen>
#<Card:0x007ff0a78a8e60 @suit=:clubs, @value=:king>
#<Card:0x007ff0a78a8be0 @suit=:clubs, @value=:ace>
#<Card:0x007ff0a78a87a8 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff0a78a8348 @suit=:diamonds, @value=:three>
#<Card:0x007ff0a78a3eb0 @suit=:diamonds, @value=:four>
#<Card:0x007ff0a78a3730 @suit=:diamonds, @value=:five>
#<Card:0x007ff0a78a03c8 @suit=:diamonds, @value=:six>
#<Card:0x007ff0a785b188 @suit=:diamonds, @value=:seven>
#<Card:0x007ff0a78595b8 @suit=:diamonds, @value=:eight>
#<Card:0x007ff0a78403d8 @suit=:diamonds, @value=:nine>
#<Card:0x007ff0a783b7e8 @suit=:diamonds, @value=:ten>
#<Card:0x007ff0a783aeb0 @suit=:diamonds, @value=:jack>
#<Card:0x007ff0a783a528 @suit=:diamonds, @value=:queen>
#<Card:0x007ff0a7839628 @suit=:diamonds, @value=:king>
#<Card:0x007ff0a7838f98 @suit=:diamonds, @value=:ace>
#<Card:0x007ff0a7838520 @suit=:hearts, @value=:deuce>
#<Card:0x007ff0a7833ac0 @suit=:hearts, @value=:three>
#<Card:0x007ff0a7832670 @suit=:hearts, @value=:four>
#<Card:0x007ff0a7830ca8 @suit=:hearts, @value=:five>
#<Card:0x007ff0a7823288 @suit=:hearts, @value=:six>
#<Card:0x007ff0a7822c98 @suit=:hearts, @value=:seven>
#<Card:0x007ff0a78225b8 @suit=:hearts, @value=:eight>
#<Card:0x007ff0a7821ca8 @suit=:hearts, @value=:nine>
#<Card:0x007ff0a789beb8 @suit=:hearts, @value=:ten>
#<Card:0x007ff0a789ba08 @suit=:hearts, @value=:jack>
#<Card:0x007ff0a789b5a8 @suit=:hearts, @value=:queen>
#<Card:0x007ff0a789ae78 @suit=:hearts, @value=:king>
#<Card:0x007ff0a789a900 @suit=:hearts, @value=:ace>
#<Card:0x007ff0a7898e48 @suit=:spades, @value=:deuce>
#<Card:0x007ff0a7898970 @suit=:spades, @value=:three>
#<Card:0x007ff0a7898560 @suit=:spades, @value=:four>
#<Card:0x007ff0a7893dd0 @suit=:spades, @value=:five>
#<Card:0x007ff0a7892ac0 @suit=:spades, @value=:six>
#<Card:0x007ff0a7892458 @suit=:spades, @value=:seven>
#<Card:0x007ff0a7891e68 @suit=:spades, @value=:eight>
#<Card:0x007ff0a7891a58 @suit=:spades, @value=:nine>
#<Card:0x007ff0a7890d10 @suit=:spades, @value=:ten>
#<Card:0x007ff0a78909f0 @suit=:spades, @value=:jack>
#<Card:0x007ff0a7890388 @suit=:spades, @value=:queen>
#<Card:0x007ff0a78900b8 @suit=:spades, @value=:king>
#<Card:0x007ff0a788bbf8 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ff853c75ad4 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ff853c75ad4 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ff853c721e0 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff853c721e0 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007ff0a786acc8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007ff0a702e118 @suit=:spades, @value=:deuce>, #<Card:0x007ff0a702df38 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007ff0a7025e78 @suit=:spades, @value=:ten>, #<Card:0x007ff0a7025d60 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007ff0a721f1c0 @suit=:spades, @value=:ace>, #<Card:0x007ff0a721f120 @suit=:spades, @value=:ten>, #<Card:0x007ff0a721f080 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff853926b80 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff853926b80 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ff0a7ca90a0 @suit=:spades, @value=:deuce>, #<Card:0x007ff0a7ca8fb0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ff0a7ca90a0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ff0a7ca8fb0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ff853e45404 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff853e45404 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ff0a7c80df8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ff0a7c80df8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03049 seconds (files took 0.08806 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:08 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fc2b3000898 @suit=:clubs, @value=:deuce>
#<Card:0x007fc2b30002a8 @suit=:clubs, @value=:three>
#<Card:0x007fc2b3000050 @suit=:clubs, @value=:four>
#<Card:0x007fc2b2103d18 @suit=:clubs, @value=:five>
#<Card:0x007fc2b21039a8 @suit=:clubs, @value=:six>
#<Card:0x007fc2b2103778 @suit=:clubs, @value=:seven>
#<Card:0x007fc2b21032f0 @suit=:clubs, @value=:eight>
#<Card:0x007fc2b2102e68 @suit=:clubs, @value=:nine>
#<Card:0x007fc2b2102af8 @suit=:clubs, @value=:ten>
#<Card:0x007fc2b2102508 @suit=:clubs, @value=:jack>
#<Card:0x007fc2b2101fb8 @suit=:clubs, @value=:queen>
#<Card:0x007fc2b21019a0 @suit=:clubs, @value=:king>
#<Card:0x007fc2b2101478 @suit=:clubs, @value=:ace>
#<Card:0x007fc2b2100eb0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc2b21007d0 @suit=:diamonds, @value=:three>
#<Card:0x007fc2b2100438 @suit=:diamonds, @value=:four>
#<Card:0x007fc2b20fbcd0 @suit=:diamonds, @value=:five>
#<Card:0x007fc2b20fb5c8 @suit=:diamonds, @value=:six>
#<Card:0x007fc2b20facb8 @suit=:diamonds, @value=:seven>
#<Card:0x007fc2b20f9de0 @suit=:diamonds, @value=:eight>
#<Card:0x007fc2b20f9818 @suit=:diamonds, @value=:nine>
#<Card:0x007fc2b20f8c38 @suit=:diamonds, @value=:ten>
#<Card:0x007fc2b20f8198 @suit=:diamonds, @value=:jack>
#<Card:0x007fc2b20f3b48 @suit=:diamonds, @value=:queen>
#<Card:0x007fc2b20f3328 @suit=:diamonds, @value=:king>
#<Card:0x007fc2b20f2e78 @suit=:diamonds, @value=:ace>
#<Card:0x007fc2b20f2540 @suit=:hearts, @value=:deuce>
#<Card:0x007fc2b20f20e0 @suit=:hearts, @value=:three>
#<Card:0x007fc2b20f1cd0 @suit=:hearts, @value=:four>
#<Card:0x007fc2b20f1910 @suit=:hearts, @value=:five>
#<Card:0x007fc2b20f1410 @suit=:hearts, @value=:six>
#<Card:0x007fc2b20f0e98 @suit=:hearts, @value=:seven>
#<Card:0x007fc2b20f0808 @suit=:hearts, @value=:eight>
#<Card:0x007fc2b101fd08 @suit=:hearts, @value=:nine>
#<Card:0x007fc2b101f470 @suit=:hearts, @value=:ten>
#<Card:0x007fc2b101ea98 @suit=:hearts, @value=:jack>
#<Card:0x007fc2b101e638 @suit=:hearts, @value=:queen>
#<Card:0x007fc2b101dc10 @suit=:hearts, @value=:king>
#<Card:0x007fc2b101d4b8 @suit=:hearts, @value=:ace>
#<Card:0x007fc2b101ce78 @suit=:spades, @value=:deuce>
#<Card:0x007fc2b101c8b0 @suit=:spades, @value=:three>
#<Card:0x007fc2b101c478 @suit=:spades, @value=:four>
#<Card:0x007fc2b20e7d20 @suit=:spades, @value=:five>
#<Card:0x007fc2b20e72a8 @suit=:spades, @value=:six>
#<Card:0x007fc2b20e6c68 @suit=:spades, @value=:seven>
#<Card:0x007fc2b20e6588 @suit=:spades, @value=:eight>
#<Card:0x007fc2b20e6060 @suit=:spades, @value=:nine>
#<Card:0x007fc2b20e5bb0 @suit=:spades, @value=:ten>
#<Card:0x007fc2b20e5778 @suit=:spades, @value=:jack>
#<Card:0x007fc2b20e52c8 @suit=:spades, @value=:queen>
#<Card:0x007fc2b20e4c10 @suit=:spades, @value=:king>
#<Card:0x007fc2b20e4530 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fc2b20d7b50 @suit=:clubs, @value=:deuce>
#<Card:0x007fc2b20d77e0 @suit=:clubs, @value=:three>
#<Card:0x007fc2b20d7470 @suit=:clubs, @value=:four>
#<Card:0x007fc2b20d7178 @suit=:clubs, @value=:five>
#<Card:0x007fc2b20d6e80 @suit=:clubs, @value=:six>
#<Card:0x007fc2b20d69d0 @suit=:clubs, @value=:seven>
#<Card:0x007fc2b20d6520 @suit=:clubs, @value=:eight>
#<Card:0x007fc2b20d6098 @suit=:clubs, @value=:nine>
#<Card:0x007fc2b20d5c60 @suit=:clubs, @value=:ten>
#<Card:0x007fc2b20d58c8 @suit=:clubs, @value=:jack>
#<Card:0x007fc2b20d5508 @suit=:clubs, @value=:queen>
#<Card:0x007fc2b20d5120 @suit=:clubs, @value=:king>
#<Card:0x007fc2b20d4e00 @suit=:clubs, @value=:ace>
#<Card:0x007fc2b20d49a0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc2b20d45b8 @suit=:diamonds, @value=:three>
#<Card:0x007fc2b20d4310 @suit=:diamonds, @value=:four>
#<Card:0x007fc2b20d5698 @suit=:diamonds, @value=:five>
#<Card:0x007fc2b20cfd38 @suit=:diamonds, @value=:six>
#<Card:0x007fc2b20cfa40 @suit=:diamonds, @value=:seven>
#<Card:0x007fc2b20cf7e8 @suit=:diamonds, @value=:eight>
#<Card:0x007fc2b20cf3d8 @suit=:diamonds, @value=:nine>
#<Card:0x007fc2b20cf0e0 @suit=:diamonds, @value=:ten>
#<Card:0x007fc2b20cee60 @suit=:diamonds, @value=:jack>
#<Card:0x007fc2b20ce870 @suit=:diamonds, @value=:queen>
#<Card:0x007fc2b20ce550 @suit=:diamonds, @value=:king>
#<Card:0x007fc2b20ce208 @suit=:diamonds, @value=:ace>
#<Card:0x007fc2b20cdec0 @suit=:hearts, @value=:deuce>
#<Card:0x007fc2b20cdbf0 @suit=:hearts, @value=:three>
#<Card:0x007fc2b20cd948 @suit=:hearts, @value=:four>
#<Card:0x007fc2b20cd790 @suit=:hearts, @value=:five>
#<Card:0x007fc2b20cd5d8 @suit=:hearts, @value=:six>
#<Card:0x007fc2b20cd3f8 @suit=:hearts, @value=:seven>
#<Card:0x007fc2b20cd240 @suit=:hearts, @value=:eight>
#<Card:0x007fc2b20ccf48 @suit=:hearts, @value=:nine>
#<Card:0x007fc2b20cccf0 @suit=:hearts, @value=:ten>
#<Card:0x007fc2b20cc8b8 @suit=:hearts, @value=:jack>
#<Card:0x007fc2b20cc250 @suit=:hearts, @value=:queen>
#<Card:0x007fc2b20c7660 @suit=:hearts, @value=:king>
#<Card:0x007fc2b20c6f58 @suit=:hearts, @value=:ace>
#<Card:0x007fc2b20c6530 @suit=:spades, @value=:deuce>
#<Card:0x007fc2b20c6120 @suit=:spades, @value=:three>
#<Card:0x007fc2b20c5b30 @suit=:spades, @value=:four>
#<Card:0x007fc2b20c54a0 @suit=:spades, @value=:five>
#<Card:0x007fc2b20c4e38 @suit=:spades, @value=:six>
#<Card:0x007fc2b20c4ac8 @suit=:spades, @value=:seven>
#<Card:0x007fc2b20c4500 @suit=:spades, @value=:eight>
#<Card:0x007fc2b20bfde8 @suit=:spades, @value=:nine>
#<Card:0x007fc2b20bfac8 @suit=:spades, @value=:ten>
#<Card:0x007fc2b20bf6b8 @suit=:spades, @value=:jack>
#<Card:0x007fc2b20bf348 @suit=:spades, @value=:queen>
#<Card:0x007fc2b20bf0f0 @suit=:spades, @value=:king>
#<Card:0x007fc2b20bed08 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fc2b20576d0 @suit=:clubs, @value=:deuce>
#<Card:0x007fc2b20573b0 @suit=:clubs, @value=:three>
#<Card:0x007fc2b20570e0 @suit=:clubs, @value=:four>
#<Card:0x007fc2b2056eb0 @suit=:clubs, @value=:five>
#<Card:0x007fc2b2056bb8 @suit=:clubs, @value=:six>
#<Card:0x007fc2b2056988 @suit=:clubs, @value=:seven>
#<Card:0x007fc2b2056708 @suit=:clubs, @value=:eight>
#<Card:0x007fc2b2056460 @suit=:clubs, @value=:nine>
#<Card:0x007fc2b2056028 @suit=:clubs, @value=:ten>
#<Card:0x007fc2b2055d58 @suit=:clubs, @value=:jack>
#<Card:0x007fc2b20559c0 @suit=:clubs, @value=:queen>
#<Card:0x007fc2b2055538 @suit=:clubs, @value=:king>
#<Card:0x007fc2b20551f0 @suit=:clubs, @value=:ace>
#<Card:0x007fc2b2054ed0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fc2b2054bb0 @suit=:diamonds, @value=:three>
#<Card:0x007fc2b2054930 @suit=:diamonds, @value=:four>
#<Card:0x007fc2b2054598 @suit=:diamonds, @value=:five>
#<Card:0x007fc2b2054200 @suit=:diamonds, @value=:six>
#<Card:0x007fc2b20b7f80 @suit=:diamonds, @value=:seven>
#<Card:0x007fc2b20b7b98 @suit=:diamonds, @value=:eight>
#<Card:0x007fc2b20b7760 @suit=:diamonds, @value=:nine>
#<Card:0x007fc2b20b5258 @suit=:diamonds, @value=:ten>
#<Card:0x007fc2b2052ef0 @suit=:diamonds, @value=:jack>
#<Card:0x007fc2b2050f38 @suit=:diamonds, @value=:queen>
#<Card:0x007fc2b203cf10 @suit=:diamonds, @value=:king>
#<Card:0x007fc2b2037268 @suit=:diamonds, @value=:ace>
#<Card:0x007fc2b2036a70 @suit=:hearts, @value=:deuce>
#<Card:0x007fc2b2036228 @suit=:hearts, @value=:three>
#<Card:0x007fc2b2035350 @suit=:hearts, @value=:four>
#<Card:0x007fc2b2034a90 @suit=:hearts, @value=:five>
#<Card:0x007fc2b202fc48 @suit=:hearts, @value=:six>
#<Card:0x007fc2b202e618 @suit=:hearts, @value=:seven>
#<Card:0x007fc2b202cbd8 @suit=:hearts, @value=:eight>
#<Card:0x007fc2b201f230 @suit=:hearts, @value=:nine>
#<Card:0x007fc2b201ec68 @suit=:hearts, @value=:ten>
#<Card:0x007fc2b201e560 @suit=:hearts, @value=:jack>
#<Card:0x007fc2b201dc00 @suit=:hearts, @value=:queen>
#<Card:0x007fc2b201cdc8 @suit=:hearts, @value=:king>
#<Card:0x007fc2b20afbc8 @suit=:hearts, @value=:ace>
#<Card:0x007fc2b20af858 @suit=:spades, @value=:deuce>
#<Card:0x007fc2b20af268 @suit=:spades, @value=:three>
#<Card:0x007fc2b20aebb0 @suit=:spades, @value=:four>
#<Card:0x007fc2b20ae2a0 @suit=:spades, @value=:five>
#<Card:0x007fc2b20aca40 @suit=:spades, @value=:six>
#<Card:0x007fc2b20ac2e8 @suit=:spades, @value=:seven>
#<Card:0x007fc2b20a6c80 @suit=:spades, @value=:eight>
#<Card:0x007fc2b20a6690 @suit=:spades, @value=:nine>
#<Card:0x007fc2b20a5fd8 @suit=:spades, @value=:ten>
#<Card:0x007fc2b20a5ab0 @suit=:spades, @value=:jack>
#<Card:0x007fc2b20a5830 @suit=:spades, @value=:queen>
#<Card:0x007fc2b20a4b88 @suit=:spades, @value=:king>
#<Card:0x007fc2b20a4688 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fe1590dc350 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fe1590dc350 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fe1590d0f8c @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe1590d0f8c @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fc2b207f248 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fc2b102e4c0 @suit=:spades, @value=:deuce>, #<Card:0x007fc2b102e3a8 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fc2b10268b0 @suit=:spades, @value=:ten>, #<Card:0x007fc2b1026680 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fc2b115f308 @suit=:spades, @value=:ace>, #<Card:0x007fc2b115f268 @suit=:spades, @value=:ten>, #<Card:0x007fc2b115f1c8 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe15919cc18 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe15919cc18 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc2b2551168 @suit=:spades, @value=:deuce>, #<Card:0x007fc2b2551050 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc2b2551168 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc2b2551050 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fe1592993f0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe1592993f0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fc2b2528da8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fc2b2528da8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02889 seconds (files took 0.08987 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:08 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fceb9844510 @suit=:clubs, @value=:deuce>
#<Card:0x007fceb98441c8 @suit=:clubs, @value=:three>
#<Card:0x007fceb983fec0 @suit=:clubs, @value=:four>
#<Card:0x007fceb983fad8 @suit=:clubs, @value=:five>
#<Card:0x007fceb983f790 @suit=:clubs, @value=:six>
#<Card:0x007fceb983f290 @suit=:clubs, @value=:seven>
#<Card:0x007fceb983ede0 @suit=:clubs, @value=:eight>
#<Card:0x007fceb983e9a8 @suit=:clubs, @value=:nine>
#<Card:0x007fceb983e520 @suit=:clubs, @value=:ten>
#<Card:0x007fceb983e0c0 @suit=:clubs, @value=:jack>
#<Card:0x007fceb983dad0 @suit=:clubs, @value=:queen>
#<Card:0x007fceb983d508 @suit=:clubs, @value=:king>
#<Card:0x007fceb983cef0 @suit=:clubs, @value=:ace>
#<Card:0x007fceb983c838 @suit=:diamonds, @value=:deuce>
#<Card:0x007fceb983c428 @suit=:diamonds, @value=:three>
#<Card:0x007fceb983c018 @suit=:diamonds, @value=:four>
#<Card:0x007fceb9837950 @suit=:diamonds, @value=:five>
#<Card:0x007fceb9837360 @suit=:diamonds, @value=:six>
#<Card:0x007fceb9836c30 @suit=:diamonds, @value=:seven>
#<Card:0x007fceb98365c8 @suit=:diamonds, @value=:eight>
#<Card:0x007fceb9835ec0 @suit=:diamonds, @value=:nine>
#<Card:0x007fceb98356c8 @suit=:diamonds, @value=:ten>
#<Card:0x007fceb9834340 @suit=:diamonds, @value=:jack>
#<Card:0x007fceb982fe80 @suit=:diamonds, @value=:queen>
#<Card:0x007fceb982fa48 @suit=:diamonds, @value=:king>
#<Card:0x007fceb982f610 @suit=:diamonds, @value=:ace>
#<Card:0x007fceb982f1d8 @suit=:hearts, @value=:deuce>
#<Card:0x007fceb982ee40 @suit=:hearts, @value=:three>
#<Card:0x007fceb982eb48 @suit=:hearts, @value=:four>
#<Card:0x007fceb982e620 @suit=:hearts, @value=:five>
#<Card:0x007fceb982e2d8 @suit=:hearts, @value=:six>
#<Card:0x007fceb982dea0 @suit=:hearts, @value=:seven>
#<Card:0x007fceb982dbf8 @suit=:hearts, @value=:eight>
#<Card:0x007fceb982d810 @suit=:hearts, @value=:nine>
#<Card:0x007fceb982d568 @suit=:hearts, @value=:ten>
#<Card:0x007fceb982d158 @suit=:hearts, @value=:jack>
#<Card:0x007fceb982c9b0 @suit=:hearts, @value=:queen>
#<Card:0x007fceb982c4d8 @suit=:hearts, @value=:king>
#<Card:0x007fceb982c118 @suit=:hearts, @value=:ace>
#<Card:0x007fceb9817b28 @suit=:spades, @value=:deuce>
#<Card:0x007fceb9816fe8 @suit=:spades, @value=:three>
#<Card:0x007fceb9816700 @suit=:spades, @value=:four>
#<Card:0x007fceb9815e68 @suit=:spades, @value=:five>
#<Card:0x007fceb9815580 @suit=:spades, @value=:six>
#<Card:0x007fceb9814d88 @suit=:spades, @value=:seven>
#<Card:0x007fceb98147c0 @suit=:spades, @value=:eight>
#<Card:0x007fceb98143b0 @suit=:spades, @value=:nine>
#<Card:0x007fceb980fcc0 @suit=:spades, @value=:ten>
#<Card:0x007fceb980f338 @suit=:spades, @value=:jack>
#<Card:0x007fceb980eed8 @suit=:spades, @value=:queen>
#<Card:0x007fceb980ea50 @suit=:spades, @value=:king>
#<Card:0x007fceb980e348 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fceb98065d0 @suit=:clubs, @value=:deuce>
#<Card:0x007fceb9805e78 @suit=:clubs, @value=:three>
#<Card:0x007fceb9805338 @suit=:clubs, @value=:four>
#<Card:0x007fceb9804d20 @suit=:clubs, @value=:five>
#<Card:0x007fceb98043c0 @suit=:clubs, @value=:six>
#<Card:0x007fceb8047d40 @suit=:clubs, @value=:seven>
#<Card:0x007fceb8047a70 @suit=:clubs, @value=:eight>
#<Card:0x007fceb8047700 @suit=:clubs, @value=:nine>
#<Card:0x007fceb80473b8 @suit=:clubs, @value=:ten>
#<Card:0x007fceb8047110 @suit=:clubs, @value=:jack>
#<Card:0x007fceb8046c38 @suit=:clubs, @value=:queen>
#<Card:0x007fceb80468c8 @suit=:clubs, @value=:king>
#<Card:0x007fceb8046350 @suit=:clubs, @value=:ace>
#<Card:0x007fceb8045f68 @suit=:diamonds, @value=:deuce>
#<Card:0x007fceb8045c48 @suit=:diamonds, @value=:three>
#<Card:0x007fceb8045838 @suit=:diamonds, @value=:four>
#<Card:0x007fceb80454f0 @suit=:diamonds, @value=:five>
#<Card:0x007fceb8045130 @suit=:diamonds, @value=:six>
#<Card:0x007fceb8044de8 @suit=:diamonds, @value=:seven>
#<Card:0x007fceb8044938 @suit=:diamonds, @value=:eight>
#<Card:0x007fceb8044410 @suit=:diamonds, @value=:nine>
#<Card:0x007fceb803ff50 @suit=:diamonds, @value=:ten>
#<Card:0x007fceb803fb90 @suit=:diamonds, @value=:jack>
#<Card:0x007fceb803f6b8 @suit=:diamonds, @value=:queen>
#<Card:0x007fceb803f118 @suit=:diamonds, @value=:king>
#<Card:0x007fceb803ece0 @suit=:diamonds, @value=:ace>
#<Card:0x007fceb803e600 @suit=:hearts, @value=:deuce>
#<Card:0x007fceb803e150 @suit=:hearts, @value=:three>
#<Card:0x007fceb803dc50 @suit=:hearts, @value=:four>
#<Card:0x007fceb803d958 @suit=:hearts, @value=:five>
#<Card:0x007fceb803d7a0 @suit=:hearts, @value=:six>
#<Card:0x007fceb803d5e8 @suit=:hearts, @value=:seven>
#<Card:0x007fceb803d430 @suit=:hearts, @value=:eight>
#<Card:0x007fceb803d250 @suit=:hearts, @value=:nine>
#<Card:0x007fceb803cf80 @suit=:hearts, @value=:ten>
#<Card:0x007fceb803caa8 @suit=:hearts, @value=:jack>
#<Card:0x007fceb803c418 @suit=:hearts, @value=:queen>
#<Card:0x007fceb8037c60 @suit=:hearts, @value=:king>
#<Card:0x007fceb8037080 @suit=:hearts, @value=:ace>
#<Card:0x007fceb8036950 @suit=:spades, @value=:deuce>
#<Card:0x007fceb8036478 @suit=:spades, @value=:three>
#<Card:0x007fceb8035d98 @suit=:spades, @value=:four>
#<Card:0x007fceb8035410 @suit=:spades, @value=:five>
#<Card:0x007fceb8035050 @suit=:spades, @value=:six>
#<Card:0x007fceb8034bf0 @suit=:spades, @value=:seven>
#<Card:0x007fceb80341a0 @suit=:spades, @value=:eight>
#<Card:0x007fceb802fd08 @suit=:spades, @value=:nine>
#<Card:0x007fceb802f998 @suit=:spades, @value=:ten>
#<Card:0x007fceb802f5b0 @suit=:spades, @value=:jack>
#<Card:0x007fceb802f218 @suit=:spades, @value=:queen>
#<Card:0x007fceb802ee08 @suit=:spades, @value=:king>
#<Card:0x007fceb802ec00 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fceb8027cc0 @suit=:clubs, @value=:deuce>
#<Card:0x007fceb8027a68 @suit=:clubs, @value=:three>
#<Card:0x007fceb80277c0 @suit=:clubs, @value=:four>
#<Card:0x007fceb8027450 @suit=:clubs, @value=:five>
#<Card:0x007fceb8027108 @suit=:clubs, @value=:six>
#<Card:0x007fceb8026f28 @suit=:clubs, @value=:seven>
#<Card:0x007fceb8026c30 @suit=:clubs, @value=:eight>
#<Card:0x007fceb80269d8 @suit=:clubs, @value=:nine>
#<Card:0x007fceb8026550 @suit=:clubs, @value=:ten>
#<Card:0x007fceb8026230 @suit=:clubs, @value=:jack>
#<Card:0x007fceb8025fb0 @suit=:clubs, @value=:queen>
#<Card:0x007fceb8025cb8 @suit=:clubs, @value=:king>
#<Card:0x007fceb8025768 @suit=:clubs, @value=:ace>
#<Card:0x007fceb80253d0 @suit=:diamonds, @value=:deuce>
#<Card:0x007fceb8025100 @suit=:diamonds, @value=:three>
#<Card:0x007fceb8024e30 @suit=:diamonds, @value=:four>
#<Card:0x007fceb8024b10 @suit=:diamonds, @value=:five>
#<Card:0x007fceb8024840 @suit=:diamonds, @value=:six>
#<Card:0x007fceb80244f8 @suit=:diamonds, @value=:seven>
#<Card:0x007fceb8024318 @suit=:diamonds, @value=:eight>
#<Card:0x007fceb8903cb8 @suit=:diamonds, @value=:nine>
#<Card:0x007fceb89034e8 @suit=:diamonds, @value=:ten>
#<Card:0x007fceb8902458 @suit=:diamonds, @value=:jack>
#<Card:0x007fceb88fbf18 @suit=:diamonds, @value=:queen>
#<Card:0x007fceb88fa050 @suit=:diamonds, @value=:king>
#<Card:0x007fceb88f8638 @suit=:diamonds, @value=:ace>
#<Card:0x007fceb9033e20 @suit=:hearts, @value=:deuce>
#<Card:0x007fceb9033380 @suit=:hearts, @value=:three>
#<Card:0x007fceb9032bb0 @suit=:hearts, @value=:four>
#<Card:0x007fceb9032228 @suit=:hearts, @value=:five>
#<Card:0x007fceb9031198 @suit=:hearts, @value=:six>
#<Card:0x007fceb9030400 @suit=:hearts, @value=:seven>
#<Card:0x007fceb902b7c0 @suit=:hearts, @value=:eight>
#<Card:0x007fceb9029308 @suit=:hearts, @value=:nine>
#<Card:0x007fceb901bcf8 @suit=:hearts, @value=:ten>
#<Card:0x007fceb901afb0 @suit=:hearts, @value=:jack>
#<Card:0x007fceb901a948 @suit=:hearts, @value=:queen>
#<Card:0x007fceb901a038 @suit=:hearts, @value=:king>
#<Card:0x007fceb9018df0 @suit=:hearts, @value=:ace>
#<Card:0x007fceb88f3980 @suit=:spades, @value=:deuce>
#<Card:0x007fceb88f34a8 @suit=:spades, @value=:three>
#<Card:0x007fceb88f2d00 @suit=:spades, @value=:four>
#<Card:0x007fceb88f2738 @suit=:spades, @value=:five>
#<Card:0x007fceb88eb988 @suit=:spades, @value=:six>
#<Card:0x007fceb88eb348 @suit=:spades, @value=:seven>
#<Card:0x007fceb88eac18 @suit=:spades, @value=:eight>
#<Card:0x007fceb88ea538 @suit=:spades, @value=:nine>
#<Card:0x007fceb88e9ac0 @suit=:spades, @value=:ten>
#<Card:0x007fceb88e91d8 @suit=:spades, @value=:jack>
#<Card:0x007fceb88e8cb0 @suit=:spades, @value=:queen>
#<Card:0x007fceb88e8198 @suit=:spades, @value=:king>
#<Card:0x007fceb8807968 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fe75c49e9a8 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fe75c49e9a8 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fe75c49360c @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe75c49360c @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fceb90773f0 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fceb8815a18 @suit=:spades, @value=:deuce>, #<Card:0x007fceb8815978 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fceb880e588 @suit=:spades, @value=:ten>, #<Card:0x007fceb880e470 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fceb8a0b340 @suit=:spades, @value=:ace>, #<Card:0x007fceb8a0b2a0 @suit=:spades, @value=:ten>, #<Card:0x007fceb8a0b200 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe75c520c14 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe75c520c14 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fceb8b411d8 @suit=:spades, @value=:deuce>, #<Card:0x007fceb8b410c0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fceb8b411d8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fceb8b410c0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fe75c5914f0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe75c5914f0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fceb8b19110 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fceb8b19110 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02869 seconds (files took 0.09509 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:08 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007ff9b8848708 @suit=:clubs, @value=:deuce>
#<Card:0x007ff9b8848258 @suit=:clubs, @value=:three>
#<Card:0x007ff9b8843fa0 @suit=:clubs, @value=:four>
#<Card:0x007ff9b8843c08 @suit=:clubs, @value=:five>
#<Card:0x007ff9b8843960 @suit=:clubs, @value=:six>
#<Card:0x007ff9b8843668 @suit=:clubs, @value=:seven>
#<Card:0x007ff9b88431b8 @suit=:clubs, @value=:eight>
#<Card:0x007ff9b8842c68 @suit=:clubs, @value=:nine>
#<Card:0x007ff9b88427b8 @suit=:clubs, @value=:ten>
#<Card:0x007ff9b88422e0 @suit=:clubs, @value=:jack>
#<Card:0x007ff9b8841cc8 @suit=:clubs, @value=:queen>
#<Card:0x007ff9b88416b0 @suit=:clubs, @value=:king>
#<Card:0x007ff9b8841188 @suit=:clubs, @value=:ace>
#<Card:0x007ff9b8840aa8 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff9b88405d0 @suit=:diamonds, @value=:three>
#<Card:0x007ff9b8840120 @suit=:diamonds, @value=:four>
#<Card:0x007ff9b883b9b8 @suit=:diamonds, @value=:five>
#<Card:0x007ff9b883b148 @suit=:diamonds, @value=:six>
#<Card:0x007ff9b883a888 @suit=:diamonds, @value=:seven>
#<Card:0x007ff9b883a158 @suit=:diamonds, @value=:eight>
#<Card:0x007ff9b8838cb8 @suit=:diamonds, @value=:nine>
#<Card:0x007ff9b88383a8 @suit=:diamonds, @value=:ten>
#<Card:0x007ff9b8833ba0 @suit=:diamonds, @value=:jack>
#<Card:0x007ff9b8833448 @suit=:diamonds, @value=:queen>
#<Card:0x007ff9b8833128 @suit=:diamonds, @value=:king>
#<Card:0x007ff9b8832d68 @suit=:diamonds, @value=:ace>
#<Card:0x007ff9b8832700 @suit=:hearts, @value=:deuce>
#<Card:0x007ff9b8832278 @suit=:hearts, @value=:three>
#<Card:0x007ff9b8831fa8 @suit=:hearts, @value=:four>
#<Card:0x007ff9b8831c10 @suit=:hearts, @value=:five>
#<Card:0x007ff9b88318a0 @suit=:hearts, @value=:six>
#<Card:0x007ff9b8831440 @suit=:hearts, @value=:seven>
#<Card:0x007ff9b8830fe0 @suit=:hearts, @value=:eight>
#<Card:0x007ff9b8830928 @suit=:hearts, @value=:nine>
#<Card:0x007ff9b8830568 @suit=:hearts, @value=:ten>
#<Card:0x007ff9b88301a8 @suit=:hearts, @value=:jack>
#<Card:0x007ff9b881fb00 @suit=:hearts, @value=:queen>
#<Card:0x007ff9b881f2b8 @suit=:hearts, @value=:king>
#<Card:0x007ff9b881ea20 @suit=:hearts, @value=:ace>
#<Card:0x007ff9b881e070 @suit=:spades, @value=:deuce>
#<Card:0x007ff9b881d940 @suit=:spades, @value=:three>
#<Card:0x007ff9b881d120 @suit=:spades, @value=:four>
#<Card:0x007ff9b881c9a0 @suit=:spades, @value=:five>
#<Card:0x007ff9b881c590 @suit=:spades, @value=:six>
#<Card:0x007ff9b881c158 @suit=:spades, @value=:seven>
#<Card:0x007ff9b88178b0 @suit=:spades, @value=:eight>
#<Card:0x007ff9b88171d0 @suit=:spades, @value=:nine>
#<Card:0x007ff9b8816910 @suit=:spades, @value=:ten>
#<Card:0x007ff9b88162a8 @suit=:spades, @value=:jack>
#<Card:0x007ff9b8815c68 @suit=:spades, @value=:queen>
#<Card:0x007ff9b8815740 @suit=:spades, @value=:king>
#<Card:0x007ff9b88153a8 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007ff9b880ced8 @suit=:clubs, @value=:deuce>
#<Card:0x007ff9b880c578 @suit=:clubs, @value=:three>
#<Card:0x007ff9b8807d98 @suit=:clubs, @value=:four>
#<Card:0x007ff9b8807a28 @suit=:clubs, @value=:five>
#<Card:0x007ff9b8807730 @suit=:clubs, @value=:six>
#<Card:0x007ff9b8807438 @suit=:clubs, @value=:seven>
#<Card:0x007ff9b8807050 @suit=:clubs, @value=:eight>
#<Card:0x007ff9b8806c68 @suit=:clubs, @value=:nine>
#<Card:0x007ff9b8806880 @suit=:clubs, @value=:ten>
#<Card:0x007ff9b88061f0 @suit=:clubs, @value=:jack>
#<Card:0x007ff9b8805e80 @suit=:clubs, @value=:queen>
#<Card:0x007ff9b8805a98 @suit=:clubs, @value=:king>
#<Card:0x007ff9b8805778 @suit=:clubs, @value=:ace>
#<Card:0x007ff9b88052f0 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff9b8804f80 @suit=:diamonds, @value=:three>
#<Card:0x007ff9b8804be8 @suit=:diamonds, @value=:four>
#<Card:0x007ff9b88048f0 @suit=:diamonds, @value=:five>
#<Card:0x007ff9b8804620 @suit=:diamonds, @value=:six>
#<Card:0x007ff9b88041c0 @suit=:diamonds, @value=:seven>
#<Card:0x007ff9b8807cd0 @suit=:diamonds, @value=:eight>
#<Card:0x007ff9b800bc20 @suit=:diamonds, @value=:nine>
#<Card:0x007ff9b800b900 @suit=:diamonds, @value=:ten>
#<Card:0x007ff9b800b6f8 @suit=:diamonds, @value=:jack>
#<Card:0x007ff9b800b478 @suit=:diamonds, @value=:queen>
#<Card:0x007ff9b800b0b8 @suit=:diamonds, @value=:king>
#<Card:0x007ff9b800ade8 @suit=:diamonds, @value=:ace>
#<Card:0x007ff9b800aa50 @suit=:hearts, @value=:deuce>
#<Card:0x007ff9b800a5a0 @suit=:hearts, @value=:three>
#<Card:0x007ff9b800a1e0 @suit=:hearts, @value=:four>
#<Card:0x007ff9b8009e98 @suit=:hearts, @value=:five>
#<Card:0x007ff9b8009b50 @suit=:hearts, @value=:six>
#<Card:0x007ff9b8009920 @suit=:hearts, @value=:seven>
#<Card:0x007ff9b8009740 @suit=:hearts, @value=:eight>
#<Card:0x007ff9b8009588 @suit=:hearts, @value=:nine>
#<Card:0x007ff9b80093a8 @suit=:hearts, @value=:ten>
#<Card:0x007ff9b80091f0 @suit=:hearts, @value=:jack>
#<Card:0x007ff9b8008f20 @suit=:hearts, @value=:queen>
#<Card:0x007ff9b8008ca0 @suit=:hearts, @value=:king>
#<Card:0x007ff9b80089f8 @suit=:hearts, @value=:ace>
#<Card:0x007ff9b80084a8 @suit=:spades, @value=:deuce>
#<Card:0x007ff9b800be28 @suit=:spades, @value=:three>
#<Card:0x007ff9b7103890 @suit=:spades, @value=:four>
#<Card:0x007ff9b7103098 @suit=:spades, @value=:five>
#<Card:0x007ff9b71029e0 @suit=:spades, @value=:six>
#<Card:0x007ff9b71023c8 @suit=:spades, @value=:seven>
#<Card:0x007ff9b7101ec8 @suit=:spades, @value=:eight>
#<Card:0x007ff9b7101860 @suit=:spades, @value=:nine>
#<Card:0x007ff9b7100e10 @suit=:spades, @value=:ten>
#<Card:0x007ff9b7100a50 @suit=:spades, @value=:jack>
#<Card:0x007ff9b71003e8 @suit=:spades, @value=:queen>
#<Card:0x007ff9b8003a20 @suit=:spades, @value=:king>
#<Card:0x007ff9b8003430 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007ff9b78b3180 @suit=:clubs, @value=:deuce>
#<Card:0x007ff9b78b2f28 @suit=:clubs, @value=:three>
#<Card:0x007ff9b78b2cd0 @suit=:clubs, @value=:four>
#<Card:0x007ff9b78b2aa0 @suit=:clubs, @value=:five>
#<Card:0x007ff9b78b27d0 @suit=:clubs, @value=:six>
#<Card:0x007ff9b78b25a0 @suit=:clubs, @value=:seven>
#<Card:0x007ff9b78b21b8 @suit=:clubs, @value=:eight>
#<Card:0x007ff9b78b1e48 @suit=:clubs, @value=:nine>
#<Card:0x007ff9b78b1ab0 @suit=:clubs, @value=:ten>
#<Card:0x007ff9b78b1768 @suit=:clubs, @value=:jack>
#<Card:0x007ff9b78b12b8 @suit=:clubs, @value=:queen>
#<Card:0x007ff9b78b1060 @suit=:clubs, @value=:king>
#<Card:0x007ff9b78b0cc8 @suit=:clubs, @value=:ace>
#<Card:0x007ff9b78b0890 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff9b78b0570 @suit=:diamonds, @value=:three>
#<Card:0x007ff9b78b0160 @suit=:diamonds, @value=:four>
#<Card:0x007ff9b78abc50 @suit=:diamonds, @value=:five>
#<Card:0x007ff9b78aad00 @suit=:diamonds, @value=:six>
#<Card:0x007ff9b784bdf0 @suit=:diamonds, @value=:seven>
#<Card:0x007ff9b784a720 @suit=:diamonds, @value=:eight>
#<Card:0x007ff9b7848150 @suit=:diamonds, @value=:nine>
#<Card:0x007ff9b782bc80 @suit=:diamonds, @value=:ten>
#<Card:0x007ff9b782b4b0 @suit=:diamonds, @value=:jack>
#<Card:0x007ff9b782a790 @suit=:diamonds, @value=:queen>
#<Card:0x007ff9b782a010 @suit=:diamonds, @value=:king>
#<Card:0x007ff9b7829390 @suit=:diamonds, @value=:ace>
#<Card:0x007ff9b7828b98 @suit=:hearts, @value=:deuce>
#<Card:0x007ff9b7828378 @suit=:hearts, @value=:three>
#<Card:0x007ff9b7822a68 @suit=:hearts, @value=:four>
#<Card:0x007ff9b78219d8 @suit=:hearts, @value=:five>
#<Card:0x007ff9b7813f40 @suit=:hearts, @value=:six>
#<Card:0x007ff9b7812f50 @suit=:hearts, @value=:seven>
#<Card:0x007ff9b7812a28 @suit=:hearts, @value=:eight>
#<Card:0x007ff9b7812488 @suit=:hearts, @value=:nine>
#<Card:0x007ff9b7811790 @suit=:hearts, @value=:ten>
#<Card:0x007ff9b78a3be0 @suit=:hearts, @value=:jack>
#<Card:0x007ff9b78a37d0 @suit=:hearts, @value=:queen>
#<Card:0x007ff9b78a3320 @suit=:hearts, @value=:king>
#<Card:0x007ff9b78a2c90 @suit=:hearts, @value=:ace>
#<Card:0x007ff9b78a2768 @suit=:spades, @value=:deuce>
#<Card:0x007ff9b78a0d50 @suit=:spades, @value=:three>
#<Card:0x007ff9b78a0760 @suit=:spades, @value=:four>
#<Card:0x007ff9b78a0080 @suit=:spades, @value=:five>
#<Card:0x007ff9b789b760 @suit=:spades, @value=:six>
#<Card:0x007ff9b789a6d0 @suit=:spades, @value=:seven>
#<Card:0x007ff9b7899fc8 @suit=:spades, @value=:eight>
#<Card:0x007ff9b7899b90 @suit=:spades, @value=:nine>
#<Card:0x007ff9b7899848 @suit=:spades, @value=:ten>
#<Card:0x007ff9b7898b00 @suit=:spades, @value=:jack>
#<Card:0x007ff9b7898790 @suit=:spades, @value=:queen>
#<Card:0x007ff9b78981f0 @suit=:spades, @value=:king>
#<Card:0x007ff9b7893e98 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ffcdbc69c84 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ffcdbc69c84 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ffcdbc6065c @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ffcdbc6065c @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007ff9b7873198 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007ff9b702e370 @suit=:spades, @value=:deuce>, #<Card:0x007ff9b702e280 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007ff9b7026580 @suit=:spades, @value=:ten>, #<Card:0x007ff9b70263f0 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007ff9b72132f8 @suit=:spades, @value=:ace>, #<Card:0x007ff9b7213258 @suit=:spades, @value=:ten>, #<Card:0x007ff9b72131b8 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ffcdbd1cc08 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ffcdbd1cc08 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ff9b7bc9130 @suit=:spades, @value=:deuce>, #<Card:0x007ff9b7bc9040 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ff9b7bc9130 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ff9b7bc9040 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ffcdb9654ac @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ffcdb9654ac @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ff9b72c0f70 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ff9b72c0f70 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.03233 seconds (files took 0.09787 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:08 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fbd559f4268 @suit=:clubs, @value=:deuce>
#<Card:0x007fbd559efee8 @suit=:clubs, @value=:three>
#<Card:0x007fbd559efbc8 @suit=:clubs, @value=:four>
#<Card:0x007fbd559ef8d0 @suit=:clubs, @value=:five>
#<Card:0x007fbd559ef5d8 @suit=:clubs, @value=:six>
#<Card:0x007fbd559ef1a0 @suit=:clubs, @value=:seven>
#<Card:0x007fbd559eec28 @suit=:clubs, @value=:eight>
#<Card:0x007fbd559ee7a0 @suit=:clubs, @value=:nine>
#<Card:0x007fbd559ee228 @suit=:clubs, @value=:ten>
#<Card:0x007fbd559edbe8 @suit=:clubs, @value=:jack>
#<Card:0x007fbd559ed5a8 @suit=:clubs, @value=:queen>
#<Card:0x007fbd559ecfb8 @suit=:clubs, @value=:king>
#<Card:0x007fbd559ec9c8 @suit=:clubs, @value=:ace>
#<Card:0x007fbd559ec400 @suit=:diamonds, @value=:deuce>
#<Card:0x007fbd559ec040 @suit=:diamonds, @value=:three>
#<Card:0x007fbd559e78b0 @suit=:diamonds, @value=:four>
#<Card:0x007fbd559e7040 @suit=:diamonds, @value=:five>
#<Card:0x007fbd559e6618 @suit=:diamonds, @value=:six>
#<Card:0x007fbd559e5d80 @suit=:diamonds, @value=:seven>
#<Card:0x007fbd559e4700 @suit=:diamonds, @value=:eight>
#<Card:0x007fbd559dff98 @suit=:diamonds, @value=:nine>
#<Card:0x007fbd559df818 @suit=:diamonds, @value=:ten>
#<Card:0x007fbd559df278 @suit=:diamonds, @value=:jack>
#<Card:0x007fbd559deeb8 @suit=:diamonds, @value=:queen>
#<Card:0x007fbd559deaf8 @suit=:diamonds, @value=:king>
#<Card:0x007fbd559de558 @suit=:diamonds, @value=:ace>
#<Card:0x007fbd559de058 @suit=:hearts, @value=:deuce>
#<Card:0x007fbd559ddc98 @suit=:hearts, @value=:three>
#<Card:0x007fbd559dd950 @suit=:hearts, @value=:four>
#<Card:0x007fbd559dd540 @suit=:hearts, @value=:five>
#<Card:0x007fbd559dd090 @suit=:hearts, @value=:six>
#<Card:0x007fbd559dcc80 @suit=:hearts, @value=:seven>
#<Card:0x007fbd559dc5c8 @suit=:hearts, @value=:eight>
#<Card:0x007fbd559dc258 @suit=:hearts, @value=:nine>
#<Card:0x007fbd559d3db0 @suit=:hearts, @value=:ten>
#<Card:0x007fbd559d3428 @suit=:hearts, @value=:jack>
#<Card:0x007fbd559d2bb8 @suit=:hearts, @value=:queen>
#<Card:0x007fbd559d2370 @suit=:hearts, @value=:king>
#<Card:0x007fbd559d1ba0 @suit=:hearts, @value=:ace>
#<Card:0x007fbd559d1330 @suit=:spades, @value=:deuce>
#<Card:0x007fbd559d0d40 @suit=:spades, @value=:three>
#<Card:0x007fbd559d0778 @suit=:spades, @value=:four>
#<Card:0x007fbd559d0390 @suit=:spades, @value=:five>
#<Card:0x007fbd559cbe80 @suit=:spades, @value=:six>
#<Card:0x007fbd559cb3b8 @suit=:spades, @value=:seven>
#<Card:0x007fbd559ca8f0 @suit=:spades, @value=:eight>
#<Card:0x007fbd559ca418 @suit=:spades, @value=:nine>
#<Card:0x007fbd559ca008 @suit=:spades, @value=:ten>
#<Card:0x007fbd559c9978 @suit=:spades, @value=:jack>
#<Card:0x007fbd559c94c8 @suit=:spades, @value=:queen>
#<Card:0x007fbd559c8ff0 @suit=:spades, @value=:king>
#<Card:0x007fbd559c88e8 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fbd559bbee0 @suit=:clubs, @value=:deuce>
#<Card:0x007fbd559bbcb0 @suit=:clubs, @value=:three>
#<Card:0x007fbd559bb8f0 @suit=:clubs, @value=:four>
#<Card:0x007fbd559bb698 @suit=:clubs, @value=:five>
#<Card:0x007fbd559bb238 @suit=:clubs, @value=:six>
#<Card:0x007fbd559baea0 @suit=:clubs, @value=:seven>
#<Card:0x007fbd559bab30 @suit=:clubs, @value=:eight>
#<Card:0x007fbd559ba590 @suit=:clubs, @value=:nine>
#<Card:0x007fbd559ba090 @suit=:clubs, @value=:ten>
#<Card:0x007fbd559b9b68 @suit=:clubs, @value=:jack>
#<Card:0x007fbd559b97f8 @suit=:clubs, @value=:queen>
#<Card:0x007fbd559b94d8 @suit=:clubs, @value=:king>
#<Card:0x007fbd559b90f0 @suit=:clubs, @value=:ace>
#<Card:0x007fbd559b8cb8 @suit=:diamonds, @value=:deuce>
#<Card:0x007fbd559b8948 @suit=:diamonds, @value=:three>
#<Card:0x007fbd559b8678 @suit=:diamonds, @value=:four>
#<Card:0x007fbd559b82e0 @suit=:diamonds, @value=:five>
#<Card:0x007fbd559b8038 @suit=:diamonds, @value=:six>
#<Card:0x007fbd559b3e48 @suit=:diamonds, @value=:seven>
#<Card:0x007fbd559b3b78 @suit=:diamonds, @value=:eight>
#<Card:0x007fbd559b38a8 @suit=:diamonds, @value=:nine>
#<Card:0x007fbd559b3650 @suit=:diamonds, @value=:ten>
#<Card:0x007fbd559b3330 @suit=:diamonds, @value=:jack>
#<Card:0x007fbd559b2f48 @suit=:diamonds, @value=:queen>
#<Card:0x007fbd559b2c28 @suit=:diamonds, @value=:king>
#<Card:0x007fbd559b2688 @suit=:diamonds, @value=:ace>
#<Card:0x007fbd559b2390 @suit=:hearts, @value=:deuce>
#<Card:0x007fbd559b1ff8 @suit=:hearts, @value=:three>
#<Card:0x007fbd559b1cd8 @suit=:hearts, @value=:four>
#<Card:0x007fbd559b1a08 @suit=:hearts, @value=:five>
#<Card:0x007fbd559b17b0 @suit=:hearts, @value=:six>
#<Card:0x007fbd559b15f8 @suit=:hearts, @value=:seven>
#<Card:0x007fbd559b1440 @suit=:hearts, @value=:eight>
#<Card:0x007fbd559b1260 @suit=:hearts, @value=:nine>
#<Card:0x007fbd559b0f90 @suit=:hearts, @value=:ten>
#<Card:0x007fbd559b0dd8 @suit=:hearts, @value=:jack>
#<Card:0x007fbd559b0ab8 @suit=:hearts, @value=:queen>
#<Card:0x007fbd559b06d0 @suit=:hearts, @value=:king>
#<Card:0x007fbd559b0158 @suit=:hearts, @value=:ace>
#<Card:0x007fbd559abc20 @suit=:spades, @value=:deuce>
#<Card:0x007fbd559ab360 @suit=:spades, @value=:three>
#<Card:0x007fbd559aae38 @suit=:spades, @value=:four>
#<Card:0x007fbd559aa780 @suit=:spades, @value=:five>
#<Card:0x007fbd559aa050 @suit=:spades, @value=:six>
#<Card:0x007fbd559a9c18 @suit=:spades, @value=:seven>
#<Card:0x007fbd559a95d8 @suit=:spades, @value=:eight>
#<Card:0x007fbd559a8e58 @suit=:spades, @value=:nine>
#<Card:0x007fbd559a8b60 @suit=:spades, @value=:ten>
#<Card:0x007fbd559a8660 @suit=:spades, @value=:jack>
#<Card:0x007fbd559a3c28 @suit=:spades, @value=:queen>
#<Card:0x007fbd559a3930 @suit=:spades, @value=:king>
#<Card:0x007fbd559a3638 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fbd5593b330 @suit=:clubs, @value=:deuce>
#<Card:0x007fbd5593b010 @suit=:clubs, @value=:three>
#<Card:0x007fbd5593ad68 @suit=:clubs, @value=:four>
#<Card:0x007fbd5593ab60 @suit=:clubs, @value=:five>
#<Card:0x007fbd5593a9a8 @suit=:clubs, @value=:six>
#<Card:0x007fbd5593a778 @suit=:clubs, @value=:seven>
#<Card:0x007fbd5593a3e0 @suit=:clubs, @value=:eight>
#<Card:0x007fbd55939fd0 @suit=:clubs, @value=:nine>
#<Card:0x007fbd55939d00 @suit=:clubs, @value=:ten>
#<Card:0x007fbd55939968 @suit=:clubs, @value=:jack>
#<Card:0x007fbd55939490 @suit=:clubs, @value=:queen>
#<Card:0x007fbd559391c0 @suit=:clubs, @value=:king>
#<Card:0x007fbd55938f18 @suit=:clubs, @value=:ace>
#<Card:0x007fbd55938b80 @suit=:diamonds, @value=:deuce>
#<Card:0x007fbd559388d8 @suit=:diamonds, @value=:three>
#<Card:0x007fbd559384f0 @suit=:diamonds, @value=:four>
#<Card:0x007fbd559381a8 @suit=:diamonds, @value=:five>
#<Card:0x007fbd5599bf00 @suit=:diamonds, @value=:six>
#<Card:0x007fbd5599b910 @suit=:diamonds, @value=:seven>
#<Card:0x007fbd5599b140 @suit=:diamonds, @value=:eight>
#<Card:0x007fbd55937b40 @suit=:diamonds, @value=:nine>
#<Card:0x007fbd55936308 @suit=:diamonds, @value=:ten>
#<Card:0x007fbd55922538 @suit=:diamonds, @value=:jack>
#<Card:0x007fbd5591b9e0 @suit=:diamonds, @value=:queen>
#<Card:0x007fbd5591b058 @suit=:diamonds, @value=:king>
#<Card:0x007fbd5591a7c0 @suit=:diamonds, @value=:ace>
#<Card:0x007fbd55919eb0 @suit=:hearts, @value=:deuce>
#<Card:0x007fbd55918d80 @suit=:hearts, @value=:three>
#<Card:0x007fbd55918330 @suit=:hearts, @value=:four>
#<Card:0x007fbd55913790 @suit=:hearts, @value=:five>
#<Card:0x007fbd559115d0 @suit=:hearts, @value=:six>
#<Card:0x007fbd55903e58 @suit=:hearts, @value=:seven>
#<Card:0x007fbd55903110 @suit=:hearts, @value=:eight>
#<Card:0x007fbd55902828 @suit=:hearts, @value=:nine>
#<Card:0x007fbd55902238 @suit=:hearts, @value=:ten>
#<Card:0x007fbd55901400 @suit=:hearts, @value=:jack>
#<Card:0x007fbd55993ad0 @suit=:hearts, @value=:queen>
#<Card:0x007fbd55993738 @suit=:hearts, @value=:king>
#<Card:0x007fbd55993260 @suit=:hearts, @value=:ace>
#<Card:0x007fbd55992ba8 @suit=:spades, @value=:deuce>
#<Card:0x007fbd55992680 @suit=:spades, @value=:three>
#<Card:0x007fbd559908a8 @suit=:spades, @value=:four>
#<Card:0x007fbd559903d0 @suit=:spades, @value=:five>
#<Card:0x007fbd5598b998 @suit=:spades, @value=:six>
#<Card:0x007fbd5598a778 @suit=:spades, @value=:seven>
#<Card:0x007fbd5598a138 @suit=:spades, @value=:eight>
#<Card:0x007fbd55989be8 @suit=:spades, @value=:nine>
#<Card:0x007fbd55989878 @suit=:spades, @value=:ten>
#<Card:0x007fbd55988ab8 @suit=:spades, @value=:jack>
#<Card:0x007fbd559887e8 @suit=:spades, @value=:queen>
#<Card:0x007fbd55988158 @suit=:spades, @value=:king>
#<Card:0x007fbd55983e28 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fdeaad3fb58 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fdeaad3fb58 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fdeaad363dc @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdeaad363dc @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fbd55962fe8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fbd5582e050 @suit=:spades, @value=:deuce>, #<Card:0x007fbd5582df38 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fbd55825f40 @suit=:spades, @value=:ten>, #<Card:0x007fbd55825d10 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fbd5711b248 @suit=:spades, @value=:ace>, #<Card:0x007fbd5711b1a8 @suit=:spades, @value=:ten>, #<Card:0x007fbd5711b108 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fdeab8a4bb0 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fdeab8a4bb0 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fbd57290f60 @suit=:spades, @value=:deuce>, #<Card:0x007fbd57290e48 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fbd57290f60 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fbd57290e48 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fdeab9393a0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdeab9393a0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fbd57268d80 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fbd57268d80 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02924 seconds (files took 0.09149 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:15 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007fb597871848 @suit=:clubs, @value=:deuce>
#<Card:0x007fb597870c18 @suit=:clubs, @value=:three>
#<Card:0x007fb597870998 @suit=:clubs, @value=:four>
#<Card:0x007fb597870678 @suit=:clubs, @value=:five>
#<Card:0x007fb5978703d0 @suit=:clubs, @value=:six>
#<Card:0x007fb597870100 @suit=:clubs, @value=:seven>
#<Card:0x007fb59786bda8 @suit=:clubs, @value=:eight>
#<Card:0x007fb59786ba38 @suit=:clubs, @value=:nine>
#<Card:0x007fb59786b6f0 @suit=:clubs, @value=:ten>
#<Card:0x007fb59786b1a0 @suit=:clubs, @value=:jack>
#<Card:0x007fb59786ad68 @suit=:clubs, @value=:queen>
#<Card:0x007fb59786a9a8 @suit=:clubs, @value=:king>
#<Card:0x007fb59786a3b8 @suit=:clubs, @value=:ace>
#<Card:0x007fb597869f80 @suit=:diamonds, @value=:deuce>
#<Card:0x007fb597869940 @suit=:diamonds, @value=:three>
#<Card:0x007fb5978692d8 @suit=:diamonds, @value=:four>
#<Card:0x007fb597868e00 @suit=:diamonds, @value=:five>
#<Card:0x007fb597868810 @suit=:diamonds, @value=:six>
#<Card:0x007fb597868450 @suit=:diamonds, @value=:seven>
#<Card:0x007fb597863ef0 @suit=:diamonds, @value=:eight>
#<Card:0x007fb597863928 @suit=:diamonds, @value=:nine>
#<Card:0x007fb597863158 @suit=:diamonds, @value=:ten>
#<Card:0x007fb597862be0 @suit=:diamonds, @value=:jack>
#<Card:0x007fb597862370 @suit=:diamonds, @value=:queen>
#<Card:0x007fb597861bc8 @suit=:diamonds, @value=:king>
#<Card:0x007fb5978615d8 @suit=:diamonds, @value=:ace>
#<Card:0x007fb597860cf0 @suit=:hearts, @value=:deuce>
#<Card:0x007fb59785bb88 @suit=:hearts, @value=:three>
#<Card:0x007fb59785b6b0 @suit=:hearts, @value=:four>
#<Card:0x007fb59785b318 @suit=:hearts, @value=:five>
#<Card:0x007fb59785ae68 @suit=:hearts, @value=:six>
#<Card:0x007fb59785abc0 @suit=:hearts, @value=:seven>
#<Card:0x007fb59785a670 @suit=:hearts, @value=:eight>
#<Card:0x007fb59785a300 @suit=:hearts, @value=:nine>
#<Card:0x007fb597859fb8 @suit=:hearts, @value=:ten>
#<Card:0x007fb597859d10 @suit=:hearts, @value=:jack>
#<Card:0x007fb597859978 @suit=:hearts, @value=:queen>
#<Card:0x007fb597859630 @suit=:hearts, @value=:king>
#<Card:0x007fb597859360 @suit=:hearts, @value=:ace>
#<Card:0x007fb597858be0 @suit=:spades, @value=:deuce>
#<Card:0x007fb597858668 @suit=:spades, @value=:three>
#<Card:0x007fb597858118 @suit=:spades, @value=:four>
#<Card:0x007fb59784b738 @suit=:spades, @value=:five>
#<Card:0x007fb59784afe0 @suit=:spades, @value=:six>
#<Card:0x007fb59784a4f0 @suit=:spades, @value=:seven>
#<Card:0x007fb597849b18 @suit=:spades, @value=:eight>
#<Card:0x007fb597849320 @suit=:spades, @value=:nine>
#<Card:0x007fb597848d08 @suit=:spades, @value=:ten>
#<Card:0x007fb5978487b8 @suit=:spades, @value=:jack>
#<Card:0x007fb5978483a8 @suit=:spades, @value=:queen>
#<Card:0x007fb597843e20 @suit=:spades, @value=:king>
#<Card:0x007fb5978437b8 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007fb59783ba90 @suit=:clubs, @value=:deuce>
#<Card:0x007fb59783b360 @suit=:clubs, @value=:three>
#<Card:0x007fb59783aca8 @suit=:clubs, @value=:four>
#<Card:0x007fb59783a618 @suit=:clubs, @value=:five>
#<Card:0x007fb597839f60 @suit=:clubs, @value=:six>
#<Card:0x007fb597839588 @suit=:clubs, @value=:seven>
#<Card:0x007fb597838d68 @suit=:clubs, @value=:eight>
#<Card:0x007fb597838458 @suit=:clubs, @value=:nine>
#<Card:0x007fb597833d90 @suit=:clubs, @value=:ten>
#<Card:0x007fb597833b10 @suit=:clubs, @value=:jack>
#<Card:0x007fb597833890 @suit=:clubs, @value=:queen>
#<Card:0x007fb5978335e8 @suit=:clubs, @value=:king>
#<Card:0x007fb597833318 @suit=:clubs, @value=:ace>
#<Card:0x007fb597832e90 @suit=:diamonds, @value=:deuce>
#<Card:0x007fb597832a80 @suit=:diamonds, @value=:three>
#<Card:0x007fb5978327b0 @suit=:diamonds, @value=:four>
#<Card:0x007fb597832198 @suit=:diamonds, @value=:five>
#<Card:0x007fb597831d60 @suit=:diamonds, @value=:six>
#<Card:0x007fb597831900 @suit=:diamonds, @value=:seven>
#<Card:0x007fb597831518 @suit=:diamonds, @value=:eight>
#<Card:0x007fb597831130 @suit=:diamonds, @value=:nine>
#<Card:0x007fb597830e10 @suit=:diamonds, @value=:ten>
#<Card:0x007fb5978309b0 @suit=:diamonds, @value=:jack>
#<Card:0x007fb5978305c8 @suit=:diamonds, @value=:queen>
#<Card:0x007fb597832418 @suit=:diamonds, @value=:king>
#<Card:0x007fb59782bc58 @suit=:diamonds, @value=:ace>
#<Card:0x007fb59782b870 @suit=:hearts, @value=:deuce>
#<Card:0x007fb59782b2f8 @suit=:hearts, @value=:three>
#<Card:0x007fb59782ae98 @suit=:hearts, @value=:four>
#<Card:0x007fb59782aa10 @suit=:hearts, @value=:five>
#<Card:0x007fb59782a678 @suit=:hearts, @value=:six>
#<Card:0x007fb59782a0d8 @suit=:hearts, @value=:seven>
#<Card:0x007fb597829bb0 @suit=:hearts, @value=:eight>
#<Card:0x007fb597829868 @suit=:hearts, @value=:nine>
#<Card:0x007fb5978296b0 @suit=:hearts, @value=:ten>
#<Card:0x007fb5978294f8 @suit=:hearts, @value=:jack>
#<Card:0x007fb597829318 @suit=:hearts, @value=:queen>
#<Card:0x007fb597829048 @suit=:hearts, @value=:king>
#<Card:0x007fb597828e90 @suit=:hearts, @value=:ace>
#<Card:0x007fb597828968 @suit=:spades, @value=:deuce>
#<Card:0x007fb597828080 @suit=:spades, @value=:three>
#<Card:0x007fb597823990 @suit=:spades, @value=:four>
#<Card:0x007fb597823300 @suit=:spades, @value=:five>
#<Card:0x007fb597822928 @suit=:spades, @value=:six>
#<Card:0x007fb597822248 @suit=:spades, @value=:seven>
#<Card:0x007fb597821d48 @suit=:spades, @value=:eight>
#<Card:0x007fb5978213e8 @suit=:spades, @value=:nine>
#<Card:0x007fb597821078 @suit=:spades, @value=:ten>
#<Card:0x007fb597820cb8 @suit=:spades, @value=:jack>
#<Card:0x007fb597820740 @suit=:spades, @value=:queen>
#<Card:0x007fb597820088 @suit=:spades, @value=:king>
#<Card:0x007fb59781b6c8 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007fb597818680 @suit=:clubs, @value=:deuce>
#<Card:0x007fb597818428 @suit=:clubs, @value=:three>
#<Card:0x007fb5978181f8 @suit=:clubs, @value=:four>
#<Card:0x007fb597813f90 @suit=:clubs, @value=:five>
#<Card:0x007fb597813d60 @suit=:clubs, @value=:six>
#<Card:0x007fb597813a40 @suit=:clubs, @value=:seven>
#<Card:0x007fb5978136d0 @suit=:clubs, @value=:eight>
#<Card:0x007fb597813428 @suit=:clubs, @value=:nine>
#<Card:0x007fb597813130 @suit=:clubs, @value=:ten>
#<Card:0x007fb597812ed8 @suit=:clubs, @value=:jack>
#<Card:0x007fb597812c08 @suit=:clubs, @value=:queen>
#<Card:0x007fb597812960 @suit=:clubs, @value=:king>
#<Card:0x007fb597812550 @suit=:clubs, @value=:ace>
#<Card:0x007fb597812258 @suit=:diamonds, @value=:deuce>
#<Card:0x007fb597811fb0 @suit=:diamonds, @value=:three>
#<Card:0x007fb597811c18 @suit=:diamonds, @value=:four>
#<Card:0x007fb597811650 @suit=:diamonds, @value=:five>
#<Card:0x007fb597811448 @suit=:diamonds, @value=:six>
#<Card:0x007fb5978111a0 @suit=:diamonds, @value=:seven>
#<Card:0x007fb597810f48 @suit=:diamonds, @value=:eight>
#<Card:0x007fb597810c00 @suit=:diamonds, @value=:nine>
#<Card:0x007fb597810930 @suit=:diamonds, @value=:ten>
#<Card:0x007fb597810660 @suit=:diamonds, @value=:jack>
#<Card:0x007fb597810390 @suit=:diamonds, @value=:queen>
#<Card:0x007fb597810048 @suit=:diamonds, @value=:king>
#<Card:0x007fb59780ba98 @suit=:diamonds, @value=:ace>
#<Card:0x007fb59780b4f8 @suit=:hearts, @value=:deuce>
#<Card:0x007fb59780a788 @suit=:hearts, @value=:three>
#<Card:0x007fb597808ff0 @suit=:hearts, @value=:four>
#<Card:0x007fb597803668 @suit=:hearts, @value=:five>
#<Card:0x007fb597801840 @suit=:hearts, @value=:six>
#<Card:0x007fb596922810 @suit=:hearts, @value=:seven>
#<Card:0x007fb59691b970 @suit=:hearts, @value=:eight>
#<Card:0x007fb59691ab10 @suit=:hearts, @value=:nine>
#<Card:0x007fb59691a368 @suit=:hearts, @value=:ten>
#<Card:0x007fb596918f18 @suit=:hearts, @value=:jack>
#<Card:0x007fb5969186f8 @suit=:hearts, @value=:queen>
#<Card:0x007fb5969138b0 @suit=:hearts, @value=:king>
#<Card:0x007fb596912a28 @suit=:hearts, @value=:ace>
#<Card:0x007fb596903460 @suit=:spades, @value=:deuce>
#<Card:0x007fb596902d58 @suit=:spades, @value=:three>
#<Card:0x007fb596902628 @suit=:spades, @value=:four>
#<Card:0x007fb596901ea8 @suit=:spades, @value=:five>
#<Card:0x007fb596900d50 @suit=:spades, @value=:six>
#<Card:0x007fb59701fb40 @suit=:spades, @value=:seven>
#<Card:0x007fb59701f668 @suit=:spades, @value=:eight>
#<Card:0x007fb59701ee20 @suit=:spades, @value=:nine>
#<Card:0x007fb59701e8a8 @suit=:spades, @value=:ten>
#<Card:0x007fb59701cd00 @suit=:spades, @value=:jack>
#<Card:0x007fb59701c738 @suit=:spades, @value=:queen>
#<Card:0x007fb597017990 @suit=:spades, @value=:king>
#<Card:0x007fb597017378 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fdacbc7cdac @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fdacbc7cdac @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fdacbc717a4 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdacbc717a4 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007fb596969828 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fb59682e9b8 @suit=:spades, @value=:deuce>, #<Card:0x007fb59682dcc0 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007fb5968269c0 @suit=:spades, @value=:ten>, #<Card:0x007fb596826858 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007fb596ba7338 @suit=:spades, @value=:ace>, #<Card:0x007fb596ba7298 @suit=:spades, @value=:ten>, #<Card:0x007fb596ba71f8 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fdacb5eec38 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fdacb5eec38 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fb596e2d468 @suit=:spades, @value=:deuce>, #<Card:0x007fb596e2d328 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fb596e2d468 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fb596e2d328 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fdacb7075ac @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdacb7075ac @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fb596e05418 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fb596e05418 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02822 seconds (files took 0.08488 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:15 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007f94359ce250 @suit=:clubs, @value=:deuce>
#<Card:0x007f94359cdb20 @suit=:clubs, @value=:three>
#<Card:0x007f94359cd468 @suit=:clubs, @value=:four>
#<Card:0x007f94359cca90 @suit=:clubs, @value=:five>
#<Card:0x007f94359cc5e0 @suit=:clubs, @value=:six>
#<Card:0x007f94359cc310 @suit=:clubs, @value=:seven>
#<Card:0x007f94359ccab8 @suit=:clubs, @value=:eight>
#<Card:0x007f94359c7cc0 @suit=:clubs, @value=:nine>
#<Card:0x007f94359c79c8 @suit=:clubs, @value=:ten>
#<Card:0x007f94359c7680 @suit=:clubs, @value=:jack>
#<Card:0x007f94359c7068 @suit=:clubs, @value=:queen>
#<Card:0x007f94359c6c80 @suit=:clubs, @value=:king>
#<Card:0x007f94359c6898 @suit=:clubs, @value=:ace>
#<Card:0x007f94359c6348 @suit=:diamonds, @value=:deuce>
#<Card:0x007f94359c5e70 @suit=:diamonds, @value=:three>
#<Card:0x007f94359c5858 @suit=:diamonds, @value=:four>
#<Card:0x007f94359c53a8 @suit=:diamonds, @value=:five>
#<Card:0x007f94359c4cf0 @suit=:diamonds, @value=:six>
#<Card:0x007f94359c4638 @suit=:diamonds, @value=:seven>
#<Card:0x007f94359c4110 @suit=:diamonds, @value=:eight>
#<Card:0x007f94359bfae8 @suit=:diamonds, @value=:nine>
#<Card:0x007f94359bf278 @suit=:diamonds, @value=:ten>
#<Card:0x007f94359bea80 @suit=:diamonds, @value=:jack>
#<Card:0x007f94359be210 @suit=:diamonds, @value=:queen>
#<Card:0x007f94359bd7e8 @suit=:diamonds, @value=:king>
#<Card:0x007f94359bd0e0 @suit=:diamonds, @value=:ace>
#<Card:0x007f94359b7b40 @suit=:hearts, @value=:deuce>
#<Card:0x007f94359b75a0 @suit=:hearts, @value=:three>
#<Card:0x007f94359b7230 @suit=:hearts, @value=:four>
#<Card:0x007f94359b6e20 @suit=:hearts, @value=:five>
#<Card:0x007f94359b6b78 @suit=:hearts, @value=:six>
#<Card:0x007f94359b66a0 @suit=:hearts, @value=:seven>
#<Card:0x007f94359b63a8 @suit=:hearts, @value=:eight>
#<Card:0x007f94359b5fe8 @suit=:hearts, @value=:nine>
#<Card:0x007f94359b5d18 @suit=:hearts, @value=:ten>
#<Card:0x007f94359b5908 @suit=:hearts, @value=:jack>
#<Card:0x007f94359b5610 @suit=:hearts, @value=:queen>
#<Card:0x007f94359b5390 @suit=:hearts, @value=:king>
#<Card:0x007f94359b5020 @suit=:hearts, @value=:ace>
#<Card:0x007f94359b4850 @suit=:spades, @value=:deuce>
#<Card:0x007f94359b4300 @suit=:spades, @value=:three>
#<Card:0x007f94359abe08 @suit=:spades, @value=:four>
#<Card:0x007f94359ab4d0 @suit=:spades, @value=:five>
#<Card:0x007f94359aa968 @suit=:spades, @value=:six>
#<Card:0x007f94359aa210 @suit=:spades, @value=:seven>
#<Card:0x007f94359a9a40 @suit=:spades, @value=:eight>
#<Card:0x007f94359a9310 @suit=:spades, @value=:nine>
#<Card:0x007f94359a8d48 @suit=:spades, @value=:ten>
#<Card:0x007f94359a8820 @suit=:spades, @value=:jack>
#<Card:0x007f94359a83e8 @suit=:spades, @value=:queen>
#<Card:0x007f94359a3c58 @suit=:spades, @value=:king>
#<Card:0x007f94359a3578 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007f943599b8c8 @suit=:clubs, @value=:deuce>
#<Card:0x007f943599b2b0 @suit=:clubs, @value=:three>
#<Card:0x007f943599adb0 @suit=:clubs, @value=:four>
#<Card:0x007f943599a6a8 @suit=:clubs, @value=:five>
#<Card:0x007f9435999ed8 @suit=:clubs, @value=:six>
#<Card:0x007f9435999528 @suit=:clubs, @value=:seven>
#<Card:0x007f9435998dd0 @suit=:clubs, @value=:eight>
#<Card:0x007f9435998308 @suit=:clubs, @value=:nine>
#<Card:0x007f943593bd60 @suit=:clubs, @value=:ten>
#<Card:0x007f943593ba90 @suit=:clubs, @value=:jack>
#<Card:0x007f943593b7e8 @suit=:clubs, @value=:queen>
#<Card:0x007f943593b518 @suit=:clubs, @value=:king>
#<Card:0x007f943593b220 @suit=:clubs, @value=:ace>
#<Card:0x007f943593ae60 @suit=:diamonds, @value=:deuce>
#<Card:0x007f943593aa00 @suit=:diamonds, @value=:three>
#<Card:0x007f943593a640 @suit=:diamonds, @value=:four>
#<Card:0x007f943593a168 @suit=:diamonds, @value=:five>
#<Card:0x007f9435939c90 @suit=:diamonds, @value=:six>
#<Card:0x007f94359398a8 @suit=:diamonds, @value=:seven>
#<Card:0x007f94359394e8 @suit=:diamonds, @value=:eight>
#<Card:0x007f9435939100 @suit=:diamonds, @value=:nine>
#<Card:0x007f9435938d90 @suit=:diamonds, @value=:ten>
#<Card:0x007f9435938930 @suit=:diamonds, @value=:jack>
#<Card:0x007f9435938610 @suit=:diamonds, @value=:queen>
#<Card:0x007f943593b630 @suit=:diamonds, @value=:king>
#<Card:0x007f943700bce8 @suit=:diamonds, @value=:ace>
#<Card:0x007f943700ba18 @suit=:hearts, @value=:deuce>
#<Card:0x007f943700b7c0 @suit=:hearts, @value=:three>
#<Card:0x007f943700b540 @suit=:hearts, @value=:four>
#<Card:0x007f943700b1f8 @suit=:hearts, @value=:five>
#<Card:0x007f943700af28 @suit=:hearts, @value=:six>
#<Card:0x007f943700ac08 @suit=:hearts, @value=:seven>
#<Card:0x007f943700a960 @suit=:hearts, @value=:eight>
#<Card:0x007f943700a550 @suit=:hearts, @value=:nine>
#<Card:0x007f9437009e48 @suit=:hearts, @value=:ten>
#<Card:0x007f9437009970 @suit=:hearts, @value=:jack>
#<Card:0x007f9437009790 @suit=:hearts, @value=:queen>
#<Card:0x007f94370095d8 @suit=:hearts, @value=:king>
#<Card:0x007f94370093f8 @suit=:hearts, @value=:ace>
#<Card:0x007f9437009218 @suit=:spades, @value=:deuce>
#<Card:0x007f9437008f48 @suit=:spades, @value=:three>
#<Card:0x007f9437008b60 @suit=:spades, @value=:four>
#<Card:0x007f9437008520 @suit=:spades, @value=:five>
#<Card:0x007f9437003ea8 @suit=:spades, @value=:six>
#<Card:0x007f9437003930 @suit=:spades, @value=:seven>
#<Card:0x007f9437003318 @suit=:spades, @value=:eight>
#<Card:0x007f9437002968 @suit=:spades, @value=:nine>
#<Card:0x007f94370023f0 @suit=:spades, @value=:ten>
#<Card:0x007f9437001db0 @suit=:spades, @value=:jack>
#<Card:0x007f94370016d0 @suit=:spades, @value=:queen>
#<Card:0x007f9437001090 @suit=:spades, @value=:king>
#<Card:0x007f9437000c80 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007f9436013a48 @suit=:clubs, @value=:deuce>
#<Card:0x007f94360137f0 @suit=:clubs, @value=:three>
#<Card:0x007f94360134d0 @suit=:clubs, @value=:four>
#<Card:0x007f9436013188 @suit=:clubs, @value=:five>
#<Card:0x007f9436012f30 @suit=:clubs, @value=:six>
#<Card:0x007f9436012d28 @suit=:clubs, @value=:seven>
#<Card:0x007f9436012b20 @suit=:clubs, @value=:eight>
#<Card:0x007f9436012710 @suit=:clubs, @value=:nine>
#<Card:0x007f94360123c8 @suit=:clubs, @value=:ten>
#<Card:0x007f94360120d0 @suit=:clubs, @value=:jack>
#<Card:0x007f9436011e50 @suit=:clubs, @value=:queen>
#<Card:0x007f9436011b80 @suit=:clubs, @value=:king>
#<Card:0x007f9436011590 @suit=:clubs, @value=:ace>
#<Card:0x007f9436011338 @suit=:diamonds, @value=:deuce>
#<Card:0x007f9436011018 @suit=:diamonds, @value=:three>
#<Card:0x007f9436010cf8 @suit=:diamonds, @value=:four>
#<Card:0x007f9436010960 @suit=:diamonds, @value=:five>
#<Card:0x007f94360105f0 @suit=:diamonds, @value=:six>
#<Card:0x007f94360102a8 @suit=:diamonds, @value=:seven>
#<Card:0x007f943600bb68 @suit=:diamonds, @value=:eight>
#<Card:0x007f943600a740 @suit=:diamonds, @value=:nine>
#<Card:0x007f9436003e40 @suit=:diamonds, @value=:ten>
#<Card:0x007f9436002108 @suit=:diamonds, @value=:jack>
#<Card:0x007f9436000498 @suit=:diamonds, @value=:queen>
#<Card:0x007f9435921258 @suit=:diamonds, @value=:king>
#<Card:0x007f943591b308 @suit=:diamonds, @value=:ace>
#<Card:0x007f943591aa70 @suit=:hearts, @value=:deuce>
#<Card:0x007f9435919440 @suit=:hearts, @value=:three>
#<Card:0x007f94359189f0 @suit=:hearts, @value=:four>
#<Card:0x007f9435913ea0 @suit=:hearts, @value=:five>
#<Card:0x007f9435913400 @suit=:hearts, @value=:six>
#<Card:0x007f9435912640 @suit=:hearts, @value=:seven>
#<Card:0x007f9435902fb0 @suit=:hearts, @value=:eight>
#<Card:0x007f94359027e0 @suit=:hearts, @value=:nine>
#<Card:0x007f9435901b88 @suit=:hearts, @value=:ten>
#<Card:0x007f9435900a30 @suit=:hearts, @value=:jack>
#<Card:0x007f94359939e8 @suit=:hearts, @value=:queen>
#<Card:0x007f9435993510 @suit=:hearts, @value=:king>
#<Card:0x007f9435992c00 @suit=:hearts, @value=:ace>
#<Card:0x007f94359925e8 @suit=:spades, @value=:deuce>
#<Card:0x007f943598b860 @suit=:spades, @value=:three>
#<Card:0x007f943598b1f8 @suit=:spades, @value=:four>
#<Card:0x007f943598aaa0 @suit=:spades, @value=:five>
#<Card:0x007f943598a438 @suit=:spades, @value=:six>
#<Card:0x007f9435989d08 @suit=:spades, @value=:seven>
#<Card:0x007f94359895b0 @suit=:spades, @value=:eight>
#<Card:0x007f9435988cc8 @suit=:spades, @value=:nine>
#<Card:0x007f9435988908 @suit=:spades, @value=:ten>
#<Card:0x007f9435983b88 @suit=:spades, @value=:jack>
#<Card:0x007f94359832a0 @suit=:spades, @value=:queen>
#<Card:0x007f9435981fe0 @suit=:spades, @value=:king>
#<Card:0x007f9435980a78 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fca1bc1bdc4 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fca1bc1bdc4 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fca1bc12508 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fca1bc12508 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007f9435963428 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007f943582e5d0 @suit=:spades, @value=:deuce>, #<Card:0x007f943582db30 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007f9435826790 @suit=:spades, @value=:ten>, #<Card:0x007f94358266f0 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007f9436173398 @suit=:spades, @value=:ace>, #<Card:0x007f94361732f8 @suit=:spades, @value=:ten>, #<Card:0x007f9436173258 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fca1b0d4c2c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fca1b0d4c2c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f9435ba5218 @suit=:spades, @value=:deuce>, #<Card:0x007f9435ba5128 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f9435ba5218 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f9435ba5128 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fca1b80d50c @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fca1b80d50c @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f94363d0ed8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f94363d0ed8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.04017 seconds (files took 0.08827 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:15 AM, [firstname_lastname-2]: 
PedroPreciadoIII@Your-MacBook-Pro, 09:16 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen (FAILED - 2)
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
#<Card:0x007ff2ec05c440 @suit=:clubs, @value=:deuce>
#<Card:0x007ff2ec05c0d0 @suit=:clubs, @value=:three>
#<Card:0x007ff2ec057d50 @suit=:clubs, @value=:four>
#<Card:0x007ff2ec057a30 @suit=:clubs, @value=:five>
#<Card:0x007ff2ec057760 @suit=:clubs, @value=:six>
#<Card:0x007ff2ec057300 @suit=:clubs, @value=:seven>
#<Card:0x007ff2ec056cc0 @suit=:clubs, @value=:eight>
#<Card:0x007ff2ec056978 @suit=:clubs, @value=:nine>
#<Card:0x007ff2ec056338 @suit=:clubs, @value=:ten>
#<Card:0x007ff2ec055c58 @suit=:clubs, @value=:jack>
#<Card:0x007ff2ec055758 @suit=:clubs, @value=:queen>
#<Card:0x007ff2ec055280 @suit=:clubs, @value=:king>
#<Card:0x007ff2ec054cb8 @suit=:clubs, @value=:ace>
#<Card:0x007ff2ec054678 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff2ec0541f0 @suit=:diamonds, @value=:three>
#<Card:0x007ff2ec04fce0 @suit=:diamonds, @value=:four>
#<Card:0x007ff2ec04f678 @suit=:diamonds, @value=:five>
#<Card:0x007ff2ec04f100 @suit=:diamonds, @value=:six>
#<Card:0x007ff2ec04ea98 @suit=:diamonds, @value=:seven>
#<Card:0x007ff2ec04e228 @suit=:diamonds, @value=:eight>
#<Card:0x007ff2ec04dcb0 @suit=:diamonds, @value=:nine>
#<Card:0x007ff2ec04cb58 @suit=:diamonds, @value=:ten>
#<Card:0x007ff2ec04c388 @suit=:diamonds, @value=:jack>
#<Card:0x007ff2ec047b08 @suit=:diamonds, @value=:queen>
#<Card:0x007ff2ec047568 @suit=:diamonds, @value=:king>
#<Card:0x007ff2ec047270 @suit=:diamonds, @value=:ace>
#<Card:0x007ff2ec046de8 @suit=:hearts, @value=:deuce>
#<Card:0x007ff2ec046b18 @suit=:hearts, @value=:three>
#<Card:0x007ff2ec046460 @suit=:hearts, @value=:four>
#<Card:0x007ff2ec046000 @suit=:hearts, @value=:five>
#<Card:0x007ff2ec045ba0 @suit=:hearts, @value=:six>
#<Card:0x007ff2ec045858 @suit=:hearts, @value=:seven>
#<Card:0x007ff2ec0453d0 @suit=:hearts, @value=:eight>
#<Card:0x007ff2ec044f70 @suit=:hearts, @value=:nine>
#<Card:0x007ff2ec0448b8 @suit=:hearts, @value=:ten>
#<Card:0x007ff2ec044408 @suit=:hearts, @value=:jack>
#<Card:0x007ff2ec044070 @suit=:hearts, @value=:queen>
#<Card:0x007ff2ec037898 @suit=:hearts, @value=:king>
#<Card:0x007ff2ec037028 @suit=:hearts, @value=:ace>
#<Card:0x007ff2ec036718 @suit=:spades, @value=:deuce>
#<Card:0x007ff2ec035e08 @suit=:spades, @value=:three>
#<Card:0x007ff2ec035610 @suit=:spades, @value=:four>
#<Card:0x007ff2ec034fa8 @suit=:spades, @value=:five>
#<Card:0x007ff2ec034968 @suit=:spades, @value=:six>
#<Card:0x007ff2ec034468 @suit=:spades, @value=:seven>
#<Card:0x007ff2ec034058 @suit=:spades, @value=:eight>
#<Card:0x007ff2ec02f490 @suit=:spades, @value=:nine>
#<Card:0x007ff2ec02ec70 @suit=:spades, @value=:ten>
#<Card:0x007ff2ec02e6f8 @suit=:spades, @value=:jack>
#<Card:0x007ff2ec02e2c0 @suit=:spades, @value=:queen>
#<Card:0x007ff2ec02dd20 @suit=:spades, @value=:king>
#<Card:0x007ff2ec02d780 @suit=:spades, @value=:ace>
    starts with a count of 52
#<Card:0x007ff2eb9a1010 @suit=:clubs, @value=:deuce>
#<Card:0x007ff2eb9a09a8 @suit=:clubs, @value=:three>
#<Card:0x007ff2eb99bf70 @suit=:clubs, @value=:four>
#<Card:0x007ff2eb99bca0 @suit=:clubs, @value=:five>
#<Card:0x007ff2eb99b958 @suit=:clubs, @value=:six>
#<Card:0x007ff2eb99b610 @suit=:clubs, @value=:seven>
#<Card:0x007ff2eb99b228 @suit=:clubs, @value=:eight>
#<Card:0x007ff2eb99af58 @suit=:clubs, @value=:nine>
#<Card:0x007ff2eb99aad0 @suit=:clubs, @value=:ten>
#<Card:0x007ff2eb99a620 @suit=:clubs, @value=:jack>
#<Card:0x007ff2eb99a148 @suit=:clubs, @value=:queen>
#<Card:0x007ff2eb999c48 @suit=:clubs, @value=:king>
#<Card:0x007ff2eb9998d8 @suit=:clubs, @value=:ace>
#<Card:0x007ff2eb9994c8 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff2eb999158 @suit=:diamonds, @value=:three>
#<Card:0x007ff2eb998d70 @suit=:diamonds, @value=:four>
#<Card:0x007ff2eb998ac8 @suit=:diamonds, @value=:five>
#<Card:0x007ff2eb998758 @suit=:diamonds, @value=:six>
#<Card:0x007ff2eb9983e8 @suit=:diamonds, @value=:seven>
#<Card:0x007ff2eb998140 @suit=:diamonds, @value=:eight>
#<Card:0x007ff2eb993ed8 @suit=:diamonds, @value=:nine>
#<Card:0x007ff2eb9939b0 @suit=:diamonds, @value=:ten>
#<Card:0x007ff2eb9935f0 @suit=:diamonds, @value=:jack>
#<Card:0x007ff2eb9930f0 @suit=:diamonds, @value=:queen>
#<Card:0x007ff2eb992b78 @suit=:diamonds, @value=:king>
#<Card:0x007ff2eb992448 @suit=:diamonds, @value=:ace>
#<Card:0x007ff2eb991ea8 @suit=:hearts, @value=:deuce>
#<Card:0x007ff2eb991ae8 @suit=:hearts, @value=:three>
#<Card:0x007ff2eb9917f0 @suit=:hearts, @value=:four>
#<Card:0x007ff2eb991638 @suit=:hearts, @value=:five>
#<Card:0x007ff2eb991458 @suit=:hearts, @value=:six>
#<Card:0x007ff2eb9912a0 @suit=:hearts, @value=:seven>
#<Card:0x007ff2eb990fd0 @suit=:hearts, @value=:eight>
#<Card:0x007ff2eb990d78 @suit=:hearts, @value=:nine>
#<Card:0x007ff2eb990788 @suit=:hearts, @value=:ten>
#<Card:0x007ff2eb98be68 @suit=:hearts, @value=:jack>
#<Card:0x007ff2eb98b328 @suit=:hearts, @value=:queen>
#<Card:0x007ff2eb98aa90 @suit=:hearts, @value=:king>
#<Card:0x007ff2eb98a1f8 @suit=:hearts, @value=:ace>
#<Card:0x007ff2eb989ac8 @suit=:spades, @value=:deuce>
#<Card:0x007ff2eb989118 @suit=:spades, @value=:three>
#<Card:0x007ff2eb988d30 @suit=:spades, @value=:four>
#<Card:0x007ff2eb988998 @suit=:spades, @value=:five>
#<Card:0x007ff2eb983da8 @suit=:spades, @value=:six>
#<Card:0x007ff2eb983a88 @suit=:spades, @value=:seven>
#<Card:0x007ff2eb983790 @suit=:spades, @value=:eight>
#<Card:0x007ff2eb983538 @suit=:spades, @value=:nine>
#<Card:0x007ff2eb983038 @suit=:spades, @value=:ten>
#<Card:0x007ff2eb982e30 @suit=:spades, @value=:jack>
#<Card:0x007ff2eb982c28 @suit=:spades, @value=:queen>
#<Card:0x007ff2eb9829f8 @suit=:spades, @value=:king>
#<Card:0x007ff2eb982750 @suit=:spades, @value=:ace>
    returns all cards without duplicates (FAILED - 8)
  #initialize
#<Card:0x007ff2eb97b978 @suit=:clubs, @value=:deuce>
#<Card:0x007ff2eb97b680 @suit=:clubs, @value=:three>
#<Card:0x007ff2eb97b400 @suit=:clubs, @value=:four>
#<Card:0x007ff2eb97b090 @suit=:clubs, @value=:five>
#<Card:0x007ff2eb97ae88 @suit=:clubs, @value=:six>
#<Card:0x007ff2eb97acd0 @suit=:clubs, @value=:seven>
#<Card:0x007ff2eb97aaa0 @suit=:clubs, @value=:eight>
#<Card:0x007ff2eb97a898 @suit=:clubs, @value=:nine>
#<Card:0x007ff2eb97a460 @suit=:clubs, @value=:ten>
#<Card:0x007ff2eb97a050 @suit=:clubs, @value=:jack>
#<Card:0x007ff2eb979d80 @suit=:clubs, @value=:queen>
#<Card:0x007ff2eb979948 @suit=:clubs, @value=:king>
#<Card:0x007ff2eb979538 @suit=:clubs, @value=:ace>
#<Card:0x007ff2eb9792e0 @suit=:diamonds, @value=:deuce>
#<Card:0x007ff2eb978ed0 @suit=:diamonds, @value=:three>
#<Card:0x007ff2eb978c50 @suit=:diamonds, @value=:four>
#<Card:0x007ff2eb9789a8 @suit=:diamonds, @value=:five>
#<Card:0x007ff2eb978610 @suit=:diamonds, @value=:six>
#<Card:0x007ff2eb978318 @suit=:diamonds, @value=:seven>
#<Card:0x007ff2eb973e80 @suit=:diamonds, @value=:eight>
#<Card:0x007ff2eb9739f8 @suit=:diamonds, @value=:nine>
#<Card:0x007ff2eb9736b0 @suit=:diamonds, @value=:ten>
#<Card:0x007ff2eb913da0 @suit=:diamonds, @value=:jack>
#<Card:0x007ff2eb9126d0 @suit=:diamonds, @value=:queen>
#<Card:0x007ff2eb910380 @suit=:diamonds, @value=:king>
#<Card:0x007ff2ec027ce0 @suit=:diamonds, @value=:ace>
#<Card:0x007ff2ec027588 @suit=:hearts, @value=:deuce>
#<Card:0x007ff2ec026a70 @suit=:hearts, @value=:three>
#<Card:0x007ff2ec025fa8 @suit=:hearts, @value=:four>
#<Card:0x007ff2ec0252d8 @suit=:hearts, @value=:five>
#<Card:0x007ff2ec024608 @suit=:hearts, @value=:six>
#<Card:0x007ff2ec01fce8 @suit=:hearts, @value=:seven>
#<Card:0x007ff2ec01e848 @suit=:hearts, @value=:eight>
#<Card:0x007ff2ec01cfc0 @suit=:hearts, @value=:nine>
#<Card:0x007ff2ec00f3e8 @suit=:hearts, @value=:ten>
#<Card:0x007ff2ec00edd0 @suit=:hearts, @value=:jack>
#<Card:0x007ff2ec00e718 @suit=:hearts, @value=:queen>
#<Card:0x007ff2ec00dde0 @suit=:hearts, @value=:king>
#<Card:0x007ff2ec00cad0 @suit=:hearts, @value=:ace>
#<Card:0x007ff2eb96bb18 @suit=:spades, @value=:deuce>
#<Card:0x007ff2eb96b640 @suit=:spades, @value=:three>
#<Card:0x007ff2eb96b0f0 @suit=:spades, @value=:four>
#<Card:0x007ff2eb96ab00 @suit=:spades, @value=:five>
#<Card:0x007ff2eb968f08 @suit=:spades, @value=:six>
#<Card:0x007ff2eb968940 @suit=:spades, @value=:seven>
#<Card:0x007ff2eb963f80 @suit=:spades, @value=:eight>
#<Card:0x007ff2eb962ef0 @suit=:spades, @value=:nine>
#<Card:0x007ff2eb9625b8 @suit=:spades, @value=:ten>
#<Card:0x007ff2eb962040 @suit=:spades, @value=:jack>
#<Card:0x007ff2eb961cf8 @suit=:spades, @value=:queen>
#<Card:0x007ff2eb961078 @suit=:spades, @value=:king>
#<Card:0x007ff2eb960b78 @suit=:spades, @value=:ace>
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 9)
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 10)
  #return
    returns cards to the deck (FAILED - 11)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 12)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 13)
  #points
    adds up normal cards (FAILED - 14)
    counts an ace as 11 if it can (FAILED - 15)
    counts some aces as 1 and others as 11 (FAILED - 16)
  #busted?
    is busted if points > 21 (FAILED - 17)
    is not busted if points <= 21 (FAILED - 18)
  #hit
    draws a card from deck (FAILED - 19)
    doesn't hit if busted (FAILED - 20)
  #beats?
    returns true if other hand has fewer points (FAILED - 21)
    returns false if hands have equal points (FAILED - 22)
    returns false if busted (FAILED - 23)
  #return_cards
    returns cards to deck (FAILED - 24)
    removes card from hand (FAILED - 25)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
200200
    adds to winnings (FAILED - 26)
  #return_cards
    returns player's cards to the deck (FAILED - 27)
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 28)
    deducts bet from bankroll (FAILED - 29)
    enforces limits (FAILED - 30)

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet", got #<RuntimeError: dealer dosent bet> with backtrace:
         # ./lib/dealer.rb:13:in `place_bet'
         # ./spec/dealer_spec.rb:18:in `block (3 levels) in <top (required)>'
         # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand does not hit on seventeen
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:57:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: dealer.play_hand(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/dealer.rb:17:in `play_hand'
     # ./spec/dealer_spec.rb:69:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ff97608a5c0 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ff97608a5c0 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ff97607f2ec @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff97607f2ec @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `suit' for [:clubs, :deuce]:Array
     # ./spec/deck_spec.rb:14:in `block (4 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `map'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  9) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `suit' for [#<Card:0x007ff2eb93b5a8 @suit=:spades, @value=:king>]:Array
     # ./lib/card.rb:75:in `block in =='
     # ./lib/card.rb:74:in `each'
     # ./lib/card.rb:74:in `all?'
     # ./lib/card.rb:74:in `=='
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  10) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<RuntimeError: you cant take more than the amount of cards> with backtrace:
         # ./lib/deck.rb:35:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  11) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  12) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       you cant take more than the amount of cards
     # ./lib/deck.rb:35:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  13) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:9:in `block in deal_from'
     # ./lib/hand.rb:8:in `times'
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  14) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007ff2eb82e570 @suit=:spades, @value=:deuce>, #<Card:0x007ff2eb82e430 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  15) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: [#<Card:0x007ff2eb825ce0 @suit=:spades, @value=:ten>, #<Card:0x007ff2eb8257b8 @suit=:spades, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  16) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: [#<Card:0x007ff2ec36f100 @suit=:spades, @value=:ace>, #<Card:0x007ff2ec36f060 @suit=:spades, @value=:ten>, #<Card:0x007ff2ec36efc0 @suit=:hearts, @value=:ace>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  17) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  18) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `>' for nil:NilClass
     # ./lib/hand.rb:31:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  19) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff9761d2b30 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff9761d2b30 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  20) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  21) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  22) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  23) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  24) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  25) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ff2ec5f51b8 @suit=:spades, @value=:deuce>, #<Card:0x007ff2ec5f50c8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ff2ec5f51b8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ff2ec5f50c8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  26) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  27) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ff9762eb4cc @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff9762eb4cc @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  28) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ff2ec5ccfd8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ff2ec5ccfd8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  29) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  30) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02801 seconds (files took 0.08238 seconds to load)
41 examples, 30 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:30 # Dealer#play_hand does not hit on seventeen
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:16 AM, [firstname_lastname-2]: cd ..
PedroPreciadoIII@Your-MacBook-Pro, 09:18 AM, [assesment_02_prac]: cd ..
PedroPreciadoIII@Your-MacBook-Pro, 09:18 AM, [aa]: cd .
PedroPreciadoIII@Your-MacBook-Pro, 09:18 AM, [aa]: cd ..
PedroPreciadoIII@Your-MacBook-Pro, 09:18 AM, [Desktop]: ls
total 528528
-rw-r--r--@  1 PedroPreciadoIII  staff     32256 Mar  3 17:52 400173816_secure_resume_ResumeFeb2017.doc
-rw-r--r--@  1 PedroPreciadoIII  staff    323959 Mar 16 11:09 626.html
drwx------@  5 PedroPreciadoIII  staff       170 Apr  9 15:50 Course Rating
-rw-r--r--@  1 PedroPreciadoIII  staff     63753 Feb 28 20:31 FullSizeRender.jpg
-rw-r--r--@  1 PedroPreciadoIII  staff  28936358 May 10 23:05 GPG_Suite-2017.1b3-v2.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 28 02:10 OneDrive-2017-04-28.zip.download
-rw-r--r--@  1 PedroPreciadoIII  staff  90757811 May 17 19:01 Postgres-2.0.3.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff   3446237 May 21 22:03 Screen Shot 2017-05-21 at 10.03.33 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   2223482 May 21 22:17 Screen Shot 2017-05-21 at 10.17.54 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff   1920399 May 21 23:17 Screen Shot 2017-05-21 at 11.17.14 PM.png
-rw-r--r--@  1 PedroPreciadoIII  staff  47574872 May  1 16:20 Skype_7.51.593.dmg
-rw-r--r--@  1 PedroPreciadoIII  staff  47366192 May 10 12:50 Skype_7.52.597.dmg
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Nov  5  2016 Spotify Notifications.app
-rw-r--r--@  1 PedroPreciadoIII  staff   1167843 Jul 16 21:10 Terminal Saved Output.txt
-rw-r--r--@  1 PedroPreciadoIII  staff      1256 Apr 18 19:01 W1D2_step1.rb
-rw-r--r--@  1 PedroPreciadoIII  staff      1035 Apr 18 19:32 W1D2_step2.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Dec  8  2016 Wallpapers
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Aug 10 23:26 aa
drwxr-xr-x@ 16 PedroPreciadoIII  staff       544 Aug  7 08:31 aa-practice-test-generator-master-2
drwxr-xr-x  41 PedroPreciadoIII  staff      1394 Aug 10 08:55 aa_exercises
drwxr-xr-x   2 PedroPreciadoIII  staff        68 Aug  1 08:51 aa_july_cohort
-rw-r--r--@  1 PedroPreciadoIII  staff   3209812 Jul 18 23:57 androidfiletransfer.dmg
drwxr-xr-x  51 PedroPreciadoIII  staff      1734 Jul 26 21:40 appacademy
drwxr-xr-x@  8 PedroPreciadoIII  staff       272 Feb 23 18:44 appacademy-online-battleship-323762b3aed6
-rw-r--r--@  1 PedroPreciadoIII  staff      6007 Jul 25 23:51 appacademy-online-battleship-4b3fb16bf1e6.zip
-rw-r--r--@  1 PedroPreciadoIII  staff    125797 Jul 26 16:19 appacademy-online-hangman-084a60135661.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      4446 Jul 24 16:42 appacademy-online-mastermind-079b4a677f64.zip
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Jun 27 17:19 appacademy-online-rspec-3-f2c1cdd76306
drwxr-xr-x@  6 PedroPreciadoIII  staff       204 Feb 22 21:28 appacademy-online-students-courses-103ccbf70eb0
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Mar 22 11:57 ccsf
-rw-r--r--@  1 PedroPreciadoIII  staff     11234 Jul 31 14:09 chek.zip
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jul 29 02:32 chrome-mac
drwxr-xr-x  25 PedroPreciadoIII  staff       850 May 11 12:51 cnit132
-rw-r--r--@  1 PedroPreciadoIII  staff  20737194 Jul 18 23:45 commander.dmg
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jun 22 22:54 credential_content
-rw-r--r--@  1 PedroPreciadoIII  staff      5182 Apr 19 12:56 crouton.png
drwxr-xr-x   4 PedroPreciadoIII  staff       136 Apr 17 11:44 cs131a
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Apr 12 12:53 cs132a
drwxr-xr-x  16 PedroPreciadoIII  staff       544 Feb 15 12:50 cs160a
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Feb  4  2017 cs177
drwxr-xr-x  14 PedroPreciadoIII  staff       476 May 10 19:04 dmgs
-rw-------   1 PedroPreciadoIII  staff      2632 Apr  9 23:56 dook
-rw-r--r--@  1 PedroPreciadoIII  staff    106253 Jul 29 18:53 edmund_li_resume.pdf
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Apr 28 01:39 education_equity
-rw-r--r--@  1 PedroPreciadoIII  staff       964 Apr 20 21:06 first.rb
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Aug  7 21:24 firstname_lastname
drwxr-xr-x@  8 PedroPreciadoIII  staff       272 May 18  2016 firstname_lastname-2
drwxr-xr-x   4 PedroPreciadoIII  staff       136 May  6  2016 geometry
drwxr-xr-x  21 PedroPreciadoIII  staff       714 Jul 29 20:42 gr
-rw-r--r--   1 PedroPreciadoIII  staff       128 Apr 11 13:31 hideicons
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Aug  5  2016 housing
drwxr-xr-x   2 PedroPreciadoIII  staff        68 May 10 23:02 kali
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 May 10 23:18 kali-linux-2017.1-amd64.iso.download
-rw-r--r--@  1 PedroPreciadoIII  staff    138450 Aug  5 23:15 macOSPublicBetaAccessUtility.dmg
drwxr-xr-x@  4 PedroPreciadoIII  staff       136 Apr 10 15:13 mockups
drwxr-xr-x@  3 PedroPreciadoIII  staff       102 Jun 22 23:35 mx_2017
drwxr-xr-x   5 PedroPreciadoIII  staff       170 Jul 19 00:11 mx_jun_2017
drwxr-xr-x   8 PedroPreciadoIII  staff       272 Apr 17 11:44 new_folder
drwxr-xr-x   6 PedroPreciadoIII  staff       204 Jul 19 01:45 nexus5
drwxr-xr-x   3 PedroPreciadoIII  staff       102 Feb 23 13:37 pdfs
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:41 pedro_preciado
drwxr-xr-x@  9 PedroPreciadoIII  staff       306 Aug  7 09:42 pedro_preciado 2
-rw-r--r--@  1 PedroPreciadoIII  staff      6493 Jul 26 20:00 practice_assessment.rb
drwxr-xr-x   7 PedroPreciadoIII  staff       238 Jul 26  2016 programming
-rw-r--r--@  1 PedroPreciadoIII  staff  22355024 Apr 12 12:49 python-2.7.12-macosx10.6.pkg
drwxr-xr-x  18 PedroPreciadoIII  staff       612 Feb 21 16:57 resumes
drwxr-xr-x@  7 PedroPreciadoIII  staff       238 Jul 19 23:42 rspec2solutions
-rw-r--r--@  1 PedroPreciadoIII  staff      6866 Jul 19 23:40 rspecsolution.zip
-rw-r--r--@  1 PedroPreciadoIII  staff      5450 Apr  5 12:18 sessions.html
drwxr-xr-x   9 PedroPreciadoIII  staff       306 Jul 19 01:46 sfsu
-rw-------@  1 PedroPreciadoIII  staff       162 Mar  2  2016 ~$TEA Assignment Prompt  Examples.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$dro Preciado III.doc
-rw-------@  1 PedroPreciadoIII  staff       162 Mar 15  2016 ~$mmer Teacher Application (March 2016).doc
PedroPreciadoIII@Your-MacBook-Pro, 09:18 AM, [Desktop]: cd firstname_lastname-2
PedroPreciadoIII@Your-MacBook-Pro, 09:19 AM, [firstname_lastname-2]: 
PedroPreciadoIII@Your-MacBook-Pro, 09:19 AM, [firstname_lastname-2]: s
Hello nEMO
PedroPreciadoIII@Your-MacBook-Pro, 09:19 AM, [firstname_lastname-2]: ls
total 24
-rw-r--r--@ 1 PedroPreciadoIII  staff    68 May 18  2016 Gemfile
-rw-r--r--@ 1 PedroPreciadoIII  staff   635 May 18  2016 Gemfile.lock
-rw-r--r--@ 1 PedroPreciadoIII  staff  1425 May 18  2016 README.md
drwxr-xr-x@ 7 PedroPreciadoIII  staff   238 May 18  2016 lib
drwxr-xr-x@ 6 PedroPreciadoIII  staff   204 May 18  2016 spec
PedroPreciadoIII@Your-MacBook-Pro, 09:19 AM, [firstname_lastname-2]: bundle exec rspec

Dealer
  calls super with a default name/empty bankroll (FAILED - 1)
  is a Player subclass
  does not place bets (FAILED - 2)
  #play_hand
    does not hit on seventeen
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 8)
    returns all cards without duplicates (FAILED - 9)
  #initialize
    by default fills itself with 52 cards (FAILED - 10)
    can be initialized with an array of cards (FAILED - 11)
  #take
    takes cards off the top of the deck (FAILED - 12)
    removes cards from deck on take (FAILED - 13)
    doesn't allow you to take more cards than are in the deck (FAILED - 14)
  #return
    returns cards to the deck (FAILED - 15)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 16)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 17)
  #points
    adds up normal cards (FAILED - 18)
    counts an ace as 11 if it can (FAILED - 19)
    counts some aces as 1 and others as 11 (FAILED - 20)
  #busted?
    is busted if points > 21 (FAILED - 21)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 22)
    doesn't hit if busted (FAILED - 23)
  #beats?
    returns true if other hand has fewer points (FAILED - 24)
    returns false if hands have equal points (FAILED - 25)
    returns false if busted (FAILED - 26)
  #return_cards
    returns cards to deck (FAILED - 27)
    removes card from hand (FAILED - 28)

Player
  assigns the name (FAILED - 29)
  assigns the bankroll (FAILED - 30)
  #pay_winnings
    adds to winnings (FAILED - 31)
  #return_cards
    returns player's cards to the deck (FAILED - 32)
    resets hand to nil (FAILED - 33)
  #place_bet
    registers bet with dealer (FAILED - 34)
    deducts bet from bankroll (FAILED - 35)
    enforces limits (FAILED - 36)

Failures:

  1) Dealer calls super with a default name/empty bankroll
     Failure/Error: expect(dealer.name).to eq("dealer")
       
       expected: "dealer"
            got: nil
       
       (compared using ==)
     # ./spec/dealer_spec.rb:8:in `block (2 levels) in <top (required)>'

  2) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet" but nothing was raised
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: expect(dealer_hand).to receive(:hit).with(deck).exactly(3).times do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fd078d7b008 @name="deck">)
           expected: 3 times with arguments: (#<RSpec::Mocks::Double:0x3fd078d7b008 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:51:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: expect(dealer_hand).to receive(:hit).once.with(deck) do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fd078d67814 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fd078d67814 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:65:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fd078d532c4 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fd078d532c4 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fd078d43c70 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fd078d43c70 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
     NoMethodError:
       undefined method `count' for nil:NilClass
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  9) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `map' for nil:NilClass
       Did you mean?  tap
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  10) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  11) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  12) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fa0f19ef9f0 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  13) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  14) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  15) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  16) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fa0f19ba840 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  17) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  18) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  19) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  20) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  21) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fa0f1918900>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  22) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fd078c16938 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  23) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  24) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  25) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  26) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  27) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  28) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  29) Player assigns the name
     Failure/Error: expect(player.name).to eq("Nick the Greek")
       
       expected: "Nick the Greek"
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:9:in `block (2 levels) in <top (required)>'

  30) Player assigns the bankroll
     Failure/Error: expect(player.bankroll).to eq(200_000)
       
       expected: 200000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:12:in `block (2 levels) in <top (required)>'

  31) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  32) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fd0794aa9a0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fd0794aa9a0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  33) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fd0794a7228 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  34) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fa0f29376d8>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fa0f29376d8>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  35) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  36) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02547 seconds (files took 0.08534 seconds to load)
41 examples, 36 failures

Failed examples:

rspec ./spec/dealer_spec.rb:7 # Dealer calls super with a default name/empty bankroll
rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:8 # Player assigns the name
rspec ./spec/player_spec.rb:11 # Player assigns the bankroll
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
PedroPreciadoIII@Your-MacBook-Pro, 09:19 AM, [PedroPrePedroPreciadoIII@Your-MacBook-Pro, 09:19 AM, [firstnamname-2]: bundle exec rspec sepc/deck_spec.rb
bundler: failed to load command: rspec (/Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec)
LoadError: cannot load such file -- /Users/PedroPreciadoIII/Desktop/firstname_lastname-2/sepc/deck_spec.rb
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `block in load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `each'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:96:in `setup'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:84:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:69:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:37:in `invoke'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/exe/rspec:4:in `<top (required)>'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `<top PPPPedroPreciadoIII@Your-MacBook-Pro, 09:22 AM, [firstname_lastname-2]: carrot
> clear

> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
     NoMethodError:
       undefined method `count' for nil:NilClass
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: .map { |card| [card.suit, card.value] }
     NoMethodError:
       undefined method `map' for nil:NilClass
       Did you mean?  tap
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fbacfbade98 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fbacfb862d0 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.0049 seconds (files took 0.07819 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: subject(:all_cards) { Deck.all_cards }
     RuntimeError:
       illegal suit ([:clubs, "♣"]) or value ([:deuce, "2"])
     # ./lib/card.rb:57:in `initialize'
     # ./lib/deck.rb:10:in `new'
     # ./lib/deck.rb:10:in `block (2 levels) in all_cards'
     # ./lib/deck.rb:9:in `each'
     # ./lib/deck.rb:9:in `block in all_cards'
     # ./lib/deck.rb:8:in `each'
     # ./lib/deck.rb:8:in `all_cards'
     # ./spec/deck_spec.rb:6:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: subject(:all_cards) { Deck.all_cards }
     RuntimeError:
       illegal suit ([:clubs, "♣"]) or value ([:deuce, "2"])
     # ./lib/card.rb:57:in `initialize'
     # ./lib/deck.rb:10:in `new'
     # ./lib/deck.rb:10:in `block (2 levels) in all_cards'
     # ./lib/deck.rb:9:in `each'
     # ./lib/deck.rb:9:in `block in all_cards'
     # ./lib/deck.rb:8:in `each'
     # ./lib/deck.rb:8:in `all_cards'
     # ./spec/deck_spec.rb:6:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: deck = Deck.new
     RuntimeError:
       illegal suit ([:clubs, "♣"]) or value ([:deuce, "2"])
     # ./lib/card.rb:57:in `initialize'
     # ./lib/deck.rb:10:in `new'
     # ./lib/deck.rb:10:in `block (2 levels) in all_cards'
     # ./lib/deck.rb:9:in `each'
     # ./lib/deck.rb:9:in `block in all_cards'
     # ./lib/deck.rb:8:in `each'
     # ./lib/deck.rb:8:in `all_cards'
     # ./lib/deck.rb:16:in `initialize'
     # ./spec/deck_spec.rb:31:in `new'
     # ./spec/deck_spec.rb:31:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007f930b266ba0 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f930b244938 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.0052 seconds (files took 0.08202 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards (FAILED - 1)
    can be initialized with an array of cards (FAILED - 2)
  #take
    takes cards off the top of the deck (FAILED - 3)
    removes cards from deck on take (FAILED - 4)
    doesn't allow you to take more cards than are in the deck (FAILED - 5)
  #return
    returns cards to the deck (FAILED - 6)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 7)

Failures:

  1) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  2) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007ff927082b68 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  4) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  5) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  6) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  7) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007ff9270616e8 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00613 seconds (files took 0.08625 seconds to load)
11 examples, 7 failures

Failed examples:

rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> pry 
[1] pry(main)> arr = [1, 2, 3, 4]
=> [1, 2, 3, 4]
[2] pry(main)> arr.product([2, 3, 4])
=> [[1, 2],
 [1, 3],
 [1, 4],
 [2, 2],
 [2, 3],
 [2, 4],
 [3, 2],
 [3, 3],
 [3, 4],
 [4, 2],
 [4, 3],
 [4, 4]]
[3] pry(main)> ["x", "y", "z"].product([1, 2, 3])
=> [["x", 1],
 ["x", 2],
 ["x", 3],
 ["y", 1],
 ["y", 2],
 ["y", 3],
 ["z", 1],
 ["z", 2],
 ["z", 3]]
[4] pry(main)> ["x", "y", "z"].product([1, 2, 3])
=> [["x", 1],
 ["x", 2],
 ["x", 3],
 ["y", 1],
 ["y", 2],
 ["y", 3],
 ["z", 1],
 ["z", 2],
 ["z", 3]]
[5] pry(main)> exit
> pry 
[1] pry(main)> exit 
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards (FAILED - 1)
    can be initialized with an array of cards (FAILED - 2)
  #take
    takes cards off the top of the deck (FAILED - 3)
    removes cards from deck on take (FAILED - 4)
    doesn't allow you to take more cards than are in the deck (FAILED - 5)
  #return
    returns cards to the deck (FAILED - 6)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 7)

Failures:

  1) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  2) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fb4299fed10 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  4) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  5) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  6) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  7) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fb4299dd908 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00644 seconds (files took 0.08465 seconds to load)
11 examples, 7 failures

Failed examples:

rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 1)
    removes cards from deck on take (FAILED - 2)
    doesn't allow you to take more cards than are in the deck (FAILED - 3)
  #return
    returns cards to the deck (FAILED - 4)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 5)

Failures:

  1) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007f9b6bca7480 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  2) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  3) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  4) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  5) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f9b6bc858d0 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00785 seconds (files took 0.08261 seconds to load)
11 examples, 5 failures

Failed examples:

rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 1)
  #return
    returns cards to the deck (FAILED - 2)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 3)

Failures:

  1) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  2) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  3) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fc8cdaea720 @suit=:hearts, @value=:four>]
            got: []
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,2 @@
       -[#<Card:0x007fc8cdaea720 @suit=:hearts, @value=:four>]
       +[]
       
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00558 seconds (files took 0.08625 seconds to load)
11 examples, 3 failures

Failed examples:

rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 1)
  #return
    returns cards to the deck (FAILED - 2)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 3)

Failures:

  1) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  2) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  3) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f934d179e08 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00539 seconds (files took 0.07828 seconds to load)
11 examples, 3 failures

Failed examples:

rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 1)
    removes cards from deck on take (FAILED - 2)
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 3)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 4)

Failures:

  1) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fec91abed68 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  2) Deck#take removes cards from deck on take
     Failure/Error: deck.take(2)
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:28:in `take'
     # ./spec/deck_spec.rb:57:in `block (3 levels) in <top (required)>'

  3) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  4) Deck#return adds new cards to the bottom of the deck
     Failure/Error: deck.take(3) # toss 3 cards away
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:28:in `take'
     # ./spec/deck_spec.rb:88:in `block (3 levels) in <top (required)>'

Finished in 0.00526 seconds (files took 0.07997 seconds to load)
11 examples, 4 failures

Failed examples:

rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 1)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 2)

Failures:

  1) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  2) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:27:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00544 seconds (files took 0.08981 seconds to load)
11 examples, 2 failures

Failed examples:

rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 1)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 2)

Failures:

  1) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  2) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:27:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00585 seconds (files took 0.08479 seconds to load)
11 examples, 2 failures

Failed examples:

rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 1)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 2)

Failures:

  1) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  2) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:27:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00546 seconds (files took 0.08209 seconds to load)
11 examples, 2 failures

Failed examples:

rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck
    does not destroy the passed array
    adds new cards to the bottom of the deck

Finished in 0.00547 seconds (files took 0.08029 seconds to load)
11 examples, 0 failures
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name (FAILED - 1)
  assigns the bankroll (FAILED - 2)
  #pay_winnings
    adds to winnings (FAILED - 3)
  #return_cards
    returns player's cards to the deck (FAILED - 4)
    resets hand to nil (FAILED - 5)
  #place_bet
    registers bet with dealer (FAILED - 6)
    deducts bet from bankroll (FAILED - 7)
    enforces limits (FAILED - 8)

Failures:

  1) Player assigns the name
     Failure/Error: expect(player.name).to eq("Nick the Greek")
       
       expected: "Nick the Greek"
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:9:in `block (2 levels) in <top (required)>'

  2) Player assigns the bankroll
     Failure/Error: expect(player.bankroll).to eq(200_000)
       
       expected: 200000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:12:in `block (2 levels) in <top (required)>'

  3) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  4) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fc51f18b374 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc51f18b374 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  5) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fc51f1461d4 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  6) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f8a3e264498>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f8a3e264498>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  7) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  8) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01099 seconds (files took 0.08298 seconds to load)
8 examples, 8 failures

Failed examples:

rspec ./spec/player_spec.rb:8 # Player assigns the name
rspec ./spec/player_spec.rb:11 # Player assigns the bankroll
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings (FAILED - 1)
  #return_cards
    returns player's cards to the deck (FAILED - 2)
    resets hand to nil (FAILED - 3)
  #place_bet
    registers bet with dealer (FAILED - 4)
    deducts bet from bankroll (FAILED - 5)
    enforces limits (FAILED - 6)

Failures:

  1) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  2) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3feb61532ff0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3feb61532ff0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  3) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3feb61c22004 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  4) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fd6c30d3fa8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fd6c30d3fa8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  5) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  6) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01212 seconds (files took 0.09119 seconds to load)
8 examples, 6 failures

Failed examples:

rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings (FAILED - 1)
  #return_cards
    returns player's cards to the deck (FAILED - 2)
    resets hand to nil (FAILED - 3)
  #place_bet
    registers bet with dealer (FAILED - 4)
    deducts bet from bankroll (FAILED - 5)
    enforces limits (FAILED - 6)

Failures:

  1) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  2) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fce694cd714 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fce694cd714 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  3) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fce694a8568 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  4) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f9cd2928c10 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f9cd2928c10 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  5) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  6) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01099 seconds (files took 0.10085 seconds to load)
8 examples, 6 failures

Failed examples:

rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck (FAILED - 1)
    resets hand to nil (FAILED - 2)
  #place_bet
    registers bet with dealer (FAILED - 3)
    deducts bet from bankroll (FAILED - 4)
    enforces limits (FAILED - 5)

Failures:

  1) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fc9b94e592c @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc9b94e592c @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  2) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fc9b994c7f4 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  3) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f9373271128 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f9373271128 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  4) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  5) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01078 seconds (files took 0.08084 seconds to load)
8 examples, 5 failures

Failed examples:

rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fd2acdf6c2c @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fa559bc55d8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fa559bc55d8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01201 seconds (files took 0.08804 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 1)
    deducts bet from bankroll (FAILED - 2)
    enforces limits (FAILED - 3)

Failures:

  1) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f8a2c8d1928 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f8a2c8d1928 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  2) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01094 seconds (files took 0.08626 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3ff1240ecbbc @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fe2481b1480 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fe2481b1480 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01137 seconds (files took 0.07892 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 1)
    deducts bet from bankroll (FAILED - 2)
    enforces limits (FAILED - 3)

Failures:

  1) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fea33911bd8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fea33911bd8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  2) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01079 seconds (files took 0.08223 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll (FAILED - 1)
    enforces limits (FAILED - 2)

Failures:

  1) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  2) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01027 seconds (files took 0.09209 seconds to load)
8 examples, 2 failures

Failed examples:

rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll
    enforces limits (FAILED - 1)

Failures:

  1) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01297 seconds (files took 0.07981 seconds to load)
8 examples, 1 failure

Failed examples:

rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll
    enforces limits

Finished in 0.01155 seconds (files took 0.08763 seconds to load)
8 examples, 0 failures
> bundle exec rspec 

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen
    hits until seventeen acheived (FAILED - 2)
    stops when busted (FAILED - 3)
  with a player
    records bets (FAILED - 4)
    does not pay losers (or ties) (FAILED - 5)
    does pay winners (FAILED - 6)

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck
    does not destroy the passed array
    adds new cards to the bottom of the deck

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 7)
  #points
    adds up normal cards (FAILED - 8)
    counts an ace as 11 if it can (FAILED - 9)
    counts some aces as 1 and others as 11 (FAILED - 10)
  #busted?
    is busted if points > 21 (FAILED - 11)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 12)
    doesn't hit if busted (FAILED - 13)
  #beats?
    returns true if other hand has fewer points (FAILED - 14)
    returns false if hands have equal points (FAILED - 15)
    returns false if busted (FAILED - 16)
  #return_cards
    returns cards to deck (FAILED - 17)
    removes card from hand (FAILED - 18)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll
    enforces limits

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet" but nothing was raised
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand hits until seventeen acheived
     Failure/Error: expect(dealer_hand).to receive(:hit).with(deck).exactly(3).times do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3ff1ec14aa50 @name="deck">)
           expected: 3 times with arguments: (#<RSpec::Mocks::Double:0x3ff1ec14aa50 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:51:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand stops when busted
     Failure/Error: expect(dealer_hand).to receive(:hit).once.with(deck) do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3ff1ec137f68 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff1ec137f68 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:65:in `block (3 levels) in <top (required)>'

  4) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3ff1ec432e84 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3ff1ec432e84 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  5) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3ff1ec42737c @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff1ec42737c @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  7) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  8) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  9) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  10) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  11) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fe3d8159eb0>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  12) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3ff1ec203960 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  13) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  14) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  15) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  16) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  17) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  18) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.025 seconds (files took 0.0857 seconds to load)
41 examples, 18 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> 
> bundle exec rspec 

Dealer
  calls super with a default name/empty bankroll
  is a Player subclass
  does not place bets (FAILED - 1)
  #play_hand
    does not hit on seventeen
    hits until seventeen acheived (FAILED - 2)
    stops when busted (FAILED - 3)
  with a player
    records bets (FAILED - 4)
    does not pay losers (or ties) (FAILED - 5)
    does pay winners (FAILED - 6)

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck
    does not destroy the passed array
    adds new cards to the bottom of the deck

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 7)
  #points
    adds up normal cards (FAILED - 8)
    counts an ace as 11 if it can (FAILED - 9)
    counts some aces as 1 and others as 11 (FAILED - 10)
  #busted?
    is busted if points > 21 (FAILED - 11)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 12)
    doesn't hit if busted (FAILED - 13)
  #beats?
    returns true if other hand has fewer points (FAILED - 14)
    returns false if hands have equal points (FAILED - 15)
    returns false if busted (FAILED - 16)
  #return_cards
    returns cards to deck (FAILED - 17)
    removes card from hand (FAILED - 18)

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll
    enforces limits

Failures:

  1) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet" but nothing was raised
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  2) Dealer#play_hand hits until seventeen acheived
     Failure/Error: expect(dealer_hand).to receive(:hit).with(deck).exactly(3).times do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fc9890dc694 @name="deck">)
           expected: 3 times with arguments: (#<RSpec::Mocks::Double:0x3fc9890dc694 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:51:in `block (3 levels) in <top (required)>'

  3) Dealer#play_hand stops when busted
     Failure/Error: expect(dealer_hand).to receive(:hit).once.with(deck) do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fc9890cdbe4 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc9890cdbe4 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:65:in `block (3 levels) in <top (required)>'

  4) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fc9894506f4 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fc9894506f4 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  5) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fc989445434 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc989445434 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  7) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NoMethodError:
       undefined method `take' for Deck:Class
     # ./lib/hand.rb:7:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  8) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  9) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  10) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  11) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f9312859d80>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  12) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fc9894c380c @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  13) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  14) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  15) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  16) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  17) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  18) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.02475 seconds (files took 0.08733 seconds to load)
41 examples, 18 failures

Failed examples:

rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/ hand_spec.rb
bundler: failed to load command: rspec (/Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec)
LoadError: cannot load such file -- /Users/PedroPreciadoIII/Desktop/firstname_lastname-2/hand_spec.rb
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `block in load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `each'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:96:in `setup'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:84:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:69:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:37:in `invoke'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/exe/rspec:4:in `<top (required)>'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `<top (required)>'
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NameError:
       uninitialized constant Hand::Deck
     # ./lib/hand.rb:7:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fd4070d9d40>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fea0406efe0 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01427 seconds (files took 0.08139 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NameError:
       uninitialized constant Hand::Deck
     # ./lib/hand.rb:7:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f9a8916dc28>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fcd44866b58 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.014 seconds (files took 0.08191 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NoMethodError:
       undefined method `take' for nil:NilClass
     # ./lib/hand.rb:7:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fd95c0f5018 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fecae45af1c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fecae45af1c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fd95c804a20 @suit=:spades, @value=:deuce>, #<Card:0x007fd95c804908 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fd95c804a20 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fd95c804908 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01604 seconds (files took 0.09603 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NameError:
       uninitialized constant Hand::Deck
     # ./lib/hand.rb:7:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007facc81cad78 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fd6640954c8 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fd6640954c8 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007facc70711d0 @suit=:spades, @value=:deuce>, #<Card:0x007facc7071130 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007facc70711d0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007facc7071130 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.0165 seconds (files took 0.10072 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards (FAILED - 1)
    counts an ace as 11 if it can (FAILED - 2)
    counts some aces as 1 and others as 11 (FAILED - 3)
  #busted?
    is busted if points > 21 (FAILED - 4)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  2) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fe632ad31d8 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff3195145b8 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff3195145b8 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe63480c768 @suit=:spades, @value=:deuce>, #<Card:0x007fe63480c6c8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe63480c768 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe63480c6c8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01819 seconds (files took 0.08875 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards (FAILED - 1)
    counts an ace as 11 if it can (FAILED - 2)
    counts some aces as 1 and others as 11 (FAILED - 3)
  #busted?
    is busted if points > 21 (FAILED - 4)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  2) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fc4bc940cb8 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe25e881528 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe25e881528 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc4be02a870 @suit=:spades, @value=:deuce>, #<Card:0x007fc4be02a618 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc4be02a870 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc4be02a618 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01739 seconds (files took 0.08721 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards (FAILED - 1)
    counts an ace as 11 if it can (FAILED - 2)
    counts some aces as 1 and others as 11 (FAILED - 3)
  #busted?
    is busted if points > 21 (FAILED - 4)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
     NameError:
       uninitialized constant Hand::BLACKJACK_VALUE
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  2) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     NameError:
       uninitialized constant Hand::BLACKJACK_VALUE
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     NameError:
       uninitialized constant Hand::BLACKJACK_VALUE
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fbc35121ad0 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fde1b436e24 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fde1b436e24 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fbc3602d150 @suit=:spades, @value=:deuce>, #<Card:0x007fbc3602ccc8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fbc3602d150 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fbc3602ccc8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01694 seconds (files took 0.09008 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards (FAILED - 1)
    counts an ace as 11 if it can (FAILED - 2)
    counts some aces as 1 and others as 11 (FAILED - 3)
  #busted?
    is busted if points > 21 (FAILED - 4)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
     NameError:
       uninitialized constant Hand::BLACKJACK_VALUE
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  2) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     NameError:
       uninitialized constant Hand::BLACKJACK_VALUE
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     NameError:
       uninitialized constant Hand::BLACKJACK_VALUE
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f86758563f0 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc33a4293ec @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc33a4293ec @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f86741f40f8 @suit=:spades, @value=:deuce>, #<Card:0x007f86741eff58 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f86741f40f8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f86741eff58 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01598 seconds (files took 0.08201 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     TypeError:
       nil can't be coerced into Fixnum
     # ./lib/hand.rb:21:in `+'
     # ./lib/hand.rb:21:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     TypeError:
       nil can't be coerced into Fixnum
     # ./lib/hand.rb:21:in `+'
     # ./lib/hand.rb:21:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f83a2200eb8 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc1d109c720 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc1d109c720 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f83a20485a8 @suit=:spades, @value=:deuce>, #<Card:0x007f83a2048440 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f83a20485a8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f83a2048440 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01669 seconds (files took 0.09635 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb
bundler: failed to load command: rspec (/Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec)
SyntaxError: /Users/PedroPreciadoIII/Desktop/firstname_lastname-2/lib/hand.rb:23: syntax error, unexpected tIDENTIFIER, expecting keyword_end
        sum += 1 id sum > 10
                   ^
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `block in load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `each'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:96:in `setup'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:84:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:69:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:37:in `invoke'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/exe/rspec:4:in `<top (required)>'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `<top (required)>'
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     NoMethodError:
       undefined method `<=' for nil:NilClass
       Did you mean?  <=>
     # ./lib/hand.rb:22:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     NoMethodError:
       undefined method `<=' for nil:NilClass
       Did you mean?  <=>
     # ./lib/hand.rb:22:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f96b7a81d08 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fcb5c445f04 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fcb5c445f04 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f96b79cb6c0 @suit=:spades, @value=:deuce>, #<Card:0x007f96b79cb440 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f96b79cb6c0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f96b79cb440 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01632 seconds (files took 0.08295 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     TypeError:
       nil can't be coerced into Fixnum
     # ./lib/hand.rb:25:in `+'
     # ./lib/hand.rb:25:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     TypeError:
       nil can't be coerced into Fixnum
     # ./lib/hand.rb:25:in `+'
     # ./lib/hand.rb:25:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f8b0da4fc78 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc586cc3d10 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc586cc3d10 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f8b0d8af698 @suit=:spades, @value=:deuce>, #<Card:0x007f8b0d8af3c8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f8b0d8af698 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f8b0d8af3c8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01931 seconds (files took 0.09515 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fd0708fe538>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fe838c1aee8 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01916 seconds (files took 0.12287 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec

Dealer
  calls super with a default name/empty bankroll (FAILED - 1)
  is a Player subclass
  does not place bets (FAILED - 2)
  #play_hand
    does not hit on seventeen
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck
    does not destroy the passed array
    adds new cards to the bottom of the deck

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 8)
  #points
    adds up normal cards (FAILED - 9)
    counts an ace as 11 if it can (FAILED - 10)
    counts some aces as 1 and others as 11 (FAILED - 11)
  #busted?
    is busted if points > 21 (FAILED - 12)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 13)
    doesn't hit if busted (FAILED - 14)
  #beats?
    returns true if other hand has fewer points (FAILED - 15)
    returns false if hands have equal points (FAILED - 16)
    returns false if busted (FAILED - 17)
  #return_cards
    returns cards to deck (FAILED - 18)
    removes card from hand (FAILED - 19)

Player
  assigns the name (FAILED - 20)
  assigns the bankroll (FAILED - 21)
  #pay_winnings
    adds to winnings (FAILED - 22)
  #return_cards
    returns player's cards to the deck (FAILED - 23)
    resets hand to nil (FAILED - 24)
  #place_bet
    registers bet with dealer (FAILED - 25)
    deducts bet from bankroll (FAILED - 26)
    enforces limits (FAILED - 27)

Failures:

  1) Dealer calls super with a default name/empty bankroll
     Failure/Error: expect(dealer.name).to eq("dealer")
       
       expected: "dealer"
            got: nil
       
       (compared using ==)
     # ./spec/dealer_spec.rb:8:in `block (2 levels) in <top (required)>'

  2) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet" but nothing was raised
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: expect(dealer_hand).to receive(:hit).with(deck).exactly(3).times do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fc98583b8f8 @name="deck">)
           expected: 3 times with arguments: (#<RSpec::Mocks::Double:0x3fc98583b8f8 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:51:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: expect(dealer_hand).to receive(:hit).once.with(deck) do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fc98582777c @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc98582777c @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:65:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fc98494a240 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fc98494a240 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fc98493b8d0 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc98493b8d0 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  9) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  10) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  11) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  12) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f930915baf0>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  13) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fc9849ab928 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  14) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  15) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  16) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  17) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  18) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  19) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  20) Player assigns the name
     Failure/Error: expect(player.name).to eq("Nick the Greek")
       
       expected: "Nick the Greek"
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:9:in `block (2 levels) in <top (required)>'

  21) Player assigns the bankroll
     Failure/Error: expect(player.bankroll).to eq(200_000)
       
       expected: 200000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:12:in `block (2 levels) in <top (required)>'

  22) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  23) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fc9849af3c0 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc9849af3c0 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  24) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fc9849ab7ac @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  25) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f93093547d0>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f93093547d0>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  26) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  27) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02604 seconds (files took 0.09024 seconds to load)
41 examples, 27 failures

Failed examples:

rspec ./spec/dealer_spec.rb:7 # Dealer calls super with a default name/empty bankroll
rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:8 # Player assigns the name
rspec ./spec/player_spec.rb:11 # Player assigns the bankroll
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec

Dealer
  calls super with a default name/empty bankroll (FAILED - 1)
  is a Player subclass
  does not place bets (FAILED - 2)
  #play_hand
    does not hit on seventeen
    hits until seventeen acheived (FAILED - 3)
    stops when busted (FAILED - 4)
  with a player
    records bets (FAILED - 5)
    does not pay losers (or ties) (FAILED - 6)
    does pay winners (FAILED - 7)

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 8)
    returns all cards without duplicates (FAILED - 9)
  #initialize
    by default fills itself with 52 cards (FAILED - 10)
    can be initialized with an array of cards (FAILED - 11)
  #take
    takes cards off the top of the deck (FAILED - 12)
    removes cards from deck on take (FAILED - 13)
    doesn't allow you to take more cards than are in the deck (FAILED - 14)
  #return
    returns cards to the deck (FAILED - 15)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 16)

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 17)
  #points
    adds up normal cards (FAILED - 18)
    counts an ace as 11 if it can (FAILED - 19)
    counts some aces as 1 and others as 11 (FAILED - 20)
  #busted?
    is busted if points > 21 (FAILED - 21)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 22)
    doesn't hit if busted (FAILED - 23)
  #beats?
    returns true if other hand has fewer points (FAILED - 24)
    returns false if hands have equal points (FAILED - 25)
    returns false if busted (FAILED - 26)
  #return_cards
    returns cards to deck (FAILED - 27)
    removes card from hand (FAILED - 28)

Player
  assigns the name (FAILED - 29)
  assigns the bankroll (FAILED - 30)
  #pay_winnings
    adds to winnings (FAILED - 31)
  #return_cards
    returns player's cards to the deck (FAILED - 32)
    resets hand to nil (FAILED - 33)
  #place_bet
    registers bet with dealer (FAILED - 34)
    deducts bet from bankroll (FAILED - 35)
    enforces limits (FAILED - 36)

Failures:

  1) Dealer calls super with a default name/empty bankroll
     Failure/Error: expect(dealer.name).to eq("dealer")
       
       expected: "dealer"
            got: nil
       
       (compared using ==)
     # ./spec/dealer_spec.rb:8:in `block (2 levels) in <top (required)>'

  2) Dealer does not place bets
     Failure/Error: expect do
       expected Exception with "Dealer doesn't bet" but nothing was raised
     # ./spec/dealer_spec.rb:17:in `block (2 levels) in <top (required)>'

  3) Dealer#play_hand hits until seventeen acheived
     Failure/Error: expect(dealer_hand).to receive(:hit).with(deck).exactly(3).times do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fdf0e10e1cc @name="deck">)
           expected: 3 times with arguments: (#<RSpec::Mocks::Double:0x3fdf0e10e1cc @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:51:in `block (3 levels) in <top (required)>'

  4) Dealer#play_hand stops when busted
     Failure/Error: expect(dealer_hand).to receive(:hit).once.with(deck) do
       (Double "hand").hit(#<RSpec::Mocks::Double:0x3fdf0e850a84 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdf0e850a84 @name="deck">)
           received: 0 times
     # ./spec/dealer_spec.rb:65:in `block (3 levels) in <top (required)>'

  5) Dealer with a player records bets
     Failure/Error: expect(dealer.bets).to eq({ player => 100 })
       
       expected: {#<RSpec::Mocks::Double:0x3fdf0e838ed4 @name="player">=>100}
            got: {}
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1 @@
       -#<RSpec::Mocks::Double:0x3fdf0e838ed4 @name="player"> => 100,
       
     # ./spec/dealer_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Dealer with a player does not pay losers (or ties)
     Failure/Error: expect(player_hand).to receive(:beats?).with(dealer_hand).and_return(false)
       (Double "player_hand").beats?(#<RSpec::Mocks::Double:0x3fdf0e82d354 @name="dealer_hand">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdf0e82d354 @name="dealer_hand">)
           received: 0 times
     # ./spec/dealer_spec.rb:90:in `block (3 levels) in <top (required)>'

  7) Dealer with a player does pay winners
     Failure/Error: expect(player).to receive(:pay_winnings).with(200)
       (Double "player").pay_winnings(200)
           expected: 1 time with arguments: (200)
           received: 0 times
     # ./spec/dealer_spec.rb:100:in `block (3 levels) in <top (required)>'

  8) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  9) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  10) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  11) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  12) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fbe1c1dde90 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  13) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  14) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  15) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  16) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fbe1c1a9b68 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

  17) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  18) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  19) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  20) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  21) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fbe1c18aa60>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  22) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fdf0e012764 @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  23) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  24) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  25) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  26) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  27) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  28) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

  29) Player assigns the name
     Failure/Error: expect(player.name).to eq("Nick the Greek")
       
       expected: "Nick the Greek"
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:9:in `block (2 levels) in <top (required)>'

  30) Player assigns the bankroll
     Failure/Error: expect(player.bankroll).to eq(200_000)
       
       expected: 200000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:12:in `block (2 levels) in <top (required)>'

  31) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  32) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fdf0e217514 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdf0e217514 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  33) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fdf0e20fd28 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  34) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fbe1c41d340>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fbe1c41d340>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  35) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  36) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.02467 seconds (files took 0.08705 seconds to load)
41 examples, 36 failures

Failed examples:

rspec ./spec/dealer_spec.rb:7 # Dealer calls super with a default name/empty bankroll
rspec ./spec/dealer_spec.rb:16 # Dealer does not place bets
rspec ./spec/dealer_spec.rb:40 # Dealer#play_hand hits until seventeen acheived
rspec ./spec/dealer_spec.rb:60 # Dealer#play_hand stops when busted
rspec ./spec/dealer_spec.rb:85 # Dealer with a player records bets
rspec ./spec/dealer_spec.rb:89 # Dealer with a player does not pay losers (or ties)
rspec ./spec/dealer_spec.rb:96 # Dealer with a player does pay winners
rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
rspec ./spec/player_spec.rb:8 # Player assigns the name
rspec ./spec/player_spec.rb:11 # Player assigns the bankroll
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fbf3ea3dfe0 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fbf3ea1ccf0 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00507 seconds (files took 0.07872 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fb4e3bacdc8 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fb4e3b86f60 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00781 seconds (files took 0.09958 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
[]
    starts with a count of 52 (FAILED - 1)
[]
    returns all cards without duplicates (FAILED - 2)
  #initialize
[]
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fbdfd059778 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fbdfd053850 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00588 seconds (files took 0.09311 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
[]
    starts with a count of 52 (FAILED - 1)
[]
    returns all cards without duplicates (FAILED - 2)
  #initialize
[]
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fae4036d6c0 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fae40347790 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00793 seconds (files took 0.08322 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
[]
    starts with a count of 52 (FAILED - 1)
[]
    returns all cards without duplicates (FAILED - 2)
  #initialize
[]
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007f9f4a9ac9f0 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f9f4a986b88 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.0056 seconds (files took 0.09495 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007f926822de70 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f9268207ea0 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00661 seconds (files took 0.11386 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: subject(:all_cards) { Deck.all_cards }
     NoMethodError:
       undefined method `keys' for [:clubs, :diamonds, :hearts, :spades]:Array
     # ./lib/deck.rb:8:in `all_cards'
     # ./spec/deck_spec.rb:6:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: subject(:all_cards) { Deck.all_cards }
     NoMethodError:
       undefined method `keys' for [:clubs, :diamonds, :hearts, :spades]:Array
     # ./lib/deck.rb:8:in `all_cards'
     # ./spec/deck_spec.rb:6:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:14:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: deck = Deck.new
     NoMethodError:
       undefined method `keys' for [:clubs, :diamonds, :hearts, :spades]:Array
     # ./lib/deck.rb:8:in `all_cards'
     # ./lib/deck.rb:16:in `initialize'
     # ./spec/deck_spec.rb:31:in `new'
     # ./spec/deck_spec.rb:31:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007faa2742ac38 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007faa27408980 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.005 seconds (files took 0.08648 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52 (FAILED - 1)
    returns all cards without duplicates (FAILED - 2)
  #initialize
    by default fills itself with 52 cards (FAILED - 3)
    can be initialized with an array of cards (FAILED - 4)
  #take
    takes cards off the top of the deck (FAILED - 5)
    removes cards from deck on take (FAILED - 6)
    doesn't allow you to take more cards than are in the deck (FAILED - 7)
  #return
    returns cards to the deck (FAILED - 8)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 9)

Failures:

  1) Deck::all_cards starts with a count of 52
     Failure/Error: expect(all_cards.count).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:9:in `block (3 levels) in <top (required)>'

  2) Deck::all_cards returns all cards without duplicates
     Failure/Error: expect(deduped_cards).to eq(52)
       
       expected: 52
            got: 0
       
       (compared using ==)
     # ./spec/deck_spec.rb:17:in `block (3 levels) in <top (required)>'

  3) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  4) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  5) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fb1bc2b5d98 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  6) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  7) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  8) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  9) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fb1bc28fe68 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00534 seconds (files took 0.08012 seconds to load)
11 examples, 9 failures

Failed examples:

rspec ./spec/deck_spec.rb:8 # Deck::all_cards starts with a count of 52
rspec ./spec/deck_spec.rb:12 # Deck::all_cards returns all cards without duplicates
rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards (FAILED - 1)
    can be initialized with an array of cards (FAILED - 2)
  #take
    takes cards off the top of the deck (FAILED - 3)
    removes cards from deck on take (FAILED - 4)
    doesn't allow you to take more cards than are in the deck (FAILED - 5)
  #return
    returns cards to the deck (FAILED - 6)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 7)

Failures:

  1) Deck#initialize by default fills itself with 52 cards
     Failure/Error: expect(deck.count).to eq(52)
       
       expected: 52
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:32:in `block (3 levels) in <top (required)>'

  2) Deck#initialize can be initialized with an array of cards
     Failure/Error: expect(deck.count).to eq(3)
       
       expected: 3
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007fd2f9b4f388 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  4) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  5) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  6) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  7) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fd2f9b2e110 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00542 seconds (files took 0.09729 seconds to load)
11 examples, 7 failures

Failed examples:

rspec ./spec/deck_spec.rb:30 # Deck#initialize by default fills itself with 52 cards
rspec ./spec/deck_spec.rb:35 # Deck#initialize can be initialized with an array of cards
rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 1)
    removes cards from deck on take (FAILED - 2)
    doesn't allow you to take more cards than are in the deck (FAILED - 3)
  #return
    returns cards to the deck (FAILED - 4)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 5)

Failures:

  1) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
       
       expected: [#<Card:0x007f9961167388 @suit=:spades, @value=:king>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  2) Deck#take removes cards from deck on take
     Failure/Error: expect(deck.count).to eq(1)
       
       expected: 1
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:58:in `block (3 levels) in <top (required)>'

  3) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  4) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  5) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f9961145738 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00608 seconds (files took 0.08293 seconds to load)
11 examples, 5 failures

Failed examples:

rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck (FAILED - 1)
    removes cards from deck on take (FAILED - 2)
    doesn't allow you to take more cards than are in the deck (FAILED - 3)
  #return
    returns cards to the deck (FAILED - 4)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 5)

Failures:

  1) Deck#take takes cards off the top of the deck
     Failure/Error: expect(deck.take(1)).to eq(cards[0..0])
     NoMethodError:
       undefined method `shift' for #<Deck:0x007fdd66216c68>
     # ./lib/deck.rb:27:in `take'
     # ./spec/deck_spec.rb:52:in `block (3 levels) in <top (required)>'

  2) Deck#take removes cards from deck on take
     Failure/Error: deck.take(2)
     NoMethodError:
       undefined method `shift' for #<Deck:0x007fdd66215958>
     # ./lib/deck.rb:27:in `take'
     # ./spec/deck_spec.rb:57:in `block (3 levels) in <top (required)>'

  3) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards", got #<NoMethodError: undefined method `shift' for #<Deck:0x007fdd661fec30>> with backtrace:
         # ./lib/deck.rb:27:in `take'
         # ./spec/deck_spec.rb:63:in `block (4 levels) in <top (required)>'
         # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  4) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  5) Deck#return adds new cards to the bottom of the deck
     Failure/Error: deck.take(3) # toss 3 cards away
     NoMethodError:
       undefined method `shift' for #<Deck:0x007fdd661de818>
     # ./lib/deck.rb:27:in `take'
     # ./spec/deck_spec.rb:88:in `block (3 levels) in <top (required)>'

Finished in 0.0067 seconds (files took 0.0799 seconds to load)
11 examples, 5 failures

Failed examples:

rspec ./spec/deck_spec.rb:51 # Deck#take takes cards off the top of the deck
rspec ./spec/deck_spec.rb:56 # Deck#take removes cards from deck on take
rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 1)
  #return
    returns cards to the deck (FAILED - 2)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 3)

Failures:

  1) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  2) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  3) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007f9d2ab56278 @suit=:hearts, @value=:four>]
            got: []
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,2 @@
       -[#<Card:0x007f9d2ab56278 @suit=:hearts, @value=:four>]
       +[]
       
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00624 seconds (files took 0.09754 seconds to load)
11 examples, 3 failures

Failed examples:

rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck (FAILED - 1)
  #return
    returns cards to the deck (FAILED - 2)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 3)

Failures:

  1) Deck#take doesn't allow you to take more cards than are in the deck
     Failure/Error: expect do
       expected Exception with "not enough cards" but nothing was raised
     # ./spec/deck_spec.rb:62:in `block (3 levels) in <top (required)>'

  2) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  3) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fe0ef881e90 @suit=:hearts, @value=:four>]
            got: nil
       
       (compared using ==)
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00612 seconds (files took 0.10385 seconds to load)
11 examples, 3 failures

Failed examples:

rspec ./spec/deck_spec.rb:61 # Deck#take doesn't allow you to take more cards than are in the deck
rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 1)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 2)

Failures:

  1) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  2) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:30:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00572 seconds (files took 0.08795 seconds to load)
11 examples, 2 failures

Failed examples:

rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 1)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 2)

Failures:

  1) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 4
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  2) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
       
       expected: [#<Card:0x007fa8dfa16140 @suit=:hearts, @value=:four>]
            got: [[#<Card:0x007fa8dfa16140 @suit=:hearts, @value=:four>, #<Card:0x007fa8dfa160a0 @suit=:hearts, @value=:five>, #<Card:0x007fa8dfa16000 @suit=:hearts, @value=:six>]]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,4 @@
       -[#<Card:0x007fa8dfa16140 @suit=:hearts, @value=:four>]
       +[[#<Card:0x007fa8dfa16140 @suit=:hearts, @value=:four>,
       +  #<Card:0x007fa8dfa160a0 @suit=:hearts, @value=:five>,
       +  #<Card:0x007fa8dfa16000 @suit=:hearts, @value=:six>]]
       
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00687 seconds (files took 0.0826 seconds to load)
11 examples, 2 failures

Failed examples:

rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck (FAILED - 1)
    does not destroy the passed array
    adds new cards to the bottom of the deck (FAILED - 2)

Failures:

  1) Deck#return returns cards to the deck
     Failure/Error: expect(deck.count).to eq(6)
       
       expected: 6
            got: 3
       
       (compared using ==)
     # ./spec/deck_spec.rb:77:in `block (3 levels) in <top (required)>'

  2) Deck#return adds new cards to the bottom of the deck
     Failure/Error: expect(deck.take(1)).to eq(more_cards[0..0])
     RuntimeError:
       not enough cards
     # ./lib/deck.rb:30:in `take'
     # ./spec/deck_spec.rb:90:in `block (3 levels) in <top (required)>'

Finished in 0.00522 seconds (files took 0.0882 seconds to load)
11 examples, 2 failures

Failed examples:

rspec ./spec/deck_spec.rb:75 # Deck#return returns cards to the deck
rspec ./spec/deck_spec.rb:86 # Deck#return adds new cards to the bottom of the deck
> bundle exec rspec spec/deck_spec.rb

Deck
  does not expose its cards directly
  ::all_cards
    starts with a count of 52
    returns all cards without duplicates
  #initialize
    by default fills itself with 52 cards
    can be initialized with an array of cards
  #take
    takes cards off the top of the deck
    removes cards from deck on take
    doesn't allow you to take more cards than are in the deck
  #return
    returns cards to the deck
    does not destroy the passed array
    adds new cards to the bottom of the deck

Finished in 0.00534 seconds (files took 0.08216 seconds to load)
11 examples, 0 failures
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name (FAILED - 1)
  assigns the bankroll (FAILED - 2)
  #pay_winnings
    adds to winnings (FAILED - 3)
  #return_cards
    returns player's cards to the deck (FAILED - 4)
    resets hand to nil (FAILED - 5)
  #place_bet
    registers bet with dealer (FAILED - 6)
    deducts bet from bankroll (FAILED - 7)
    enforces limits (FAILED - 8)

Failures:

  1) Player assigns the name
     Failure/Error: expect(player.name).to eq("Nick the Greek")
       
       expected: "Nick the Greek"
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:9:in `block (2 levels) in <top (required)>'

  2) Player assigns the bankroll
     Failure/Error: expect(player.bankroll).to eq(200_000)
       
       expected: 200000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:12:in `block (2 levels) in <top (required)>'

  3) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  4) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fe0bb57da38 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fe0bb57da38 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  5) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fe0bb5348ec @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  6) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fc1768a53d8>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fc1768a53d8>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  7) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  8) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01208 seconds (files took 0.08076 seconds to load)
8 examples, 8 failures

Failed examples:

rspec ./spec/player_spec.rb:8 # Player assigns the name
rspec ./spec/player_spec.rb:11 # Player assigns the bankroll
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll (FAILED - 1)
  #pay_winnings
    adds to winnings (FAILED - 2)
  #return_cards
    returns player's cards to the deck (FAILED - 3)
    resets hand to nil (FAILED - 4)
  #place_bet
    registers bet with dealer (FAILED - 5)
    deducts bet from bankroll (FAILED - 6)
    enforces limits (FAILED - 7)

Failures:

  1) Player assigns the bankroll
     Failure/Error: expect(player.bankroll).to eq(200_000)
       
       expected: 200000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:12:in `block (2 levels) in <top (required)>'

  2) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  3) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fdc39dc3430 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fdc39dc3430 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  4) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fdc39d7a2a8 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  5) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fb873acc690 @name="Nick the Greek">, 10000)
           expected: 1 time with arguments: (#<Player:0x007fb873acc690 @name="Nick the Greek">, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  6) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: nil
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  7) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01557 seconds (files took 0.08492 seconds to load)
8 examples, 7 failures

Failed examples:

rspec ./spec/player_spec.rb:11 # Player assigns the bankroll
rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> 
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings (FAILED - 1)
  #return_cards
    returns player's cards to the deck (FAILED - 2)
    resets hand to nil (FAILED - 3)
  #place_bet
    registers bet with dealer (FAILED - 4)
    deducts bet from bankroll (FAILED - 5)
    enforces limits (FAILED - 6)

Failures:

  1) Player#pay_winnings adds to winnings
     Failure/Error: expect(player.bankroll).to eq(200_200)
       
       expected: 200200
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:19:in `block (3 levels) in <top (required)>'

  2) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3fc77c64b008 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3fc77c64b008 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  3) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fc77c5ffe78 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  4) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f8ef8bcf3c0 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f8ef8bcf3c0 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  5) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  6) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01091 seconds (files took 0.08374 seconds to load)
8 examples, 6 failures

Failed examples:

rspec ./spec/player_spec.rb:16 # Player#pay_winnings adds to winnings
rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck (FAILED - 1)
    resets hand to nil (FAILED - 2)
  #place_bet
    registers bet with dealer (FAILED - 3)
    deducts bet from bankroll (FAILED - 4)
    enforces limits (FAILED - 5)

Failures:

  1) Player#return_cards returns player's cards to the deck
     Failure/Error: expect(hand).to receive(:return_cards).with(deck)
       (Double "hand").return_cards(#<RSpec::Mocks::Double:0x3ff9e5da9ad4 @name="deck">)
           expected: 1 time with arguments: (#<RSpec::Mocks::Double:0x3ff9e5da9ad4 @name="deck">)
           received: 0 times
     # ./spec/player_spec.rb:30:in `block (3 levels) in <top (required)>'

  2) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3ff9e5d64920 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  3) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ff3cbaa9440 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ff3cbaa9440 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  4) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  5) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01216 seconds (files took 0.08568 seconds to load)
8 examples, 5 failures

Failed examples:

rspec ./spec/player_spec.rb:29 # Player#return_cards returns player's cards to the deck
rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fe5dd912d0c @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fcbbb1fd770 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fcbbb1fd770 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01074 seconds (files took 0.09613 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3ffbdc4f4d00 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007ff7b89c1780 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007ff7b89c1780 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01073 seconds (files took 0.08818 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fed138d0c58 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fda271795e0 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fda271795e0 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01048 seconds (files took 0.08291 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fe13b518dc4 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fc276a098b8 @name="Nick the Greek", @bankroll=200000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fc276a098b8 @name="Nick the Greek", @bankroll=200000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: expect(player.bankroll).to eq(190_000)
       
       expected: 190000
            got: 200000
       
       (compared using ==)
     # ./spec/player_spec.rb:50:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01121 seconds (files took 0.0844 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll
    enforces limits (FAILED - 3)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3ff3c586ac24 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007fe78b0915d0 @name="Nick the Greek", @bankroll=190000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007fe78b0915d0 @name="Nick the Greek", @bankroll=190000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01107 seconds (files took 0.07863 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll
    enforces limits (FAILED - 3)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fd97f8f4998 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       Double "dealer" received :take_bet with unexpected arguments
         expected: (#<Player:0x007fb2ff1c0ed0 @name="Nick the Greek", @bankroll=190000>, 10000)
              got: (no args)
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01064 seconds (files took 0.08591 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll
    enforces limits (FAILED - 3)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fc3b4ce89b8 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       Double "dealer" received :take_bet with unexpected arguments
         expected: (#<Player:0x007f87699a9028 @name="Nick the Greek", @bankroll=190000>, 10000)
              got: (10000)
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01614 seconds (files took 0.09096 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fcbad8bcd5c @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: player.place_bet(dealer, 10_000)
       Double "dealer" received unexpected message :classs with (no args)
     # ./lib/player.rb:20:in `place_bet'
     # ./spec/player_spec.rb:45:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: player.place_bet(dealer, 10_000)
       Double "dealer" received unexpected message :classs with (no args)
     # ./lib/player.rb:20:in `place_bet'
     # ./spec/player_spec.rb:49:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet", got #<RSpec::Mocks::MockExpectationError: Double "dealer" received unexpected message :classs with (no args)> with backtrace:
         # ./lib/player.rb:20:in `place_bet'
         # ./spec/player_spec.rb:55:in `block (4 levels) in <top (required)>'
         # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01153 seconds (files took 0.08331 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
RSpec::Mocks::Double
    registers bet with dealer (FAILED - 2)
RSpec::Mocks::Double
    deducts bet from bankroll
RSpec::Mocks::Double
    enforces limits (FAILED - 3)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3fc7600e8a3c @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: expect(dealer).to receive(:take_bet).with(player, 10_000)
       (Double "dealer").take_bet(#<Player:0x007f8ec01a91d0 @name="Nick the Greek", @bankroll=190000>, 10000)
           expected: 1 time with arguments: (#<Player:0x007f8ec01a91d0 @name="Nick the Greek", @bankroll=190000>, 10000)
           received: 0 times
     # ./spec/player_spec.rb:44:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01151 seconds (files took 0.08455 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil (FAILED - 1)
  #place_bet
    registers bet with dealer (FAILED - 2)
    deducts bet from bankroll (FAILED - 3)
    enforces limits (FAILED - 4)

Failures:

  1) Player#return_cards resets hand to nil
     Failure/Error: expect(player.hand).to be_nil
       expected: nil
            got: #<RSpec::Mocks::Double:0x3ff0a9cb0ac8 @name="hand">
     # ./spec/player_spec.rb:36:in `block (3 levels) in <top (required)>'

  2) Player#place_bet registers bet with dealer
     Failure/Error: player.place_bet(dealer, 10_000)
     NameError:
       undefined local variable or method `player' for #<Player:0x007fe153939298>
     # ./lib/player.rb:20:in `place_bet'
     # ./spec/player_spec.rb:45:in `block (3 levels) in <top (required)>'

  3) Player#place_bet deducts bet from bankroll
     Failure/Error: player.place_bet(dealer, 10_000)
     NameError:
       undefined local variable or method `player' for #<Player:0x007fe152b06dd8>
     # ./lib/player.rb:20:in `place_bet'
     # ./spec/player_spec.rb:49:in `block (3 levels) in <top (required)>'

  4) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet", got #<NameError: undefined local variable or method `player' for #<Player:0x007fe152aae700>> with backtrace:
         # ./lib/player.rb:20:in `place_bet'
         # ./spec/player_spec.rb:55:in `block (4 levels) in <top (required)>'
         # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01316 seconds (files took 0.08459 seconds to load)
8 examples, 4 failures

Failed examples:

rspec ./spec/player_spec.rb:34 # Player#return_cards resets hand to nil
rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer (FAILED - 1)
    deducts bet from bankroll (FAILED - 2)
    enforces limits (FAILED - 3)

Failures:

  1) Player#place_bet registers bet with dealer
     Failure/Error: player.place_bet(dealer, 10_000)
     NameError:
       undefined local variable or method `player' for #<Player:0x007fbdb6a157e0>
     # ./lib/player.rb:20:in `place_bet'
     # ./spec/player_spec.rb:45:in `block (3 levels) in <top (required)>'

  2) Player#place_bet deducts bet from bankroll
     Failure/Error: player.place_bet(dealer, 10_000)
     NameError:
       undefined local variable or method `player' for #<Player:0x007fbdb6233b30>
     # ./lib/player.rb:20:in `place_bet'
     # ./spec/player_spec.rb:49:in `block (3 levels) in <top (required)>'

  3) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet", got #<NameError: undefined local variable or method `player' for #<Player:0x007fbdb69e5e78>> with backtrace:
         # ./lib/player.rb:20:in `place_bet'
         # ./spec/player_spec.rb:55:in `block (4 levels) in <top (required)>'
         # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01796 seconds (files took 0.0924 seconds to load)
8 examples, 3 failures

Failed examples:

rspec ./spec/player_spec.rb:43 # Player#place_bet registers bet with dealer
rspec ./spec/player_spec.rb:48 # Player#place_bet deducts bet from bankroll
rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll
    enforces limits (FAILED - 1)

Failures:

  1) Player#place_bet enforces limits
     Failure/Error: expect do
       expected Exception with "player can't cover bet" but nothing was raised
     # ./spec/player_spec.rb:54:in `block (3 levels) in <top (required)>'

Finished in 0.01072 seconds (files took 0.08613 seconds to load)
8 examples, 1 failure

Failed examples:

rspec ./spec/player_spec.rb:53 # Player#place_bet enforces limits
> bundle exec rspec spec/player_spec.rb

Player
  assigns the name
  assigns the bankroll
  #pay_winnings
    adds to winnings
  #return_cards
    returns player's cards to the deck
    resets hand to nil
  #place_bet
    registers bet with dealer
    deducts bet from bankroll
    enforces limits

Finished in 0.01066 seconds (files took 0.08032 seconds to load)
8 examples, 0 failures
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f89fa19cb80>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected nil to include #<RSpec::Mocks::Double:0x3fc4fd07f04c @name="card">, but it does not respond to `include?`
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01628 seconds (files took 0.08005 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for nil:NilClass
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f933715eb50 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc99b4fb4ac @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc99b4fb4ac @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f9338014e10 @suit=:spades, @value=:deuce>, #<Card:0x007f9338014c30 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f9338014e10 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f9338014c30 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01653 seconds (files took 0.09403 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
       Double "deck" received unexpected message :shift with (2)
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f8eb41ddf18 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc75a0b2cbc @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc75a0b2cbc @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f8eb40ac4f0 @suit=:spades, @value=:deuce>, #<Card:0x007f8eb40ac270 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f8eb40ac4f0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f8eb40ac270 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01592 seconds (files took 0.09202 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
RSpec::Mocks::Double
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for RSpec::Mocks::Double:Class
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fd97e9a4ef8 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fecbfc7f740 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fecbfc7f740 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fd980080ac8 @suit=:spades, @value=:deuce>, #<Card:0x007fd980080988 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fd980080ac8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fd980080988 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01829 seconds (files took 0.08935 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> 
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
Class
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: expect(hand.cards).to match_array(deck_cards)
     NoMethodError:
       undefined method `cards' for Class:Class
     # ./spec/hand_spec.rb:17:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fc8298b9270 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe414c34f8c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe414c34f8c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc82903c6d8 @suit=:spades, @value=:deuce>, #<Card:0x007fc82903c548 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc82903c6d8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc82903c548 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01465 seconds (files took 0.08095 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NameError:
       uninitialized constant Hand::Deck
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fc6ae2b3708 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe3571056d8 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe3571056d8 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc6ae01df48 @suit=:spades, @value=:deuce>, #<Card:0x007fc6ae01dc50 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc6ae01df48 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc6ae01dc50 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01571 seconds (files took 0.08429 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards (FAILED - 1)
  #points
    adds up normal cards (FAILED - 2)
    counts an ace as 11 if it can (FAILED - 3)
    counts some aces as 1 and others as 11 (FAILED - 4)
  #busted?
    is busted if points > 21 (FAILED - 5)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 6)
    doesn't hit if busted (FAILED - 7)
  #beats?
    returns true if other hand has fewer points (FAILED - 8)
    returns false if hands have equal points (FAILED - 9)
    returns false if busted (FAILED - 10)
  #return_cards
    returns cards to deck (FAILED - 11)
    removes card from hand (FAILED - 12)

Failures:

  1) Hand::deal_from deals a hand of two cards
     Failure/Error: hand = Hand.deal_from(deck)
     NameError:
       uninitialized constant Hand::Deck
     # ./lib/hand.rb:8:in `deal_from'
     # ./spec/hand_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  3) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  4) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  5) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fc4fd286af8 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  6) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe27e8f34b4 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe27e8f34b4 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  7) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  10) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  12) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc4fd110d40 @suit=:spades, @value=:deuce>, #<Card:0x007fc4fd110ca0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc4fd110d40 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc4fd110ca0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01747 seconds (files took 0.08109 seconds to load)
13 examples, 12 failures

Failed examples:

rspec ./spec/hand_spec.rb:6 # Hand::deal_from deals a hand of two cards
rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards (FAILED - 1)
    counts an ace as 11 if it can (FAILED - 2)
    counts some aces as 1 and others as 11 (FAILED - 3)
  #busted?
    is busted if points > 21 (FAILED - 4)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  2) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: nil
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fde0c160c50 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fef0608c598 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fef0608c598 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fde0b93a580 @suit=:spades, @value=:deuce>, #<Card:0x007fde0b93a3a0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fde0b93a580 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fde0b93a3a0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01901 seconds (files took 0.09494 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards (FAILED - 1)
    counts an ace as 11 if it can (FAILED - 2)
    counts some aces as 1 and others as 11 (FAILED - 3)
  #busted?
    is busted if points > 21 (FAILED - 4)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points adds up normal cards
     Failure/Error: expect(hand.points).to eq(6)
       
       expected: 6
            got: [#<Card:0x007fb6371699d8 @suit=:spades, @value=:deuce>, #<Card:0x007fb6371698c0 @suit=:spades, @value=:four>]
       
       (compared using ==)
     # ./spec/hand_spec.rb:28:in `block (3 levels) in <top (required)>'

  2) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  3) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fb63713a548 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fdb1b839754 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fdb1b839754 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fb638000028 @suit=:spades, @value=:deuce>, #<Card:0x007fb63692fbc8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fb638000028 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fb63692fbc8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01855 seconds (files took 0.10861 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:22 # Hand#points adds up normal cards
rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:20:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f96ffac56f0 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fcb8004b13c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fcb8004b13c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f9700020f78 @suit=:spades, @value=:deuce>, #<Card:0x007f9700020de8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f9700020f78 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f9700020de8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01983 seconds (files took 0.11009 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb


Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     TypeError:
       false can't be coerced into Fixnum
     # ./lib/hand.rb:21:in `+'
     # ./lib/hand.rb:21:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     TypeError:
       false can't be coerced into Fixnum
     # ./lib/hand.rb:21:in `+'
     # ./lib/hand.rb:21:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007f953e16dd40 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fca9f0aafec @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fca9f0aafec @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f953f0e46e8 @suit=:spades, @value=:deuce>, #<Card:0x007f953f0e4440 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f953f0e46e8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f953f0e4440 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01718 seconds (files took 0.07975 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> 
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     TypeError:
       false can't be coerced into Fixnum
     # ./lib/hand.rb:21:in `+'
     # ./lib/hand.rb:21:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     TypeError:
       false can't be coerced into Fixnum
     # ./lib/hand.rb:21:in `+'
     # ./lib/hand.rb:21:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fe7fc2958b0 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff3fe0e6f00 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff3fe0e6f00 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe7fc140a78 @suit=:spades, @value=:deuce>, #<Card:0x007fe7fc140758 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe7fc140a78 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe7fc140758 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01562 seconds (files took 0.08029 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:27:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:27:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fb765116358 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fdbb2486660 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fdbb2486660 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fb76482d3b8 @suit=:spades, @value=:deuce>, #<Card:0x007fb76482d160 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fb76482d3b8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fb76482d160 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01757 seconds (files took 0.09592 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
:deuce
:four
    adds up normal cards
:ten
:ace
    counts an ace as 11 if it can (FAILED - 1)
:ace
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:28:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:28:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fc8232d43b0 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe4119065ac @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe4119065ac @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc8231406e8 @suit=:spades, @value=:deuce>, #<Card:0x007fc823140508 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc8231406e8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc823140508 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01633 seconds (files took 0.09606 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 4)
    doesn't hit if busted (FAILED - 5)
  #beats?
    returns true if other hand has fewer points (FAILED - 6)
    returns false if hands have equal points (FAILED - 7)
    returns false if busted (FAILED - 8)
  #return_cards
    returns cards to deck (FAILED - 9)
    removes card from hand (FAILED - 10)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: 32
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: 44
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
       expected `#<Hand:0x007fae7e1f73e8 @cards=[]>.busted?` to return true, got nil
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fd73f48bd08 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fd73f48bd08 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  5) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fae7e08d9d0 @suit=:spades, @value=:deuce>, #<Card:0x007fae7e08d7f0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fae7e08d9d0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fae7e08d7f0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01774 seconds (files took 0.08843 seconds to load)
13 examples, 10 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21 (FAILED - 4)
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: 32
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: 44
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:34:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:34:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fe2a1438cf8 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fe2a1438cf8 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc5419d2d90 @suit=:spades, @value=:deuce>, #<Card:0x007fc5419d2c00 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc5419d2d90 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc5419d2c00 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.02199 seconds (files took 0.0888 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21 (FAILED - 4)
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: 32
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: 44
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:34:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:34:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff1760bb754 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff1760bb754 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe2ec0eb8f8 @suit=:spades, @value=:deuce>, #<Card:0x007fe2ec0eb6a0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe2ec0eb8f8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe2ec0eb6a0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01781 seconds (files took 0.0833 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb
bundler: failed to load command: rspec (/Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec)
SyntaxError: /Users/PedroPreciadoIII/Desktop/firstname_lastname-2/lib/hand.rb:48: syntax error, unexpected end-of-input, expecting keyword_end
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `block in load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `each'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:96:in `setup'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:84:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:69:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:37:in `invoke'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/exe/rspec:4:in `<top (required)>'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `<top (required)>'
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21 (FAILED - 4)
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:28:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     RuntimeError:
       ace has special value
     # ./lib/card.rb:64:in `blackjack_value'
     # ./lib/hand.rb:28:in `block in points'
     # ./lib/hand.rb:19:in `each'
     # ./lib/hand.rb:19:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:35:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:35:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fd1e41432b4 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fd1e41432b4 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fa3c8192a08 @suit=:spades, @value=:deuce>, #<Card:0x007fa3c81926c0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fa3c8192a08 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fa3c81926c0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01672 seconds (files took 0.0858 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21 (FAILED - 4)
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
       
       expected: 21
            got: 10
       
       (compared using ==)
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
       
       expected: 12
            got: 10
       
       (compared using ==)
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:35:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:35:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fd1e0453ae8 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fd1e0453ae8 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fa3c0804380 @suit=:spades, @value=:deuce>, #<Card:0x007fa3c0804060 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fa3c0804380 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fa3c0804060 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01637 seconds (files took 0.0876 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can (FAILED - 1)
    counts some aces as 1 and others as 11 (FAILED - 2)
  #busted?
    is busted if points > 21 (FAILED - 3)
    is not busted if points <= 21 (FAILED - 4)
  #hit
    draws a card from deck (FAILED - 5)
    doesn't hit if busted (FAILED - 6)
  #beats?
    returns true if other hand has fewer points (FAILED - 7)
    returns false if hands have equal points (FAILED - 8)
    returns false if busted (FAILED - 9)
  #return_cards
    returns cards to deck (FAILED - 10)
    removes card from hand (FAILED - 11)

Failures:

  1) Hand#points counts an ace as 11 if it can
     Failure/Error: expect(hand.points).to eq(21)
     NoMethodError:
       undefined method `+' for nil:NilClass
     # ./lib/hand.rb:24:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:37:in `block (3 levels) in <top (required)>'

  2) Hand#points counts some aces as 1 and others as 11
     Failure/Error: expect(hand.points).to eq(12)
     NoMethodError:
       undefined method `+' for nil:NilClass
     # ./lib/hand.rb:24:in `block in points'
     # ./lib/hand.rb:20:in `each'
     # ./lib/hand.rb:20:in `points'
     # ./spec/hand_spec.rb:47:in `block (3 levels) in <top (required)>'

  3) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:36:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  4) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:36:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  5) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff36e45c738 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff36e45c738 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  6) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  8) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  9) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  10) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  11) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe6dd814590 @suit=:spades, @value=:deuce>, #<Card:0x007fe6dd8144a0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe6dd814590 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe6dd8144a0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01774 seconds (files took 0.08881 seconds to load)
13 examples, 11 failures

Failed examples:

rspec ./spec/hand_spec.rb:31 # Hand#points counts an ace as 11 if it can
rspec ./spec/hand_spec.rb:40 # Hand#points counts some aces as 1 and others as 11
rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21 (FAILED - 1)
    is not busted if points <= 21 (FAILED - 2)
  #hit
    draws a card from deck (FAILED - 3)
    doesn't hit if busted (FAILED - 4)
  #beats?
    returns true if other hand has fewer points (FAILED - 5)
    returns false if hands have equal points (FAILED - 6)
    returns false if busted (FAILED - 7)
  #return_cards
    returns cards to deck (FAILED - 8)
    removes card from hand (FAILED - 9)

Failures:

  1) Hand#busted? is busted if points > 21
     Failure/Error: expect(hand).to be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:36:in `busted?'
     # ./spec/hand_spec.rb:56:in `block (3 levels) in <top (required)>'

  2) Hand#busted? is not busted if points <= 21
     Failure/Error: expect(hand).to_not be_busted
     NoMethodError:
       undefined method `points' for []:Array
     # ./lib/hand.rb:36:in `busted?'
     # ./spec/hand_spec.rb:63:in `block (3 levels) in <top (required)>'

  3) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3fc1df07f770 @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3fc1df07f770 @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  4) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  5) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  6) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  7) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  8) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  9) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f83be82a7a0 @suit=:spades, @value=:deuce>, #<Card:0x007f83be82a4a8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f83be82a7a0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f83be82a4a8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01959 seconds (files took 0.09878 seconds to load)
13 examples, 9 failures

Failed examples:

rspec ./spec/hand_spec.rb:52 # Hand#busted? is busted if points > 21
rspec ./spec/hand_spec.rb:59 # Hand#busted? is not busted if points <= 21
rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 1)
    doesn't hit if busted (FAILED - 2)
  #beats?
    returns true if other hand has fewer points (FAILED - 3)
    returns false if hands have equal points (FAILED - 4)
    returns false if busted (FAILED - 5)
  #return_cards
    returns cards to deck (FAILED - 6)
    removes card from hand (FAILED - 7)

Failures:

  1) Hand#hit draws a card from deck
     Failure/Error: expect(hand.cards).to include(card)
       expected [] to include #<RSpec::Mocks::Double:0x3ff01fce8e1c @name="card">
       Diff:
       @@ -1,2 +1,2 @@
       -[#<RSpec::Mocks::Double:0x3ff01fce8e1c @name="card">]
       +[]
       
     # ./spec/hand_spec.rb:76:in `block (3 levels) in <top (required)>'

  2) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted" but nothing was raised
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  3) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  4) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  5) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  6) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  7) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe04002dbe0 @suit=:spades, @value=:deuce>, #<Card:0x007fe04002d988 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe04002dbe0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe04002d988 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.0171 seconds (files took 0.09353 seconds to load)
13 examples, 7 failures

Failed examples:

rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck (FAILED - 1)
    doesn't hit if busted (FAILED - 2)
  #beats?
    returns true if other hand has fewer points (FAILED - 3)
    returns false if hands have equal points (FAILED - 4)
    returns false if busted (FAILED - 5)
  #return_cards
    returns cards to deck (FAILED - 6)
    removes card from hand (FAILED - 7)

Failures:

  1) Hand#hit draws a card from deck
     Failure/Error: hand.hit(deck)
       Double "deck" received unexpected message :shift with (no args)
     # ./lib/hand.rb:40:in `hit'
     # ./spec/hand_spec.rb:74:in `block (3 levels) in <top (required)>'

  2) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted", got #<RSpec::Mocks::MockExpectationError: Double "deck" received unexpected message :shift with (no args)> with backtrace:
         # ./lib/hand.rb:40:in `hit'
         # ./spec/hand_spec.rb:87:in `block (4 levels) in <top (required)>'
         # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  3) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  4) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  5) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  6) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  7) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fa2bb1bf4f8 @suit=:spades, @value=:deuce>, #<Card:0x007fa2bb1bf408 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fa2bb1bf4f8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fa2bb1bf408 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01808 seconds (files took 0.10451 seconds to load)
13 examples, 7 failures

Failed examples:

rspec ./spec/hand_spec.rb:68 # Hand#hit draws a card from deck
rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted (FAILED - 1)
  #beats?
    returns true if other hand has fewer points (FAILED - 2)
    returns false if hands have equal points (FAILED - 3)
    returns false if busted (FAILED - 4)
  #return_cards
    returns cards to deck (FAILED - 5)
    removes card from hand (FAILED - 6)

Failures:

  1) Hand#hit doesn't hit if busted
     Failure/Error: expect do
       expected Exception with "already busted", got #<RSpec::Mocks::MockExpectationError: (Double "deck").take(1)
           expected: 0 times with any arguments
           received: 1 time with arguments: (1)> with backtrace:
         # ./lib/hand.rb:40:in `hit'
         # ./spec/hand_spec.rb:87:in `block (4 levels) in <top (required)>'
         # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'
     # ./spec/hand_spec.rb:86:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  3) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  4) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  5) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  6) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f9ea1940128 @suit=:spades, @value=:deuce>, #<Card:0x007f9ea193bc68 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f9ea1940128 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f9ea193bc68 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01821 seconds (files took 0.08661 seconds to load)
13 examples, 6 failures

Failed examples:

rspec ./spec/hand_spec.rb:79 # Hand#hit doesn't hit if busted
rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points (FAILED - 1)
    returns false if hands have equal points (FAILED - 2)
    returns false if busted (FAILED - 3)
  #return_cards
    returns cards to deck (FAILED - 4)
    removes card from hand (FAILED - 5)

Failures:

  1) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  3) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  4) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  5) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fd962087198 @suit=:spades, @value=:deuce>, #<Card:0x007fd962086fb8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fd962087198 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fd962086fb8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.02262 seconds (files took 0.08673 seconds to load)
13 examples, 5 failures

Failed examples:

rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points (FAILED - 1)
    returns false if busted (FAILED - 2)
  #return_cards
    returns cards to deck (FAILED - 3)
    removes card from hand (FAILED - 4)

Failures:

  1) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  3) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  4) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fa4af9b7bb0 @suit=:spades, @value=:deuce>, #<Card:0x007fa4af9b7638 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fa4af9b7bb0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fa4af9b7638 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01536 seconds (files took 0.09582 seconds to load)
13 examples, 4 failures

Failed examples:

rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck (FAILED - 2)
    removes card from hand (FAILED - 3)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards returns cards to deck
     Failure/Error: expect(deck).to receive(:return) do |cards|
       (Double "deck").return(any args)
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/hand_spec.rb:144:in `block (3 levels) in <top (required)>'

  3) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f950103dcc8 @suit=:spades, @value=:deuce>, #<Card:0x007f950103d9f8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f950103dcc8 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f950103d9f8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01582 seconds (files took 0.08034 seconds to load)
13 examples, 3 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:143 # Hand#return_cards returns cards to deck
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fab7b9e7608 @suit=:spades, @value=:deuce>, #<Card:0x007fab7b9e7568 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fab7b9e7608 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fab7b9e7568 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01543 seconds (files took 0.08401 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand2.beats?(hand1)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:133:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fa2238a3b68 @suit=:spades, @value=:deuce>, #<Card:0x007fa2238a3898 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fa2238a3b68 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fa2238a3898 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.0161 seconds (files took 0.10765 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand2.beats?(hand1)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:133:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ff5df827ad0 @suit=:spades, @value=:deuce>, #<Card:0x007ff5df8278f0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ff5df827ad0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ff5df8278f0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01849 seconds (files took 0.08486 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand2.beats?(hand1)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:133:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fecfc0db330 @suit=:spades, @value=:deuce>, #<Card:0x007fecfc0db0b0 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fecfc0db330 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fecfc0db0b0 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01713 seconds (files took 0.08153 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand2.beats?(hand1)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:133:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f9b8b90f4b0 @suit=:spades, @value=:deuce>, #<Card:0x007f9b8b90f2f8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f9b8b90f4b0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f9b8b90f2f8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.02142 seconds (files took 0.12582 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007ff052050088 @suit=:spades, @value=:deuce>, #<Card:0x007ff05204bf60 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007ff052050088 @suit=:spades, @value=:deuce>,
       + #<Card:0x007ff05204bf60 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01607 seconds (files took 0.08442 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
21
20
    returns true if other hand has fewer points
21
21
    returns false if hands have equal points
30
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fe97f1e6a98 @suit=:spades, @value=:deuce>, #<Card:0x007fe97f1e6700 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fe97f1e6a98 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fe97f1e6700 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01578 seconds (files took 0.08254 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points (FAILED - 1)
    returns false if hands have equal points
    returns false if busted (FAILED - 2)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 3)

Failures:

  1) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  3) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fbaaa8632d0 @suit=:spades, @value=:deuce>, #<Card:0x007fbaaa863118 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fbaaa8632d0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fbaaa863118 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01712 seconds (files took 0.10006 seconds to load)
13 examples, 3 failures

Failed examples:

rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points (FAILED - 1)
    returns false if hands have equal points
    returns false if busted (FAILED - 2)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 3)

Failures:

  1) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got true
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  3) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007f92bb8ffd40 @suit=:spades, @value=:deuce>, #<Card:0x007f92bb8ffc28 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007f92bb8ffd40 @suit=:spades, @value=:deuce>,
       + #<Card:0x007f92bb8ffc28 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.0156 seconds (files took 0.08254 seconds to load)
13 examples, 3 failures

Failed examples:

rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points (FAILED - 1)
    returns false if hands have equal points
    returns false if busted (FAILED - 2)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 3)

Failures:

  1) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns false if busted
     Failure/Error: expect(hand2.beats?(hand1)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:133:in `block (3 levels) in <top (required)>'

  3) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fa83d05f888 @suit=:spades, @value=:deuce>, #<Card:0x007fa83d05f630 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fa83d05f888 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fa83d05f630 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01736 seconds (files took 0.09212 seconds to load)
13 examples, 3 failures

Failed examples:

rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points (FAILED - 1)
    returns false if hands have equal points (FAILED - 2)
    returns false if busted (FAILED - 3)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 4)

Failures:

  1) Hand#beats? returns true if other hand has fewer points
     Failure/Error: expect(hand1.beats?(hand2)).to be(true)
       
       expected true
            got nil
     # ./spec/hand_spec.rb:103:in `block (3 levels) in <top (required)>'

  2) Hand#beats? returns false if hands have equal points
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:117:in `block (3 levels) in <top (required)>'

  3) Hand#beats? returns false if busted
     Failure/Error: expect(hand1.beats?(hand2)).to be(false)
       
       expected false
            got nil
     # ./spec/hand_spec.rb:132:in `block (3 levels) in <top (required)>'

  4) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc3cb8edcd0 @suit=:spades, @value=:deuce>, #<Card:0x007fc3cb8edac8 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc3cb8edcd0 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc3cb8edac8 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01564 seconds (files took 0.08284 seconds to load)
13 examples, 4 failures

Failed examples:

rspec ./spec/hand_spec.rb:93 # Hand#beats? returns true if other hand has fewer points
rspec ./spec/hand_spec.rb:107 # Hand#beats? returns false if hands have equal points
rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted (FAILED - 1)
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 2)

Failures:

  1) Hand#beats? returns false if busted
     Failure/Error: expect(hand2.beats?(hand1)).to be(true)
       
       expected true
            got false
     # ./spec/hand_spec.rb:133:in `block (3 levels) in <top (required)>'

  2) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fb92f03c010 @suit=:spades, @value=:deuce>, #<Card:0x007fb92f037e48 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fb92f03c010 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fb92f037e48 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01687 seconds (files took 0.09515 seconds to load)
13 examples, 2 failures

Failed examples:

rspec ./spec/hand_spec.rb:121 # Hand#beats? returns false if busted
rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted
  #return_cards
    returns cards to deck
    removes card from hand (FAILED - 1)

Failures:

  1) Hand#return_cards removes card from hand
     Failure/Error: expect(hand.cards).to eq([])
       
       expected: []
            got: [#<Card:0x007fc1931e7c18 @suit=:spades, @value=:deuce>, #<Card:0x007fc1931e7a88 @suit=:spades, @value=:three>]
       
       (compared using ==)
       
       Diff:
       @@ -1,2 +1,3 @@
       -[]
       +[#<Card:0x007fc1931e7c18 @suit=:spades, @value=:deuce>,
       + #<Card:0x007fc1931e7a88 @suit=:spades, @value=:three>]
       
     # ./spec/hand_spec.rb:155:in `block (3 levels) in <top (required)>'

Finished in 0.01566 seconds (files took 0.08575 seconds to load)
13 examples, 1 failure

Failed examples:

rspec ./spec/hand_spec.rb:151 # Hand#return_cards removes card from hand
> bundle exec rspec spec/hand_spec.rb
bundler: failed to load command: rspec (/Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec)
SyntaxError: /Users/PedroPreciadoIII/Desktop/firstname_lastname-2/lib/hand.rb:51: Can't change the value of self
    self = []
          ^
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `block in load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `each'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/configuration.rb:1105:in `load_spec_files'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:96:in `setup'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:84:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:69:in `run'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/lib/rspec/core/runner.rb:37:in `invoke'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rspec-core-3.1.7/exe/rspec:4:in `<top (required)>'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `load'
  /Users/PedroPreciadoIII/.rbenv/versions/2.3.1/bin/rspec:23:in `<top (required)>'
> bundle exec rspec spec/hand_spec.rb

Hand
  ::deal_from
    deals a hand of two cards
  #points
    adds up normal cards
    counts an ace as 11 if it can
    counts some aces as 1 and others as 11
  #busted?
    is busted if points > 21
    is not busted if points <= 21
  #hit
    draws a card from deck
    doesn't hit if busted
  #beats?
    returns true if other hand has fewer points
    returns false if hands have equal points
    returns false if busted
  #return_cards
    returns cards to deck
    removes card from hand

Finished in 0.01505 seconds (files took 0.08063 seconds to load)
13 examples, 0 failures
> bundle exec rspec spec/dealer_spec.rb
